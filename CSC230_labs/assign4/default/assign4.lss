
assign4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800200  00002454  000024e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002454  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800262  00800262  0000254a  2**0
                  ALLOC
  3 .debug_aranges 000001a0  00000000  00000000  0000254a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002b4  00000000  00000000  000026ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002a9f  00000000  00000000  0000299e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000013dc  00000000  00000000  0000543d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001c19  00000000  00000000  00006819  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b0  00000000  00000000  00008434  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044b  00000000  00000000  000086e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000088e  00000000  00000000  00008b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000093bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 e5       	ldi	r30, 0x54	; 84
      fc:	f4 e2       	ldi	r31, 0x24	; 36
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a2 36       	cpi	r26, 0x62	; 98
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a2 e6       	ldi	r26, 0x62	; 98
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a8 36       	cpi	r26, 0x68	; 104
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <main>
     122:	0c 94 28 12 	jmp	0x2450	; 0x2450 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <clear_screen>:
// we don't need to include them here.
// #include <avr/io.h>
// #include <util/delay.h>


void clear_screen(){
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
		lcd_command( 0x01 );
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	0e 94 67 06 	call	0xcce	; 0xcce <lcd_command>
}
     138:	cf 91       	pop	r28
     13a:	df 91       	pop	r29
     13c:	08 95       	ret

0000013e <len>:

/*
* Returns the number of characters in a null terminated
* C-string.
*/
int len(char* s){
     13e:	df 93       	push	r29
     140:	cf 93       	push	r28
     142:	00 d0       	rcall	.+0      	; 0x144 <len+0x6>
     144:	0f 92       	push	r0
     146:	cd b7       	in	r28, 0x3d	; 61
     148:	de b7       	in	r29, 0x3e	; 62
     14a:	9c 83       	std	Y+4, r25	; 0x04
     14c:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0;
     14e:	1a 82       	std	Y+2, r1	; 0x02
     150:	19 82       	std	Y+1, r1	; 0x01
     152:	05 c0       	rjmp	.+10     	; 0x15e <len+0x20>
	while(s[i] != 0){
		i++;
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	9a 81       	ldd	r25, Y+2	; 0x02
     158:	01 96       	adiw	r24, 0x01	; 1
     15a:	9a 83       	std	Y+2, r25	; 0x02
     15c:	89 83       	std	Y+1, r24	; 0x01
* Returns the number of characters in a null terminated
* C-string.
*/
int len(char* s){
	int i = 0;
	while(s[i] != 0){
     15e:	29 81       	ldd	r18, Y+1	; 0x01
     160:	3a 81       	ldd	r19, Y+2	; 0x02
     162:	8b 81       	ldd	r24, Y+3	; 0x03
     164:	9c 81       	ldd	r25, Y+4	; 0x04
     166:	fc 01       	movw	r30, r24
     168:	e2 0f       	add	r30, r18
     16a:	f3 1f       	adc	r31, r19
     16c:	80 81       	ld	r24, Z
     16e:	88 23       	and	r24, r24
     170:	89 f7       	brne	.-30     	; 0x154 <len+0x16>
		i++;
	}
	return i;
     172:	89 81       	ldd	r24, Y+1	; 0x01
     174:	9a 81       	ldd	r25, Y+2	; 0x02
}
     176:	0f 90       	pop	r0
     178:	0f 90       	pop	r0
     17a:	0f 90       	pop	r0
     17c:	0f 90       	pop	r0
     17e:	cf 91       	pop	r28
     180:	df 91       	pop	r29
     182:	08 95       	ret

00000184 <fill_buffer>:
* Post-conditions:
*	buff is populated with chars from s starting from the char which
*	ptr is pointing to. The chars will be taken from the beginning of
*	s if ptr reaches the end of s
*/ 
void fill_buffer(char* buff, char* ptr, char* s){
     184:	0f 93       	push	r16
     186:	1f 93       	push	r17
     188:	df 93       	push	r29
     18a:	cf 93       	push	r28
     18c:	cd b7       	in	r28, 0x3d	; 61
     18e:	de b7       	in	r29, 0x3e	; 62
     190:	28 97       	sbiw	r28, 0x08	; 8
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	f8 94       	cli
     196:	de bf       	out	0x3e, r29	; 62
     198:	0f be       	out	0x3f, r0	; 63
     19a:	cd bf       	out	0x3d, r28	; 61
     19c:	9c 83       	std	Y+4, r25	; 0x04
     19e:	8b 83       	std	Y+3, r24	; 0x03
     1a0:	7e 83       	std	Y+6, r23	; 0x06
     1a2:	6d 83       	std	Y+5, r22	; 0x05
     1a4:	58 87       	std	Y+8, r21	; 0x08
     1a6:	4f 83       	std	Y+7, r20	; 0x07
		for(int p = 0; p < 16;p++){
     1a8:	1a 82       	std	Y+2, r1	; 0x02
     1aa:	19 82       	std	Y+1, r1	; 0x01
     1ac:	39 c0       	rjmp	.+114    	; 0x220 <fill_buffer+0x9c>
			if(p < len(ptr)){
     1ae:	8d 81       	ldd	r24, Y+5	; 0x05
     1b0:	9e 81       	ldd	r25, Y+6	; 0x06
     1b2:	0e 94 9f 00 	call	0x13e	; 0x13e <len>
     1b6:	9c 01       	movw	r18, r24
     1b8:	89 81       	ldd	r24, Y+1	; 0x01
     1ba:	9a 81       	ldd	r25, Y+2	; 0x02
     1bc:	82 17       	cp	r24, r18
     1be:	93 07       	cpc	r25, r19
     1c0:	8c f4       	brge	.+34     	; 0x1e4 <fill_buffer+0x60>
				buff[p] = ptr[p];
     1c2:	29 81       	ldd	r18, Y+1	; 0x01
     1c4:	3a 81       	ldd	r19, Y+2	; 0x02
     1c6:	8b 81       	ldd	r24, Y+3	; 0x03
     1c8:	9c 81       	ldd	r25, Y+4	; 0x04
     1ca:	dc 01       	movw	r26, r24
     1cc:	a2 0f       	add	r26, r18
     1ce:	b3 1f       	adc	r27, r19
     1d0:	29 81       	ldd	r18, Y+1	; 0x01
     1d2:	3a 81       	ldd	r19, Y+2	; 0x02
     1d4:	8d 81       	ldd	r24, Y+5	; 0x05
     1d6:	9e 81       	ldd	r25, Y+6	; 0x06
     1d8:	fc 01       	movw	r30, r24
     1da:	e2 0f       	add	r30, r18
     1dc:	f3 1f       	adc	r31, r19
     1de:	80 81       	ld	r24, Z
     1e0:	8c 93       	st	X, r24
     1e2:	19 c0       	rjmp	.+50     	; 0x216 <fill_buffer+0x92>
			} else {
				buff[p] = s[p-len(ptr)];
     1e4:	29 81       	ldd	r18, Y+1	; 0x01
     1e6:	3a 81       	ldd	r19, Y+2	; 0x02
     1e8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ea:	9c 81       	ldd	r25, Y+4	; 0x04
     1ec:	8c 01       	movw	r16, r24
     1ee:	02 0f       	add	r16, r18
     1f0:	13 1f       	adc	r17, r19
     1f2:	8d 81       	ldd	r24, Y+5	; 0x05
     1f4:	9e 81       	ldd	r25, Y+6	; 0x06
     1f6:	0e 94 9f 00 	call	0x13e	; 0x13e <len>
     1fa:	9c 01       	movw	r18, r24
     1fc:	89 81       	ldd	r24, Y+1	; 0x01
     1fe:	9a 81       	ldd	r25, Y+2	; 0x02
     200:	82 1b       	sub	r24, r18
     202:	93 0b       	sbc	r25, r19
     204:	9c 01       	movw	r18, r24
     206:	8f 81       	ldd	r24, Y+7	; 0x07
     208:	98 85       	ldd	r25, Y+8	; 0x08
     20a:	fc 01       	movw	r30, r24
     20c:	e2 0f       	add	r30, r18
     20e:	f3 1f       	adc	r31, r19
     210:	80 81       	ld	r24, Z
     212:	f8 01       	movw	r30, r16
     214:	80 83       	st	Z, r24
*	buff is populated with chars from s starting from the char which
*	ptr is pointing to. The chars will be taken from the beginning of
*	s if ptr reaches the end of s
*/ 
void fill_buffer(char* buff, char* ptr, char* s){
		for(int p = 0; p < 16;p++){
     216:	89 81       	ldd	r24, Y+1	; 0x01
     218:	9a 81       	ldd	r25, Y+2	; 0x02
     21a:	01 96       	adiw	r24, 0x01	; 1
     21c:	9a 83       	std	Y+2, r25	; 0x02
     21e:	89 83       	std	Y+1, r24	; 0x01
     220:	89 81       	ldd	r24, Y+1	; 0x01
     222:	9a 81       	ldd	r25, Y+2	; 0x02
     224:	80 31       	cpi	r24, 0x10	; 16
     226:	91 05       	cpc	r25, r1
     228:	14 f2       	brlt	.-124    	; 0x1ae <fill_buffer+0x2a>
				buff[p] = ptr[p];
			} else {
				buff[p] = s[p-len(ptr)];
			}
		}
}
     22a:	28 96       	adiw	r28, 0x08	; 8
     22c:	0f b6       	in	r0, 0x3f	; 63
     22e:	f8 94       	cli
     230:	de bf       	out	0x3e, r29	; 62
     232:	0f be       	out	0x3f, r0	; 63
     234:	cd bf       	out	0x3d, r28	; 61
     236:	cf 91       	pop	r28
     238:	df 91       	pop	r29
     23a:	1f 91       	pop	r17
     23c:	0f 91       	pop	r16
     23e:	08 95       	ret

00000240 <check_button>:
*	up - 2
* 	down - 4
* 	left - 8
* 	select - 16
*/
int check_button(){
     240:	df 93       	push	r29
     242:	cf 93       	push	r28
     244:	00 d0       	rcall	.+0      	; 0x246 <check_button+0x6>
     246:	00 d0       	rcall	.+0      	; 0x248 <check_button+0x8>
     248:	cd b7       	in	r28, 0x3d	; 61
     24a:	de b7       	in	r29, 0x3e	; 62
	
	// start conversion
	ADCSRA |= 0x40;
     24c:	aa e7       	ldi	r26, 0x7A	; 122
     24e:	b0 e0       	ldi	r27, 0x00	; 0
     250:	ea e7       	ldi	r30, 0x7A	; 122
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	80 81       	ld	r24, Z
     256:	80 64       	ori	r24, 0x40	; 64
     258:	8c 93       	st	X, r24

	// bit 6 in ADCSRA is 1 while conversion is in progress
	// 0b0100 0000
	// 0x40
	while (ADCSRA & 0x40)
     25a:	ea e7       	ldi	r30, 0x7A	; 122
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	88 2f       	mov	r24, r24
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	80 74       	andi	r24, 0x40	; 64
     266:	90 70       	andi	r25, 0x00	; 0
     268:	00 97       	sbiw	r24, 0x00	; 0
     26a:	b9 f7       	brne	.-18     	; 0x25a <check_button+0x1a>
		;
	unsigned int val = ADCL;
     26c:	e8 e7       	ldi	r30, 0x78	; 120
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	80 81       	ld	r24, Z
     272:	88 2f       	mov	r24, r24
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	9c 83       	std	Y+4, r25	; 0x04
     278:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int val2 = ADCH;
     27a:	e9 e7       	ldi	r30, 0x79	; 121
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	80 81       	ld	r24, Z
     280:	88 2f       	mov	r24, r24
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	9a 83       	std	Y+2, r25	; 0x02
     286:	89 83       	std	Y+1, r24	; 0x01

	val += (val2 << 8);
     288:	89 81       	ldd	r24, Y+1	; 0x01
     28a:	9a 81       	ldd	r25, Y+2	; 0x02
     28c:	38 2f       	mov	r19, r24
     28e:	22 27       	eor	r18, r18
     290:	8b 81       	ldd	r24, Y+3	; 0x03
     292:	9c 81       	ldd	r25, Y+4	; 0x04
     294:	82 0f       	add	r24, r18
     296:	93 1f       	adc	r25, r19
     298:	9c 83       	std	Y+4, r25	; 0x04
     29a:	8b 83       	std	Y+3, r24	; 0x03
	 *  if (adc_key_in < 195)  return btnUP; 
	 *  if (adc_key_in < 380)  return btnDOWN; 
	 *  if (adc_key_in < 555)  return btnLEFT; 
	 *  if (adc_key_in < 790)  return btnSELECT;   
	 */
	if(press == 1){
     29c:	80 91 66 02 	lds	r24, 0x0266
     2a0:	90 91 67 02 	lds	r25, 0x0267
     2a4:	81 30       	cpi	r24, 0x01	; 1
     2a6:	91 05       	cpc	r25, r1
     2a8:	69 f4       	brne	.+26     	; 0x2c4 <check_button+0x84>
		if(val > 900) press = 0;
     2aa:	8b 81       	ldd	r24, Y+3	; 0x03
     2ac:	9c 81       	ldd	r25, Y+4	; 0x04
     2ae:	23 e0       	ldi	r18, 0x03	; 3
     2b0:	85 38       	cpi	r24, 0x85	; 133
     2b2:	92 07       	cpc	r25, r18
     2b4:	20 f0       	brcs	.+8      	; 0x2be <check_button+0x7e>
     2b6:	10 92 67 02 	sts	0x0267, r1
     2ba:	10 92 66 02 	sts	0x0266, r1
		return 0;
     2be:	1e 82       	std	Y+6, r1	; 0x06
     2c0:	1d 82       	std	Y+5, r1	; 0x05
     2c2:	73 c0       	rjmp	.+230    	; 0x3aa <check_button+0x16a>
	}
	if(val<790) press = 1;
     2c4:	8b 81       	ldd	r24, Y+3	; 0x03
     2c6:	9c 81       	ldd	r25, Y+4	; 0x04
     2c8:	23 e0       	ldi	r18, 0x03	; 3
     2ca:	86 31       	cpi	r24, 0x16	; 22
     2cc:	92 07       	cpc	r25, r18
     2ce:	30 f4       	brcc	.+12     	; 0x2dc <check_button+0x9c>
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	90 93 67 02 	sts	0x0267, r25
     2d8:	80 93 66 02 	sts	0x0266, r24

	if (val < 50){   //right-inc. scroll speed, inc led
     2dc:	8b 81       	ldd	r24, Y+3	; 0x03
     2de:	9c 81       	ldd	r25, Y+4	; 0x04
     2e0:	82 33       	cpi	r24, 0x32	; 50
     2e2:	91 05       	cpc	r25, r1
     2e4:	b8 f4       	brcc	.+46     	; 0x314 <check_button+0xd4>
	  if(delay_value>2) delay_value--;
     2e6:	80 91 00 02 	lds	r24, 0x0200
     2ea:	90 91 01 02 	lds	r25, 0x0201
     2ee:	83 30       	cpi	r24, 0x03	; 3
     2f0:	91 05       	cpc	r25, r1
     2f2:	4c f0       	brlt	.+18     	; 0x306 <check_button+0xc6>
     2f4:	80 91 00 02 	lds	r24, 0x0200
     2f8:	90 91 01 02 	lds	r25, 0x0201
     2fc:	01 97       	sbiw	r24, 0x01	; 1
     2fe:	90 93 01 02 	sts	0x0201, r25
     302:	80 93 00 02 	sts	0x0200, r24
	  inc_led();
     306:	0e 94 93 02 	call	0x526	; 0x526 <inc_led>
	  return 1;  
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	9e 83       	std	Y+6, r25	; 0x06
     310:	8d 83       	std	Y+5, r24	; 0x05
     312:	4b c0       	rjmp	.+150    	; 0x3aa <check_button+0x16a>
    }else if (val < 195){//up-pause scroll
     314:	8b 81       	ldd	r24, Y+3	; 0x03
     316:	9c 81       	ldd	r25, Y+4	; 0x04
     318:	83 3c       	cpi	r24, 0xC3	; 195
     31a:	91 05       	cpc	r25, r1
     31c:	58 f4       	brcc	.+22     	; 0x334 <check_button+0xf4>
	  pause = 1;
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	90 93 65 02 	sts	0x0265, r25
     326:	80 93 64 02 	sts	0x0264, r24
	  return 2;  
     32a:	82 e0       	ldi	r24, 0x02	; 2
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	9e 83       	std	Y+6, r25	; 0x06
     330:	8d 83       	std	Y+5, r24	; 0x05
     332:	3b c0       	rjmp	.+118    	; 0x3aa <check_button+0x16a>
    }else if (val < 380){//down-resume scroll
     334:	8b 81       	ldd	r24, Y+3	; 0x03
     336:	9c 81       	ldd	r25, Y+4	; 0x04
     338:	21 e0       	ldi	r18, 0x01	; 1
     33a:	8c 37       	cpi	r24, 0x7C	; 124
     33c:	92 07       	cpc	r25, r18
     33e:	48 f4       	brcc	.+18     	; 0x352 <check_button+0x112>
	  pause = 0; 
     340:	10 92 65 02 	sts	0x0265, r1
     344:	10 92 64 02 	sts	0x0264, r1
	  return 4;  
     348:	84 e0       	ldi	r24, 0x04	; 4
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	9e 83       	std	Y+6, r25	; 0x06
     34e:	8d 83       	std	Y+5, r24	; 0x05
     350:	2c c0       	rjmp	.+88     	; 0x3aa <check_button+0x16a>
    }else if (val < 555){//left-dec. scroll speed, dec led
     352:	8b 81       	ldd	r24, Y+3	; 0x03
     354:	9c 81       	ldd	r25, Y+4	; 0x04
     356:	22 e0       	ldi	r18, 0x02	; 2
     358:	8b 32       	cpi	r24, 0x2B	; 43
     35a:	92 07       	cpc	r25, r18
     35c:	b8 f4       	brcc	.+46     	; 0x38c <check_button+0x14c>
	  if(delay_value<6)delay_value++;
     35e:	80 91 00 02 	lds	r24, 0x0200
     362:	90 91 01 02 	lds	r25, 0x0201
     366:	86 30       	cpi	r24, 0x06	; 6
     368:	91 05       	cpc	r25, r1
     36a:	4c f4       	brge	.+18     	; 0x37e <check_button+0x13e>
     36c:	80 91 00 02 	lds	r24, 0x0200
     370:	90 91 01 02 	lds	r25, 0x0201
     374:	01 96       	adiw	r24, 0x01	; 1
     376:	90 93 01 02 	sts	0x0201, r25
     37a:	80 93 00 02 	sts	0x0200, r24
	  dec_led();
     37e:	0e 94 de 02 	call	0x5bc	; 0x5bc <dec_led>
	  return 8;  
     382:	88 e0       	ldi	r24, 0x08	; 8
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	9e 83       	std	Y+6, r25	; 0x06
     388:	8d 83       	std	Y+5, r24	; 0x05
     38a:	0f c0       	rjmp	.+30     	; 0x3aa <check_button+0x16a>
    }else if (val < 790){//sel-display alternate message
     38c:	8b 81       	ldd	r24, Y+3	; 0x03
     38e:	9c 81       	ldd	r25, Y+4	; 0x04
     390:	23 e0       	ldi	r18, 0x03	; 3
     392:	86 31       	cpi	r24, 0x16	; 22
     394:	92 07       	cpc	r25, r18
     396:	38 f4       	brcc	.+14     	; 0x3a6 <check_button+0x166>
	  alt_msg();
     398:	0e 94 28 03 	call	0x650	; 0x650 <alt_msg>
	  return 16;
     39c:	80 e1       	ldi	r24, 0x10	; 16
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	9e 83       	std	Y+6, r25	; 0x06
     3a2:	8d 83       	std	Y+5, r24	; 0x05
     3a4:	02 c0       	rjmp	.+4      	; 0x3aa <check_button+0x16a>
	}else 
	  return 0;  
     3a6:	1e 82       	std	Y+6, r1	; 0x06
     3a8:	1d 82       	std	Y+5, r1	; 0x05
     3aa:	8d 81       	ldd	r24, Y+5	; 0x05
     3ac:	9e 81       	ldd	r25, Y+6	; 0x06
}
     3ae:	26 96       	adiw	r28, 0x06	; 6
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	f8 94       	cli
     3b4:	de bf       	out	0x3e, r29	; 62
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	cd bf       	out	0x3d, r28	; 61
     3ba:	cf 91       	pop	r28
     3bc:	df 91       	pop	r29
     3be:	08 95       	ret

000003c0 <delay>:
/*
* Delay takes a multiplier argument which produces a delay
* equal to multiplier*100ms. Also calls the check_button()
* function every 100ms. 
*/
void delay(int multiplier){
     3c0:	df 93       	push	r29
     3c2:	cf 93       	push	r28
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
     3c8:	62 97       	sbiw	r28, 0x12	; 18
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	de bf       	out	0x3e, r29	; 62
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	cd bf       	out	0x3d, r28	; 61
     3d4:	9a 8b       	std	Y+18, r25	; 0x12
     3d6:	89 8b       	std	Y+17, r24	; 0x11
	for(int i =0; i < multiplier; i++){
     3d8:	18 8a       	std	Y+16, r1	; 0x10
     3da:	1f 86       	std	Y+15, r1	; 0x0f
     3dc:	7d c0       	rjmp	.+250    	; 0x4d8 <delay+0x118>
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	a8 ec       	ldi	r26, 0xC8	; 200
     3e4:	b2 e4       	ldi	r27, 0x42	; 66
     3e6:	8b 87       	std	Y+11, r24	; 0x0b
     3e8:	9c 87       	std	Y+12, r25	; 0x0c
     3ea:	ad 87       	std	Y+13, r26	; 0x0d
     3ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     3ee:	6b 85       	ldd	r22, Y+11	; 0x0b
     3f0:	7c 85       	ldd	r23, Y+12	; 0x0c
     3f2:	8d 85       	ldd	r24, Y+13	; 0x0d
     3f4:	9e 85       	ldd	r25, Y+14	; 0x0e
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	4a e7       	ldi	r20, 0x7A	; 122
     3fc:	55 e4       	ldi	r21, 0x45	; 69
     3fe:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3>
     402:	dc 01       	movw	r26, r24
     404:	cb 01       	movw	r24, r22
     406:	8f 83       	std	Y+7, r24	; 0x07
     408:	98 87       	std	Y+8, r25	; 0x08
     40a:	a9 87       	std	Y+9, r26	; 0x09
     40c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     40e:	6f 81       	ldd	r22, Y+7	; 0x07
     410:	78 85       	ldd	r23, Y+8	; 0x08
     412:	89 85       	ldd	r24, Y+9	; 0x09
     414:	9a 85       	ldd	r25, Y+10	; 0x0a
     416:	20 e0       	ldi	r18, 0x00	; 0
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	40 e8       	ldi	r20, 0x80	; 128
     41c:	5f e3       	ldi	r21, 0x3F	; 63
     41e:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__ltsf2>
     422:	88 23       	and	r24, r24
     424:	2c f4       	brge	.+10     	; 0x430 <delay+0x70>
		__ticks = 1;
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	9e 83       	std	Y+6, r25	; 0x06
     42c:	8d 83       	std	Y+5, r24	; 0x05
     42e:	3f c0       	rjmp	.+126    	; 0x4ae <delay+0xee>
	else if (__tmp > 65535)
     430:	6f 81       	ldd	r22, Y+7	; 0x07
     432:	78 85       	ldd	r23, Y+8	; 0x08
     434:	89 85       	ldd	r24, Y+9	; 0x09
     436:	9a 85       	ldd	r25, Y+10	; 0x0a
     438:	20 e0       	ldi	r18, 0x00	; 0
     43a:	3f ef       	ldi	r19, 0xFF	; 255
     43c:	4f e7       	ldi	r20, 0x7F	; 127
     43e:	57 e4       	ldi	r21, 0x47	; 71
     440:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__gtsf2>
     444:	18 16       	cp	r1, r24
     446:	4c f5       	brge	.+82     	; 0x49a <delay+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     448:	6b 85       	ldd	r22, Y+11	; 0x0b
     44a:	7c 85       	ldd	r23, Y+12	; 0x0c
     44c:	8d 85       	ldd	r24, Y+13	; 0x0d
     44e:	9e 85       	ldd	r25, Y+14	; 0x0e
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	40 e2       	ldi	r20, 0x20	; 32
     456:	51 e4       	ldi	r21, 0x41	; 65
     458:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3>
     45c:	dc 01       	movw	r26, r24
     45e:	cb 01       	movw	r24, r22
     460:	bc 01       	movw	r22, r24
     462:	cd 01       	movw	r24, r26
     464:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fixunssfsi>
     468:	dc 01       	movw	r26, r24
     46a:	cb 01       	movw	r24, r22
     46c:	9e 83       	std	Y+6, r25	; 0x06
     46e:	8d 83       	std	Y+5, r24	; 0x05
     470:	0f c0       	rjmp	.+30     	; 0x490 <delay+0xd0>
     472:	80 e9       	ldi	r24, 0x90	; 144
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	9c 83       	std	Y+4, r25	; 0x04
     478:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     47a:	8b 81       	ldd	r24, Y+3	; 0x03
     47c:	9c 81       	ldd	r25, Y+4	; 0x04
     47e:	01 97       	sbiw	r24, 0x01	; 1
     480:	f1 f7       	brne	.-4      	; 0x47e <delay+0xbe>
     482:	9c 83       	std	Y+4, r25	; 0x04
     484:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     486:	8d 81       	ldd	r24, Y+5	; 0x05
     488:	9e 81       	ldd	r25, Y+6	; 0x06
     48a:	01 97       	sbiw	r24, 0x01	; 1
     48c:	9e 83       	std	Y+6, r25	; 0x06
     48e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     490:	8d 81       	ldd	r24, Y+5	; 0x05
     492:	9e 81       	ldd	r25, Y+6	; 0x06
     494:	00 97       	sbiw	r24, 0x00	; 0
     496:	69 f7       	brne	.-38     	; 0x472 <delay+0xb2>
     498:	14 c0       	rjmp	.+40     	; 0x4c2 <delay+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     49a:	6f 81       	ldd	r22, Y+7	; 0x07
     49c:	78 85       	ldd	r23, Y+8	; 0x08
     49e:	89 85       	ldd	r24, Y+9	; 0x09
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fixunssfsi>
     4a6:	dc 01       	movw	r26, r24
     4a8:	cb 01       	movw	r24, r22
     4aa:	9e 83       	std	Y+6, r25	; 0x06
     4ac:	8d 83       	std	Y+5, r24	; 0x05
     4ae:	8d 81       	ldd	r24, Y+5	; 0x05
     4b0:	9e 81       	ldd	r25, Y+6	; 0x06
     4b2:	9a 83       	std	Y+2, r25	; 0x02
     4b4:	89 83       	std	Y+1, r24	; 0x01
     4b6:	89 81       	ldd	r24, Y+1	; 0x01
     4b8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ba:	01 97       	sbiw	r24, 0x01	; 1
     4bc:	f1 f7       	brne	.-4      	; 0x4ba <delay+0xfa>
     4be:	9a 83       	std	Y+2, r25	; 0x02
     4c0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		button = check_button();
     4c2:	0e 94 20 01 	call	0x240	; 0x240 <check_button>
     4c6:	90 93 63 02 	sts	0x0263, r25
     4ca:	80 93 62 02 	sts	0x0262, r24
* Delay takes a multiplier argument which produces a delay
* equal to multiplier*100ms. Also calls the check_button()
* function every 100ms. 
*/
void delay(int multiplier){
	for(int i =0; i < multiplier; i++){
     4ce:	8f 85       	ldd	r24, Y+15	; 0x0f
     4d0:	98 89       	ldd	r25, Y+16	; 0x10
     4d2:	01 96       	adiw	r24, 0x01	; 1
     4d4:	98 8b       	std	Y+16, r25	; 0x10
     4d6:	8f 87       	std	Y+15, r24	; 0x0f
     4d8:	2f 85       	ldd	r18, Y+15	; 0x0f
     4da:	38 89       	ldd	r19, Y+16	; 0x10
     4dc:	89 89       	ldd	r24, Y+17	; 0x11
     4de:	9a 89       	ldd	r25, Y+18	; 0x12
     4e0:	28 17       	cp	r18, r24
     4e2:	39 07       	cpc	r19, r25
     4e4:	0c f4       	brge	.+2      	; 0x4e8 <delay+0x128>
     4e6:	7b cf       	rjmp	.-266    	; 0x3de <delay+0x1e>
		_delay_ms(100);
		button = check_button();
	}
}
     4e8:	62 96       	adiw	r28, 0x12	; 18
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	f8 94       	cli
     4ee:	de bf       	out	0x3e, r29	; 62
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	cd bf       	out	0x3d, r28	; 61
     4f4:	cf 91       	pop	r28
     4f6:	df 91       	pop	r29
     4f8:	08 95       	ret

000004fa <led_init>:

void led_init(){
     4fa:	df 93       	push	r29
     4fc:	cf 93       	push	r28
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF;
     502:	e4 e2       	ldi	r30, 0x24	; 36
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	8f ef       	ldi	r24, 0xFF	; 255
     508:	80 83       	st	Z, r24
	DDRL = 0xFF;
     50a:	ea e0       	ldi	r30, 0x0A	; 10
     50c:	f1 e0       	ldi	r31, 0x01	; 1
     50e:	8f ef       	ldi	r24, 0xFF	; 255
     510:	80 83       	st	Z, r24

	PORTB = 0;
     512:	e5 e2       	ldi	r30, 0x25	; 37
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	10 82       	st	Z, r1
	PORTL = 0x0A;
     518:	eb e0       	ldi	r30, 0x0B	; 11
     51a:	f1 e0       	ldi	r31, 0x01	; 1
     51c:	8a e0       	ldi	r24, 0x0A	; 10
     51e:	80 83       	st	Z, r24
}
     520:	cf 91       	pop	r28
     522:	df 91       	pop	r29
     524:	08 95       	ret

00000526 <inc_led>:

void inc_led(){
     526:	df 93       	push	r29
     528:	cf 93       	push	r28
     52a:	cd b7       	in	r28, 0x3d	; 61
     52c:	de b7       	in	r29, 0x3e	; 62
	if(PORTL==0x80){
     52e:	eb e0       	ldi	r30, 0x0B	; 11
     530:	f1 e0       	ldi	r31, 0x01	; 1
     532:	80 81       	ld	r24, Z
     534:	80 38       	cpi	r24, 0x80	; 128
     536:	09 f4       	brne	.+2      	; 0x53a <inc_led+0x14>
     538:	3e c0       	rjmp	.+124    	; 0x5b6 <inc_led+0x90>
		return;
	}else if(PORTL==0x20){
     53a:	eb e0       	ldi	r30, 0x0B	; 11
     53c:	f1 e0       	ldi	r31, 0x01	; 1
     53e:	80 81       	ld	r24, Z
     540:	80 32       	cpi	r24, 0x20	; 32
     542:	29 f4       	brne	.+10     	; 0x54e <inc_led+0x28>
		PORTL = 0x80;
     544:	eb e0       	ldi	r30, 0x0B	; 11
     546:	f1 e0       	ldi	r31, 0x01	; 1
     548:	80 e8       	ldi	r24, 0x80	; 128
     54a:	80 83       	st	Z, r24
     54c:	34 c0       	rjmp	.+104    	; 0x5b6 <inc_led+0x90>
	}else if(PORTL==0x08){
     54e:	eb e0       	ldi	r30, 0x0B	; 11
     550:	f1 e0       	ldi	r31, 0x01	; 1
     552:	80 81       	ld	r24, Z
     554:	88 30       	cpi	r24, 0x08	; 8
     556:	29 f4       	brne	.+10     	; 0x562 <inc_led+0x3c>
		PORTL = 0x20;
     558:	eb e0       	ldi	r30, 0x0B	; 11
     55a:	f1 e0       	ldi	r31, 0x01	; 1
     55c:	80 e2       	ldi	r24, 0x20	; 32
     55e:	80 83       	st	Z, r24
     560:	2a c0       	rjmp	.+84     	; 0x5b6 <inc_led+0x90>
	}else if(PORTL==0x0A){
     562:	eb e0       	ldi	r30, 0x0B	; 11
     564:	f1 e0       	ldi	r31, 0x01	; 1
     566:	80 81       	ld	r24, Z
     568:	8a 30       	cpi	r24, 0x0A	; 10
     56a:	29 f4       	brne	.+10     	; 0x576 <inc_led+0x50>
		PORTL = 0x08;
     56c:	eb e0       	ldi	r30, 0x0B	; 11
     56e:	f1 e0       	ldi	r31, 0x01	; 1
     570:	88 e0       	ldi	r24, 0x08	; 8
     572:	80 83       	st	Z, r24
     574:	20 c0       	rjmp	.+64     	; 0x5b6 <inc_led+0x90>
	}else if(PORTL==0x02){
     576:	eb e0       	ldi	r30, 0x0B	; 11
     578:	f1 e0       	ldi	r31, 0x01	; 1
     57a:	80 81       	ld	r24, Z
     57c:	82 30       	cpi	r24, 0x02	; 2
     57e:	29 f4       	brne	.+10     	; 0x58a <inc_led+0x64>
		PORTL = 0x0A;
     580:	eb e0       	ldi	r30, 0x0B	; 11
     582:	f1 e0       	ldi	r31, 0x01	; 1
     584:	8a e0       	ldi	r24, 0x0A	; 10
     586:	80 83       	st	Z, r24
     588:	16 c0       	rjmp	.+44     	; 0x5b6 <inc_led+0x90>
	}else if(PORTL==0x00){
     58a:	eb e0       	ldi	r30, 0x0B	; 11
     58c:	f1 e0       	ldi	r31, 0x01	; 1
     58e:	80 81       	ld	r24, Z
     590:	88 23       	and	r24, r24
     592:	89 f4       	brne	.+34     	; 0x5b6 <inc_led+0x90>
		if(PORTB==0x08){
     594:	e5 e2       	ldi	r30, 0x25	; 37
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	80 81       	ld	r24, Z
     59a:	88 30       	cpi	r24, 0x08	; 8
     59c:	41 f4       	brne	.+16     	; 0x5ae <inc_led+0x88>
			PORTL = 0x02;
     59e:	eb e0       	ldi	r30, 0x0B	; 11
     5a0:	f1 e0       	ldi	r31, 0x01	; 1
     5a2:	82 e0       	ldi	r24, 0x02	; 2
     5a4:	80 83       	st	Z, r24
			PORTB = 0x00;
     5a6:	e5 e2       	ldi	r30, 0x25	; 37
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	10 82       	st	Z, r1
     5ac:	04 c0       	rjmp	.+8      	; 0x5b6 <inc_led+0x90>
		}else{
			PORTB = 0x08;
     5ae:	e5 e2       	ldi	r30, 0x25	; 37
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	88 e0       	ldi	r24, 0x08	; 8
     5b4:	80 83       	st	Z, r24
		}
	}
}
     5b6:	cf 91       	pop	r28
     5b8:	df 91       	pop	r29
     5ba:	08 95       	ret

000005bc <dec_led>:

void dec_led(){
     5bc:	df 93       	push	r29
     5be:	cf 93       	push	r28
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
	if(PORTL==0x80){
     5c4:	eb e0       	ldi	r30, 0x0B	; 11
     5c6:	f1 e0       	ldi	r31, 0x01	; 1
     5c8:	80 81       	ld	r24, Z
     5ca:	80 38       	cpi	r24, 0x80	; 128
     5cc:	29 f4       	brne	.+10     	; 0x5d8 <dec_led+0x1c>
		PORTL = 0x20;
     5ce:	eb e0       	ldi	r30, 0x0B	; 11
     5d0:	f1 e0       	ldi	r31, 0x01	; 1
     5d2:	80 e2       	ldi	r24, 0x20	; 32
     5d4:	80 83       	st	Z, r24
     5d6:	39 c0       	rjmp	.+114    	; 0x64a <dec_led+0x8e>
	}else if(PORTL==0x20){
     5d8:	eb e0       	ldi	r30, 0x0B	; 11
     5da:	f1 e0       	ldi	r31, 0x01	; 1
     5dc:	80 81       	ld	r24, Z
     5de:	80 32       	cpi	r24, 0x20	; 32
     5e0:	29 f4       	brne	.+10     	; 0x5ec <dec_led+0x30>
		PORTL = 0x08;
     5e2:	eb e0       	ldi	r30, 0x0B	; 11
     5e4:	f1 e0       	ldi	r31, 0x01	; 1
     5e6:	88 e0       	ldi	r24, 0x08	; 8
     5e8:	80 83       	st	Z, r24
     5ea:	2f c0       	rjmp	.+94     	; 0x64a <dec_led+0x8e>
	}else if(PORTL==0x08){
     5ec:	eb e0       	ldi	r30, 0x0B	; 11
     5ee:	f1 e0       	ldi	r31, 0x01	; 1
     5f0:	80 81       	ld	r24, Z
     5f2:	88 30       	cpi	r24, 0x08	; 8
     5f4:	29 f4       	brne	.+10     	; 0x600 <dec_led+0x44>
		PORTL = 0x0A;
     5f6:	eb e0       	ldi	r30, 0x0B	; 11
     5f8:	f1 e0       	ldi	r31, 0x01	; 1
     5fa:	8a e0       	ldi	r24, 0x0A	; 10
     5fc:	80 83       	st	Z, r24
     5fe:	25 c0       	rjmp	.+74     	; 0x64a <dec_led+0x8e>
	}else if(PORTL==0x0A){
     600:	eb e0       	ldi	r30, 0x0B	; 11
     602:	f1 e0       	ldi	r31, 0x01	; 1
     604:	80 81       	ld	r24, Z
     606:	8a 30       	cpi	r24, 0x0A	; 10
     608:	29 f4       	brne	.+10     	; 0x614 <dec_led+0x58>
		PORTL = 0x02;
     60a:	eb e0       	ldi	r30, 0x0B	; 11
     60c:	f1 e0       	ldi	r31, 0x01	; 1
     60e:	82 e0       	ldi	r24, 0x02	; 2
     610:	80 83       	st	Z, r24
     612:	1b c0       	rjmp	.+54     	; 0x64a <dec_led+0x8e>
	}else if(PORTL==0x02){
     614:	eb e0       	ldi	r30, 0x0B	; 11
     616:	f1 e0       	ldi	r31, 0x01	; 1
     618:	80 81       	ld	r24, Z
     61a:	82 30       	cpi	r24, 0x02	; 2
     61c:	41 f4       	brne	.+16     	; 0x62e <dec_led+0x72>
		PORTL = 0x00;
     61e:	eb e0       	ldi	r30, 0x0B	; 11
     620:	f1 e0       	ldi	r31, 0x01	; 1
     622:	10 82       	st	Z, r1
		PORTB = 0x08;
     624:	e5 e2       	ldi	r30, 0x25	; 37
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	88 e0       	ldi	r24, 0x08	; 8
     62a:	80 83       	st	Z, r24
     62c:	0e c0       	rjmp	.+28     	; 0x64a <dec_led+0x8e>
	}else if(PORTL==0x00){
     62e:	eb e0       	ldi	r30, 0x0B	; 11
     630:	f1 e0       	ldi	r31, 0x01	; 1
     632:	80 81       	ld	r24, Z
     634:	88 23       	and	r24, r24
     636:	49 f4       	brne	.+18     	; 0x64a <dec_led+0x8e>
		if(PORTB==0x08){
     638:	e5 e2       	ldi	r30, 0x25	; 37
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	80 81       	ld	r24, Z
     63e:	88 30       	cpi	r24, 0x08	; 8
     640:	21 f4       	brne	.+8      	; 0x64a <dec_led+0x8e>
			PORTB = 0x02;
     642:	e5 e2       	ldi	r30, 0x25	; 37
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	82 e0       	ldi	r24, 0x02	; 2
     648:	80 83       	st	Z, r24
		}else{
			return;
		}
	}
}
     64a:	cf 91       	pop	r28
     64c:	df 91       	pop	r29
     64e:	08 95       	ret

00000650 <alt_msg>:
/*
* Displays an alternate message for 3 seconds.
*/
void alt_msg(){
     650:	df 93       	push	r29
     652:	cf 93       	push	r28
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	64 97       	sbiw	r28, 0x14	; 20
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	de bf       	out	0x3e, r29	; 62
     660:	0f be       	out	0x3f, r0	; 63
     662:	cd bf       	out	0x3d, r28	; 61
	char* s_alt1 = "This Feature Is";
     664:	82 e0       	ldi	r24, 0x02	; 2
     666:	92 e0       	ldi	r25, 0x02	; 2
     668:	9c 8b       	std	Y+20, r25	; 0x14
     66a:	8b 8b       	std	Y+19, r24	; 0x13
	char* s_alt2 = "Not Available";
     66c:	82 e1       	ldi	r24, 0x12	; 18
     66e:	92 e0       	ldi	r25, 0x02	; 2
     670:	9a 8b       	std	Y+18, r25	; 0x12
     672:	89 8b       	std	Y+17, r24	; 0x11
	clear_screen();
     674:	0e 94 95 00 	call	0x12a	; 0x12a <clear_screen>
	lcd_xy(0,0);
     678:	80 e8       	ldi	r24, 0x80	; 128
     67a:	0e 94 67 06 	call	0xcce	; 0xcce <lcd_command>
	lcd_puts(s_alt1);
     67e:	8b 89       	ldd	r24, Y+19	; 0x13
     680:	9c 89       	ldd	r25, Y+20	; 0x14
     682:	0e 94 90 07 	call	0xf20	; 0xf20 <lcd_puts>
	lcd_xy(0,1);
     686:	80 ec       	ldi	r24, 0xC0	; 192
     688:	0e 94 67 06 	call	0xcce	; 0xcce <lcd_command>
	lcd_puts(s_alt2);
     68c:	89 89       	ldd	r24, Y+17	; 0x11
     68e:	9a 89       	ldd	r25, Y+18	; 0x12
     690:	0e 94 90 07 	call	0xf20	; 0xf20 <lcd_puts>
	for(int i = 0;i < 3;i++){
     694:	18 8a       	std	Y+16, r1	; 0x10
     696:	1f 86       	std	Y+15, r1	; 0x0f
     698:	77 c0       	rjmp	.+238    	; 0x788 <alt_msg+0x138>
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	aa e7       	ldi	r26, 0x7A	; 122
     6a0:	b4 e4       	ldi	r27, 0x44	; 68
     6a2:	8b 87       	std	Y+11, r24	; 0x0b
     6a4:	9c 87       	std	Y+12, r25	; 0x0c
     6a6:	ad 87       	std	Y+13, r26	; 0x0d
     6a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     6aa:	6b 85       	ldd	r22, Y+11	; 0x0b
     6ac:	7c 85       	ldd	r23, Y+12	; 0x0c
     6ae:	8d 85       	ldd	r24, Y+13	; 0x0d
     6b0:	9e 85       	ldd	r25, Y+14	; 0x0e
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	4a e7       	ldi	r20, 0x7A	; 122
     6b8:	55 e4       	ldi	r21, 0x45	; 69
     6ba:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3>
     6be:	dc 01       	movw	r26, r24
     6c0:	cb 01       	movw	r24, r22
     6c2:	8f 83       	std	Y+7, r24	; 0x07
     6c4:	98 87       	std	Y+8, r25	; 0x08
     6c6:	a9 87       	std	Y+9, r26	; 0x09
     6c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     6ca:	6f 81       	ldd	r22, Y+7	; 0x07
     6cc:	78 85       	ldd	r23, Y+8	; 0x08
     6ce:	89 85       	ldd	r24, Y+9	; 0x09
     6d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	40 e8       	ldi	r20, 0x80	; 128
     6d8:	5f e3       	ldi	r21, 0x3F	; 63
     6da:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__ltsf2>
     6de:	88 23       	and	r24, r24
     6e0:	2c f4       	brge	.+10     	; 0x6ec <alt_msg+0x9c>
		__ticks = 1;
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	9e 83       	std	Y+6, r25	; 0x06
     6e8:	8d 83       	std	Y+5, r24	; 0x05
     6ea:	3f c0       	rjmp	.+126    	; 0x76a <alt_msg+0x11a>
	else if (__tmp > 65535)
     6ec:	6f 81       	ldd	r22, Y+7	; 0x07
     6ee:	78 85       	ldd	r23, Y+8	; 0x08
     6f0:	89 85       	ldd	r24, Y+9	; 0x09
     6f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	3f ef       	ldi	r19, 0xFF	; 255
     6f8:	4f e7       	ldi	r20, 0x7F	; 127
     6fa:	57 e4       	ldi	r21, 0x47	; 71
     6fc:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__gtsf2>
     700:	18 16       	cp	r1, r24
     702:	4c f5       	brge	.+82     	; 0x756 <alt_msg+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     704:	6b 85       	ldd	r22, Y+11	; 0x0b
     706:	7c 85       	ldd	r23, Y+12	; 0x0c
     708:	8d 85       	ldd	r24, Y+13	; 0x0d
     70a:	9e 85       	ldd	r25, Y+14	; 0x0e
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	40 e2       	ldi	r20, 0x20	; 32
     712:	51 e4       	ldi	r21, 0x41	; 65
     714:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3>
     718:	dc 01       	movw	r26, r24
     71a:	cb 01       	movw	r24, r22
     71c:	bc 01       	movw	r22, r24
     71e:	cd 01       	movw	r24, r26
     720:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fixunssfsi>
     724:	dc 01       	movw	r26, r24
     726:	cb 01       	movw	r24, r22
     728:	9e 83       	std	Y+6, r25	; 0x06
     72a:	8d 83       	std	Y+5, r24	; 0x05
     72c:	0f c0       	rjmp	.+30     	; 0x74c <alt_msg+0xfc>
     72e:	80 e9       	ldi	r24, 0x90	; 144
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	9c 83       	std	Y+4, r25	; 0x04
     734:	8b 83       	std	Y+3, r24	; 0x03
     736:	8b 81       	ldd	r24, Y+3	; 0x03
     738:	9c 81       	ldd	r25, Y+4	; 0x04
     73a:	01 97       	sbiw	r24, 0x01	; 1
     73c:	f1 f7       	brne	.-4      	; 0x73a <alt_msg+0xea>
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     742:	8d 81       	ldd	r24, Y+5	; 0x05
     744:	9e 81       	ldd	r25, Y+6	; 0x06
     746:	01 97       	sbiw	r24, 0x01	; 1
     748:	9e 83       	std	Y+6, r25	; 0x06
     74a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     74c:	8d 81       	ldd	r24, Y+5	; 0x05
     74e:	9e 81       	ldd	r25, Y+6	; 0x06
     750:	00 97       	sbiw	r24, 0x00	; 0
     752:	69 f7       	brne	.-38     	; 0x72e <alt_msg+0xde>
     754:	14 c0       	rjmp	.+40     	; 0x77e <alt_msg+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     756:	6f 81       	ldd	r22, Y+7	; 0x07
     758:	78 85       	ldd	r23, Y+8	; 0x08
     75a:	89 85       	ldd	r24, Y+9	; 0x09
     75c:	9a 85       	ldd	r25, Y+10	; 0x0a
     75e:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fixunssfsi>
     762:	dc 01       	movw	r26, r24
     764:	cb 01       	movw	r24, r22
     766:	9e 83       	std	Y+6, r25	; 0x06
     768:	8d 83       	std	Y+5, r24	; 0x05
     76a:	8d 81       	ldd	r24, Y+5	; 0x05
     76c:	9e 81       	ldd	r25, Y+6	; 0x06
     76e:	9a 83       	std	Y+2, r25	; 0x02
     770:	89 83       	std	Y+1, r24	; 0x01
     772:	89 81       	ldd	r24, Y+1	; 0x01
     774:	9a 81       	ldd	r25, Y+2	; 0x02
     776:	01 97       	sbiw	r24, 0x01	; 1
     778:	f1 f7       	brne	.-4      	; 0x776 <alt_msg+0x126>
     77a:	9a 83       	std	Y+2, r25	; 0x02
     77c:	89 83       	std	Y+1, r24	; 0x01
     77e:	8f 85       	ldd	r24, Y+15	; 0x0f
     780:	98 89       	ldd	r25, Y+16	; 0x10
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	98 8b       	std	Y+16, r25	; 0x10
     786:	8f 87       	std	Y+15, r24	; 0x0f
     788:	8f 85       	ldd	r24, Y+15	; 0x0f
     78a:	98 89       	ldd	r25, Y+16	; 0x10
     78c:	83 30       	cpi	r24, 0x03	; 3
     78e:	91 05       	cpc	r25, r1
     790:	0c f4       	brge	.+2      	; 0x794 <alt_msg+0x144>
     792:	83 cf       	rjmp	.-250    	; 0x69a <alt_msg+0x4a>
		_delay_ms(1000);
	}
	clear_screen();
     794:	0e 94 95 00 	call	0x12a	; 0x12a <clear_screen>
}
     798:	64 96       	adiw	r28, 0x14	; 20
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	de bf       	out	0x3e, r29	; 62
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	cd bf       	out	0x3d, r28	; 61
     7a4:	cf 91       	pop	r28
     7a6:	df 91       	pop	r29
     7a8:	08 95       	ret

000007aa <main>:

int main( void )
{
     7aa:	cd b7       	in	r28, 0x3d	; 61
     7ac:	de b7       	in	r29, 0x3e	; 62
     7ae:	ac 97       	sbiw	r28, 0x2c	; 44
     7b0:	de bf       	out	0x3e, r29	; 62
     7b2:	cd bf       	out	0x3d, r28	; 61

	lcd_init();
     7b4:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <lcd_init>
	led_init();
     7b8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <led_init>
	 * we want:
	 * 0b1000 0111
	 * which is:
	 * 0x87
	 */
	ADCSRA = 0x87;
     7bc:	ea e7       	ldi	r30, 0x7A	; 122
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	87 e8       	ldi	r24, 0x87	; 135
     7c2:	80 83       	st	Z, r24

	/* ADMUX - ADC Multiplexer Selection Register
	 *
	 * Select ADC0
     */
	ADMUX = 0x40;
     7c4:	ec e7       	ldi	r30, 0x7C	; 124
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	80 e4       	ldi	r24, 0x40	; 64
     7ca:	80 83       	st	Z, r24

	unsigned int i=0, j=0;
     7cc:	1c 86       	std	Y+12, r1	; 0x0c
     7ce:	1b 86       	std	Y+11, r1	; 0x0b
     7d0:	1a 86       	std	Y+10, r1	; 0x0a
     7d2:	19 86       	std	Y+9, r1	; 0x09
	char* s1 = "This a message to the reader - ";
     7d4:	80 e2       	ldi	r24, 0x20	; 32
     7d6:	92 e0       	ldi	r25, 0x02	; 2
     7d8:	98 87       	std	Y+8, r25	; 0x08
     7da:	8f 83       	std	Y+7, r24	; 0x07
	char* s2 = "- hello - hello - hello ";
     7dc:	80 e4       	ldi	r24, 0x40	; 64
     7de:	92 e0       	ldi	r25, 0x02	; 2
     7e0:	9e 83       	std	Y+6, r25	; 0x06
     7e2:	8d 83       	std	Y+5, r24	; 0x05
	char* ptr1 = s1;
     7e4:	8f 81       	ldd	r24, Y+7	; 0x07
     7e6:	98 85       	ldd	r25, Y+8	; 0x08
     7e8:	9c 83       	std	Y+4, r25	; 0x04
     7ea:	8b 83       	std	Y+3, r24	; 0x03
	char* ptr2 = s2;
     7ec:	8d 81       	ldd	r24, Y+5	; 0x05
     7ee:	9e 81       	ldd	r25, Y+6	; 0x06
     7f0:	9a 83       	std	Y+2, r25	; 0x02
     7f2:	89 83       	std	Y+1, r24	; 0x01
	char buff1[16];
	char buff2[16];
	
//Infinite loops runs the scrolling
	for(;;){
		ptr1 = &s1[i];
     7f4:	2f 81       	ldd	r18, Y+7	; 0x07
     7f6:	38 85       	ldd	r19, Y+8	; 0x08
     7f8:	8b 85       	ldd	r24, Y+11	; 0x0b
     7fa:	9c 85       	ldd	r25, Y+12	; 0x0c
     7fc:	82 0f       	add	r24, r18
     7fe:	93 1f       	adc	r25, r19
     800:	9c 83       	std	Y+4, r25	; 0x04
     802:	8b 83       	std	Y+3, r24	; 0x03
		ptr2 = &s2[j];
     804:	2d 81       	ldd	r18, Y+5	; 0x05
     806:	3e 81       	ldd	r19, Y+6	; 0x06
     808:	89 85       	ldd	r24, Y+9	; 0x09
     80a:	9a 85       	ldd	r25, Y+10	; 0x0a
     80c:	82 0f       	add	r24, r18
     80e:	93 1f       	adc	r25, r19
     810:	9a 83       	std	Y+2, r25	; 0x02
     812:	89 83       	std	Y+1, r24	; 0x01
		
		fill_buffer(buff1, ptr1, s1);
     814:	ce 01       	movw	r24, r28
     816:	0d 96       	adiw	r24, 0x0d	; 13
     818:	2b 81       	ldd	r18, Y+3	; 0x03
     81a:	3c 81       	ldd	r19, Y+4	; 0x04
     81c:	4f 81       	ldd	r20, Y+7	; 0x07
     81e:	58 85       	ldd	r21, Y+8	; 0x08
     820:	b9 01       	movw	r22, r18
     822:	0e 94 c2 00 	call	0x184	; 0x184 <fill_buffer>
		fill_buffer(buff2, ptr2, s2);
     826:	ce 01       	movw	r24, r28
     828:	4d 96       	adiw	r24, 0x1d	; 29
     82a:	29 81       	ldd	r18, Y+1	; 0x01
     82c:	3a 81       	ldd	r19, Y+2	; 0x02
     82e:	4d 81       	ldd	r20, Y+5	; 0x05
     830:	5e 81       	ldd	r21, Y+6	; 0x06
     832:	b9 01       	movw	r22, r18
     834:	0e 94 c2 00 	call	0x184	; 0x184 <fill_buffer>
		lcd_xy(0,0);
     838:	80 e8       	ldi	r24, 0x80	; 128
     83a:	0e 94 67 06 	call	0xcce	; 0xcce <lcd_command>
		lcd_puts(buff1);
     83e:	ce 01       	movw	r24, r28
     840:	0d 96       	adiw	r24, 0x0d	; 13
     842:	0e 94 90 07 	call	0xf20	; 0xf20 <lcd_puts>
		lcd_xy(0,1);
     846:	80 ec       	ldi	r24, 0xC0	; 192
     848:	0e 94 67 06 	call	0xcce	; 0xcce <lcd_command>
		lcd_puts(buff2);
     84c:	ce 01       	movw	r24, r28
     84e:	4d 96       	adiw	r24, 0x1d	; 29
     850:	0e 94 90 07 	call	0xf20	; 0xf20 <lcd_puts>
		if(i<(len(s1)-1) && !pause){
     854:	8f 81       	ldd	r24, Y+7	; 0x07
     856:	98 85       	ldd	r25, Y+8	; 0x08
     858:	0e 94 9f 00 	call	0x13e	; 0x13e <len>
     85c:	01 97       	sbiw	r24, 0x01	; 1
     85e:	9c 01       	movw	r18, r24
     860:	8b 85       	ldd	r24, Y+11	; 0x0b
     862:	9c 85       	ldd	r25, Y+12	; 0x0c
     864:	82 17       	cp	r24, r18
     866:	93 07       	cpc	r25, r19
     868:	60 f4       	brcc	.+24     	; 0x882 <main+0xd8>
     86a:	80 91 64 02 	lds	r24, 0x0264
     86e:	90 91 65 02 	lds	r25, 0x0265
     872:	00 97       	sbiw	r24, 0x00	; 0
     874:	31 f4       	brne	.+12     	; 0x882 <main+0xd8>
			i++;
     876:	8b 85       	ldd	r24, Y+11	; 0x0b
     878:	9c 85       	ldd	r25, Y+12	; 0x0c
     87a:	01 96       	adiw	r24, 0x01	; 1
     87c:	9c 87       	std	Y+12, r25	; 0x0c
     87e:	8b 87       	std	Y+11, r24	; 0x0b
     880:	08 c0       	rjmp	.+16     	; 0x892 <main+0xe8>
		}else if(pause){
     882:	80 91 64 02 	lds	r24, 0x0264
     886:	90 91 65 02 	lds	r25, 0x0265
     88a:	00 97       	sbiw	r24, 0x00	; 0
     88c:	11 f4       	brne	.+4      	; 0x892 <main+0xe8>
			
		}else{
			i = 0;
     88e:	1c 86       	std	Y+12, r1	; 0x0c
     890:	1b 86       	std	Y+11, r1	; 0x0b
		}
		if(j<(len(s2)-1) && !pause){
     892:	8d 81       	ldd	r24, Y+5	; 0x05
     894:	9e 81       	ldd	r25, Y+6	; 0x06
     896:	0e 94 9f 00 	call	0x13e	; 0x13e <len>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	9c 01       	movw	r18, r24
     89e:	89 85       	ldd	r24, Y+9	; 0x09
     8a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     8a2:	82 17       	cp	r24, r18
     8a4:	93 07       	cpc	r25, r19
     8a6:	60 f4       	brcc	.+24     	; 0x8c0 <main+0x116>
     8a8:	80 91 64 02 	lds	r24, 0x0264
     8ac:	90 91 65 02 	lds	r25, 0x0265
     8b0:	00 97       	sbiw	r24, 0x00	; 0
     8b2:	31 f4       	brne	.+12     	; 0x8c0 <main+0x116>
			j++;
     8b4:	89 85       	ldd	r24, Y+9	; 0x09
     8b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     8b8:	01 96       	adiw	r24, 0x01	; 1
     8ba:	9a 87       	std	Y+10, r25	; 0x0a
     8bc:	89 87       	std	Y+9, r24	; 0x09
     8be:	08 c0       	rjmp	.+16     	; 0x8d0 <main+0x126>
		}else if(pause){
     8c0:	80 91 64 02 	lds	r24, 0x0264
     8c4:	90 91 65 02 	lds	r25, 0x0265
     8c8:	00 97       	sbiw	r24, 0x00	; 0
     8ca:	11 f4       	brne	.+4      	; 0x8d0 <main+0x126>
			
		}else{
			j = 0;
     8cc:	1a 86       	std	Y+10, r1	; 0x0a
     8ce:	19 86       	std	Y+9, r1	; 0x09
		}
		delay(delay_value);
     8d0:	80 91 00 02 	lds	r24, 0x0200
     8d4:	90 91 01 02 	lds	r25, 0x0201
     8d8:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <delay>
		clear_screen();
     8dc:	0e 94 95 00 	call	0x12a	; 0x12a <clear_screen>
     8e0:	89 cf       	rjmp	.-238    	; 0x7f4 <main+0x4a>

000008e2 <lcd_nibble>:

uint8_t lcd_pos = LCD_LINE1;


static void lcd_nibble( uint8_t d )
{
     8e2:	df 93       	push	r29
     8e4:	cf 93       	push	r28
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	69 97       	sbiw	r28, 0x19	; 25
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	f8 94       	cli
     8f0:	de bf       	out	0x3e, r29	; 62
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	cd bf       	out	0x3d, r28	; 61
     8f6:	89 8f       	std	Y+25, r24	; 0x19
  LCD_D7 = 0; if( d & 1<<7 ) LCD_D7 = 1;
     8f8:	e2 e0       	ldi	r30, 0x02	; 2
     8fa:	f1 e0       	ldi	r31, 0x01	; 1
     8fc:	80 81       	ld	r24, Z
     8fe:	8f 7e       	andi	r24, 0xEF	; 239
     900:	80 83       	st	Z, r24
     902:	89 8d       	ldd	r24, Y+25	; 0x19
     904:	88 23       	and	r24, r24
     906:	2c f4       	brge	.+10     	; 0x912 <lcd_nibble+0x30>
     908:	e2 e0       	ldi	r30, 0x02	; 2
     90a:	f1 e0       	ldi	r31, 0x01	; 1
     90c:	80 81       	ld	r24, Z
     90e:	80 61       	ori	r24, 0x10	; 16
     910:	80 83       	st	Z, r24
  LCD_D6 = 0; if( d & 1<<6 ) LCD_D6 = 1;
     912:	e2 e0       	ldi	r30, 0x02	; 2
     914:	f1 e0       	ldi	r31, 0x01	; 1
     916:	80 81       	ld	r24, Z
     918:	87 7f       	andi	r24, 0xF7	; 247
     91a:	80 83       	st	Z, r24
     91c:	89 8d       	ldd	r24, Y+25	; 0x19
     91e:	88 2f       	mov	r24, r24
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	80 74       	andi	r24, 0x40	; 64
     924:	90 70       	andi	r25, 0x00	; 0
     926:	00 97       	sbiw	r24, 0x00	; 0
     928:	29 f0       	breq	.+10     	; 0x934 <lcd_nibble+0x52>
     92a:	e2 e0       	ldi	r30, 0x02	; 2
     92c:	f1 e0       	ldi	r31, 0x01	; 1
     92e:	80 81       	ld	r24, Z
     930:	88 60       	ori	r24, 0x08	; 8
     932:	80 83       	st	Z, r24
  LCD_D5 = 0; if( d & 1<<5 ) LCD_D5 = 1;
     934:	ee e2       	ldi	r30, 0x2E	; 46
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	80 81       	ld	r24, Z
     93a:	87 7f       	andi	r24, 0xF7	; 247
     93c:	80 83       	st	Z, r24
     93e:	89 8d       	ldd	r24, Y+25	; 0x19
     940:	88 2f       	mov	r24, r24
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	80 72       	andi	r24, 0x20	; 32
     946:	90 70       	andi	r25, 0x00	; 0
     948:	00 97       	sbiw	r24, 0x00	; 0
     94a:	29 f0       	breq	.+10     	; 0x956 <lcd_nibble+0x74>
     94c:	ee e2       	ldi	r30, 0x2E	; 46
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	80 81       	ld	r24, Z
     952:	88 60       	ori	r24, 0x08	; 8
     954:	80 83       	st	Z, r24
  LCD_D4 = 0; if( d & 1<<4 ) LCD_D4 = 1;
     956:	e4 e3       	ldi	r30, 0x34	; 52
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	80 81       	ld	r24, Z
     95c:	8f 7d       	andi	r24, 0xDF	; 223
     95e:	80 83       	st	Z, r24
     960:	89 8d       	ldd	r24, Y+25	; 0x19
     962:	88 2f       	mov	r24, r24
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	80 71       	andi	r24, 0x10	; 16
     968:	90 70       	andi	r25, 0x00	; 0
     96a:	00 97       	sbiw	r24, 0x00	; 0
     96c:	29 f0       	breq	.+10     	; 0x978 <lcd_nibble+0x96>
     96e:	e4 e3       	ldi	r30, 0x34	; 52
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	80 81       	ld	r24, Z
     974:	80 62       	ori	r24, 0x20	; 32
     976:	80 83       	st	Z, r24
  LCD_E0 = 1;
     978:	e2 e0       	ldi	r30, 0x02	; 2
     97a:	f1 e0       	ldi	r31, 0x01	; 1
     97c:	80 81       	ld	r24, Z
     97e:	80 64       	ori	r24, 0x40	; 64
     980:	80 83       	st	Z, r24
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	a0 e8       	ldi	r26, 0x80	; 128
     988:	bf e3       	ldi	r27, 0x3F	; 63
     98a:	8d 8b       	std	Y+21, r24	; 0x15
     98c:	9e 8b       	std	Y+22, r25	; 0x16
     98e:	af 8b       	std	Y+23, r26	; 0x17
     990:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     992:	6d 89       	ldd	r22, Y+21	; 0x15
     994:	7e 89       	ldd	r23, Y+22	; 0x16
     996:	8f 89       	ldd	r24, Y+23	; 0x17
     998:	98 8d       	ldd	r25, Y+24	; 0x18
     99a:	2b ea       	ldi	r18, 0xAB	; 171
     99c:	3a ea       	ldi	r19, 0xAA	; 170
     99e:	4a ea       	ldi	r20, 0xAA	; 170
     9a0:	50 e4       	ldi	r21, 0x40	; 64
     9a2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3>
     9a6:	dc 01       	movw	r26, r24
     9a8:	cb 01       	movw	r24, r22
     9aa:	89 8b       	std	Y+17, r24	; 0x11
     9ac:	9a 8b       	std	Y+18, r25	; 0x12
     9ae:	ab 8b       	std	Y+19, r26	; 0x13
     9b0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     9b2:	69 89       	ldd	r22, Y+17	; 0x11
     9b4:	7a 89       	ldd	r23, Y+18	; 0x12
     9b6:	8b 89       	ldd	r24, Y+19	; 0x13
     9b8:	9c 89       	ldd	r25, Y+20	; 0x14
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	40 e8       	ldi	r20, 0x80	; 128
     9c0:	5f e3       	ldi	r21, 0x3F	; 63
     9c2:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__ltsf2>
     9c6:	88 23       	and	r24, r24
     9c8:	1c f4       	brge	.+6      	; 0x9d0 <lcd_nibble+0xee>
		__ticks = 1;
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	88 8b       	std	Y+16, r24	; 0x10
     9ce:	91 c0       	rjmp	.+290    	; 0xaf2 <lcd_nibble+0x210>
	else if (__tmp > 255)
     9d0:	69 89       	ldd	r22, Y+17	; 0x11
     9d2:	7a 89       	ldd	r23, Y+18	; 0x12
     9d4:	8b 89       	ldd	r24, Y+19	; 0x13
     9d6:	9c 89       	ldd	r25, Y+20	; 0x14
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	4f e7       	ldi	r20, 0x7F	; 127
     9de:	53 e4       	ldi	r21, 0x43	; 67
     9e0:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__gtsf2>
     9e4:	18 16       	cp	r1, r24
     9e6:	0c f0       	brlt	.+2      	; 0x9ea <lcd_nibble+0x108>
     9e8:	7b c0       	rjmp	.+246    	; 0xae0 <lcd_nibble+0x1fe>
	{
		_delay_ms(__us / 1000.0);
     9ea:	6d 89       	ldd	r22, Y+21	; 0x15
     9ec:	7e 89       	ldd	r23, Y+22	; 0x16
     9ee:	8f 89       	ldd	r24, Y+23	; 0x17
     9f0:	98 8d       	ldd	r25, Y+24	; 0x18
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	4a e7       	ldi	r20, 0x7A	; 122
     9f8:	54 e4       	ldi	r21, 0x44	; 68
     9fa:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__divsf3>
     9fe:	dc 01       	movw	r26, r24
     a00:	cb 01       	movw	r24, r22
     a02:	8c 87       	std	Y+12, r24	; 0x0c
     a04:	9d 87       	std	Y+13, r25	; 0x0d
     a06:	ae 87       	std	Y+14, r26	; 0x0e
     a08:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a0a:	6c 85       	ldd	r22, Y+12	; 0x0c
     a0c:	7d 85       	ldd	r23, Y+13	; 0x0d
     a0e:	8e 85       	ldd	r24, Y+14	; 0x0e
     a10:	9f 85       	ldd	r25, Y+15	; 0x0f
     a12:	20 e0       	ldi	r18, 0x00	; 0
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	4a e7       	ldi	r20, 0x7A	; 122
     a18:	55 e4       	ldi	r21, 0x45	; 69
     a1a:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3>
     a1e:	dc 01       	movw	r26, r24
     a20:	cb 01       	movw	r24, r22
     a22:	88 87       	std	Y+8, r24	; 0x08
     a24:	99 87       	std	Y+9, r25	; 0x09
     a26:	aa 87       	std	Y+10, r26	; 0x0a
     a28:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     a2a:	68 85       	ldd	r22, Y+8	; 0x08
     a2c:	79 85       	ldd	r23, Y+9	; 0x09
     a2e:	8a 85       	ldd	r24, Y+10	; 0x0a
     a30:	9b 85       	ldd	r25, Y+11	; 0x0b
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	40 e8       	ldi	r20, 0x80	; 128
     a38:	5f e3       	ldi	r21, 0x3F	; 63
     a3a:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__ltsf2>
     a3e:	88 23       	and	r24, r24
     a40:	2c f4       	brge	.+10     	; 0xa4c <lcd_nibble+0x16a>
		__ticks = 1;
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	9f 83       	std	Y+7, r25	; 0x07
     a48:	8e 83       	std	Y+6, r24	; 0x06
     a4a:	3f c0       	rjmp	.+126    	; 0xaca <lcd_nibble+0x1e8>
	else if (__tmp > 65535)
     a4c:	68 85       	ldd	r22, Y+8	; 0x08
     a4e:	79 85       	ldd	r23, Y+9	; 0x09
     a50:	8a 85       	ldd	r24, Y+10	; 0x0a
     a52:	9b 85       	ldd	r25, Y+11	; 0x0b
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	3f ef       	ldi	r19, 0xFF	; 255
     a58:	4f e7       	ldi	r20, 0x7F	; 127
     a5a:	57 e4       	ldi	r21, 0x47	; 71
     a5c:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__gtsf2>
     a60:	18 16       	cp	r1, r24
     a62:	4c f5       	brge	.+82     	; 0xab6 <lcd_nibble+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a64:	6c 85       	ldd	r22, Y+12	; 0x0c
     a66:	7d 85       	ldd	r23, Y+13	; 0x0d
     a68:	8e 85       	ldd	r24, Y+14	; 0x0e
     a6a:	9f 85       	ldd	r25, Y+15	; 0x0f
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	40 e2       	ldi	r20, 0x20	; 32
     a72:	51 e4       	ldi	r21, 0x41	; 65
     a74:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3>
     a78:	dc 01       	movw	r26, r24
     a7a:	cb 01       	movw	r24, r22
     a7c:	bc 01       	movw	r22, r24
     a7e:	cd 01       	movw	r24, r26
     a80:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fixunssfsi>
     a84:	dc 01       	movw	r26, r24
     a86:	cb 01       	movw	r24, r22
     a88:	9f 83       	std	Y+7, r25	; 0x07
     a8a:	8e 83       	std	Y+6, r24	; 0x06
     a8c:	0f c0       	rjmp	.+30     	; 0xaac <lcd_nibble+0x1ca>
     a8e:	80 e9       	ldi	r24, 0x90	; 144
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	9d 83       	std	Y+5, r25	; 0x05
     a94:	8c 83       	std	Y+4, r24	; 0x04
     a96:	8c 81       	ldd	r24, Y+4	; 0x04
     a98:	9d 81       	ldd	r25, Y+5	; 0x05
     a9a:	01 97       	sbiw	r24, 0x01	; 1
     a9c:	f1 f7       	brne	.-4      	; 0xa9a <lcd_nibble+0x1b8>
     a9e:	9d 83       	std	Y+5, r25	; 0x05
     aa0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aa2:	8e 81       	ldd	r24, Y+6	; 0x06
     aa4:	9f 81       	ldd	r25, Y+7	; 0x07
     aa6:	01 97       	sbiw	r24, 0x01	; 1
     aa8:	9f 83       	std	Y+7, r25	; 0x07
     aaa:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aac:	8e 81       	ldd	r24, Y+6	; 0x06
     aae:	9f 81       	ldd	r25, Y+7	; 0x07
     ab0:	00 97       	sbiw	r24, 0x00	; 0
     ab2:	69 f7       	brne	.-38     	; 0xa8e <lcd_nibble+0x1ac>
     ab4:	24 c0       	rjmp	.+72     	; 0xafe <lcd_nibble+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ab6:	68 85       	ldd	r22, Y+8	; 0x08
     ab8:	79 85       	ldd	r23, Y+9	; 0x09
     aba:	8a 85       	ldd	r24, Y+10	; 0x0a
     abc:	9b 85       	ldd	r25, Y+11	; 0x0b
     abe:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fixunssfsi>
     ac2:	dc 01       	movw	r26, r24
     ac4:	cb 01       	movw	r24, r22
     ac6:	9f 83       	std	Y+7, r25	; 0x07
     ac8:	8e 83       	std	Y+6, r24	; 0x06
     aca:	8e 81       	ldd	r24, Y+6	; 0x06
     acc:	9f 81       	ldd	r25, Y+7	; 0x07
     ace:	9b 83       	std	Y+3, r25	; 0x03
     ad0:	8a 83       	std	Y+2, r24	; 0x02
     ad2:	8a 81       	ldd	r24, Y+2	; 0x02
     ad4:	9b 81       	ldd	r25, Y+3	; 0x03
     ad6:	01 97       	sbiw	r24, 0x01	; 1
     ad8:	f1 f7       	brne	.-4      	; 0xad6 <lcd_nibble+0x1f4>
     ada:	9b 83       	std	Y+3, r25	; 0x03
     adc:	8a 83       	std	Y+2, r24	; 0x02
     ade:	0f c0       	rjmp	.+30     	; 0xafe <lcd_nibble+0x21c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     ae0:	69 89       	ldd	r22, Y+17	; 0x11
     ae2:	7a 89       	ldd	r23, Y+18	; 0x12
     ae4:	8b 89       	ldd	r24, Y+19	; 0x13
     ae6:	9c 89       	ldd	r25, Y+20	; 0x14
     ae8:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fixunssfsi>
     aec:	dc 01       	movw	r26, r24
     aee:	cb 01       	movw	r24, r22
     af0:	88 8b       	std	Y+16, r24	; 0x10
     af2:	88 89       	ldd	r24, Y+16	; 0x10
     af4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	8a 95       	dec	r24
     afa:	f1 f7       	brne	.-4      	; 0xaf8 <lcd_nibble+0x216>
     afc:	89 83       	std	Y+1, r24	; 0x01
  _delay_us( LCD_TIME_ENA );
  LCD_E0 = 0;
     afe:	e2 e0       	ldi	r30, 0x02	; 2
     b00:	f1 e0       	ldi	r31, 0x01	; 1
     b02:	80 81       	ld	r24, Z
     b04:	8f 7b       	andi	r24, 0xBF	; 191
     b06:	80 83       	st	Z, r24
}
     b08:	69 96       	adiw	r28, 0x19	; 25
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	f8 94       	cli
     b0e:	de bf       	out	0x3e, r29	; 62
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	cd bf       	out	0x3d, r28	; 61
     b14:	cf 91       	pop	r28
     b16:	df 91       	pop	r29
     b18:	08 95       	ret

00000b1a <lcd_byte>:


static void lcd_byte( uint8_t d )
{
     b1a:	df 93       	push	r29
     b1c:	cf 93       	push	r28
     b1e:	cd b7       	in	r28, 0x3d	; 61
     b20:	de b7       	in	r29, 0x3e	; 62
     b22:	69 97       	sbiw	r28, 0x19	; 25
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	f8 94       	cli
     b28:	de bf       	out	0x3e, r29	; 62
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	cd bf       	out	0x3d, r28	; 61
     b2e:	89 8f       	std	Y+25, r24	; 0x19
  lcd_nibble( d );
     b30:	89 8d       	ldd	r24, Y+25	; 0x19
     b32:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_nibble>
  lcd_nibble( d<<4 );
     b36:	89 8d       	ldd	r24, Y+25	; 0x19
     b38:	82 95       	swap	r24
     b3a:	80 7f       	andi	r24, 0xF0	; 240
     b3c:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_nibble>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	a8 e4       	ldi	r26, 0x48	; 72
     b46:	b2 e4       	ldi	r27, 0x42	; 66
     b48:	8d 8b       	std	Y+21, r24	; 0x15
     b4a:	9e 8b       	std	Y+22, r25	; 0x16
     b4c:	af 8b       	std	Y+23, r26	; 0x17
     b4e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     b50:	6d 89       	ldd	r22, Y+21	; 0x15
     b52:	7e 89       	ldd	r23, Y+22	; 0x16
     b54:	8f 89       	ldd	r24, Y+23	; 0x17
     b56:	98 8d       	ldd	r25, Y+24	; 0x18
     b58:	2b ea       	ldi	r18, 0xAB	; 171
     b5a:	3a ea       	ldi	r19, 0xAA	; 170
     b5c:	4a ea       	ldi	r20, 0xAA	; 170
     b5e:	50 e4       	ldi	r21, 0x40	; 64
     b60:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3>
     b64:	dc 01       	movw	r26, r24
     b66:	cb 01       	movw	r24, r22
     b68:	89 8b       	std	Y+17, r24	; 0x11
     b6a:	9a 8b       	std	Y+18, r25	; 0x12
     b6c:	ab 8b       	std	Y+19, r26	; 0x13
     b6e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     b70:	69 89       	ldd	r22, Y+17	; 0x11
     b72:	7a 89       	ldd	r23, Y+18	; 0x12
     b74:	8b 89       	ldd	r24, Y+19	; 0x13
     b76:	9c 89       	ldd	r25, Y+20	; 0x14
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	40 e8       	ldi	r20, 0x80	; 128
     b7e:	5f e3       	ldi	r21, 0x3F	; 63
     b80:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__ltsf2>
     b84:	88 23       	and	r24, r24
     b86:	1c f4       	brge	.+6      	; 0xb8e <lcd_byte+0x74>
		__ticks = 1;
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	88 8b       	std	Y+16, r24	; 0x10
     b8c:	91 c0       	rjmp	.+290    	; 0xcb0 <lcd_byte+0x196>
	else if (__tmp > 255)
     b8e:	69 89       	ldd	r22, Y+17	; 0x11
     b90:	7a 89       	ldd	r23, Y+18	; 0x12
     b92:	8b 89       	ldd	r24, Y+19	; 0x13
     b94:	9c 89       	ldd	r25, Y+20	; 0x14
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	4f e7       	ldi	r20, 0x7F	; 127
     b9c:	53 e4       	ldi	r21, 0x43	; 67
     b9e:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__gtsf2>
     ba2:	18 16       	cp	r1, r24
     ba4:	0c f0       	brlt	.+2      	; 0xba8 <lcd_byte+0x8e>
     ba6:	7b c0       	rjmp	.+246    	; 0xc9e <lcd_byte+0x184>
	{
		_delay_ms(__us / 1000.0);
     ba8:	6d 89       	ldd	r22, Y+21	; 0x15
     baa:	7e 89       	ldd	r23, Y+22	; 0x16
     bac:	8f 89       	ldd	r24, Y+23	; 0x17
     bae:	98 8d       	ldd	r25, Y+24	; 0x18
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	4a e7       	ldi	r20, 0x7A	; 122
     bb6:	54 e4       	ldi	r21, 0x44	; 68
     bb8:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__divsf3>
     bbc:	dc 01       	movw	r26, r24
     bbe:	cb 01       	movw	r24, r22
     bc0:	8c 87       	std	Y+12, r24	; 0x0c
     bc2:	9d 87       	std	Y+13, r25	; 0x0d
     bc4:	ae 87       	std	Y+14, r26	; 0x0e
     bc6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bc8:	6c 85       	ldd	r22, Y+12	; 0x0c
     bca:	7d 85       	ldd	r23, Y+13	; 0x0d
     bcc:	8e 85       	ldd	r24, Y+14	; 0x0e
     bce:	9f 85       	ldd	r25, Y+15	; 0x0f
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	4a e7       	ldi	r20, 0x7A	; 122
     bd6:	55 e4       	ldi	r21, 0x45	; 69
     bd8:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3>
     bdc:	dc 01       	movw	r26, r24
     bde:	cb 01       	movw	r24, r22
     be0:	88 87       	std	Y+8, r24	; 0x08
     be2:	99 87       	std	Y+9, r25	; 0x09
     be4:	aa 87       	std	Y+10, r26	; 0x0a
     be6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     be8:	68 85       	ldd	r22, Y+8	; 0x08
     bea:	79 85       	ldd	r23, Y+9	; 0x09
     bec:	8a 85       	ldd	r24, Y+10	; 0x0a
     bee:	9b 85       	ldd	r25, Y+11	; 0x0b
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	40 e8       	ldi	r20, 0x80	; 128
     bf6:	5f e3       	ldi	r21, 0x3F	; 63
     bf8:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__ltsf2>
     bfc:	88 23       	and	r24, r24
     bfe:	2c f4       	brge	.+10     	; 0xc0a <lcd_byte+0xf0>
		__ticks = 1;
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	9f 83       	std	Y+7, r25	; 0x07
     c06:	8e 83       	std	Y+6, r24	; 0x06
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <lcd_byte+0x16e>
	else if (__tmp > 65535)
     c0a:	68 85       	ldd	r22, Y+8	; 0x08
     c0c:	79 85       	ldd	r23, Y+9	; 0x09
     c0e:	8a 85       	ldd	r24, Y+10	; 0x0a
     c10:	9b 85       	ldd	r25, Y+11	; 0x0b
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	3f ef       	ldi	r19, 0xFF	; 255
     c16:	4f e7       	ldi	r20, 0x7F	; 127
     c18:	57 e4       	ldi	r21, 0x47	; 71
     c1a:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__gtsf2>
     c1e:	18 16       	cp	r1, r24
     c20:	4c f5       	brge	.+82     	; 0xc74 <lcd_byte+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c22:	6c 85       	ldd	r22, Y+12	; 0x0c
     c24:	7d 85       	ldd	r23, Y+13	; 0x0d
     c26:	8e 85       	ldd	r24, Y+14	; 0x0e
     c28:	9f 85       	ldd	r25, Y+15	; 0x0f
     c2a:	20 e0       	ldi	r18, 0x00	; 0
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	40 e2       	ldi	r20, 0x20	; 32
     c30:	51 e4       	ldi	r21, 0x41	; 65
     c32:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3>
     c36:	dc 01       	movw	r26, r24
     c38:	cb 01       	movw	r24, r22
     c3a:	bc 01       	movw	r22, r24
     c3c:	cd 01       	movw	r24, r26
     c3e:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fixunssfsi>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	9f 83       	std	Y+7, r25	; 0x07
     c48:	8e 83       	std	Y+6, r24	; 0x06
     c4a:	0f c0       	rjmp	.+30     	; 0xc6a <lcd_byte+0x150>
     c4c:	80 e9       	ldi	r24, 0x90	; 144
     c4e:	91 e0       	ldi	r25, 0x01	; 1
     c50:	9d 83       	std	Y+5, r25	; 0x05
     c52:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c54:	8c 81       	ldd	r24, Y+4	; 0x04
     c56:	9d 81       	ldd	r25, Y+5	; 0x05
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <lcd_byte+0x13e>
     c5c:	9d 83       	std	Y+5, r25	; 0x05
     c5e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c60:	8e 81       	ldd	r24, Y+6	; 0x06
     c62:	9f 81       	ldd	r25, Y+7	; 0x07
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	9f 83       	std	Y+7, r25	; 0x07
     c68:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c6a:	8e 81       	ldd	r24, Y+6	; 0x06
     c6c:	9f 81       	ldd	r25, Y+7	; 0x07
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	69 f7       	brne	.-38     	; 0xc4c <lcd_byte+0x132>
     c72:	24 c0       	rjmp	.+72     	; 0xcbc <lcd_byte+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c74:	68 85       	ldd	r22, Y+8	; 0x08
     c76:	79 85       	ldd	r23, Y+9	; 0x09
     c78:	8a 85       	ldd	r24, Y+10	; 0x0a
     c7a:	9b 85       	ldd	r25, Y+11	; 0x0b
     c7c:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fixunssfsi>
     c80:	dc 01       	movw	r26, r24
     c82:	cb 01       	movw	r24, r22
     c84:	9f 83       	std	Y+7, r25	; 0x07
     c86:	8e 83       	std	Y+6, r24	; 0x06
     c88:	8e 81       	ldd	r24, Y+6	; 0x06
     c8a:	9f 81       	ldd	r25, Y+7	; 0x07
     c8c:	9b 83       	std	Y+3, r25	; 0x03
     c8e:	8a 83       	std	Y+2, r24	; 0x02
     c90:	8a 81       	ldd	r24, Y+2	; 0x02
     c92:	9b 81       	ldd	r25, Y+3	; 0x03
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	f1 f7       	brne	.-4      	; 0xc94 <lcd_byte+0x17a>
     c98:	9b 83       	std	Y+3, r25	; 0x03
     c9a:	8a 83       	std	Y+2, r24	; 0x02
     c9c:	0f c0       	rjmp	.+30     	; 0xcbc <lcd_byte+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     c9e:	69 89       	ldd	r22, Y+17	; 0x11
     ca0:	7a 89       	ldd	r23, Y+18	; 0x12
     ca2:	8b 89       	ldd	r24, Y+19	; 0x13
     ca4:	9c 89       	ldd	r25, Y+20	; 0x14
     ca6:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fixunssfsi>
     caa:	dc 01       	movw	r26, r24
     cac:	cb 01       	movw	r24, r22
     cae:	88 8b       	std	Y+16, r24	; 0x10
     cb0:	88 89       	ldd	r24, Y+16	; 0x10
     cb2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	8a 95       	dec	r24
     cb8:	f1 f7       	brne	.-4      	; 0xcb6 <lcd_byte+0x19c>
     cba:	89 83       	std	Y+1, r24	; 0x01
  _delay_us( LCD_TIME_DAT );
}
     cbc:	69 96       	adiw	r28, 0x19	; 25
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	de bf       	out	0x3e, r29	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	cd bf       	out	0x3d, r28	; 61
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	08 95       	ret

00000cce <lcd_command>:


void lcd_command( uint8_t d )
{
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	6b 97       	sbiw	r28, 0x1b	; 27
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	f8 94       	cli
     cdc:	de bf       	out	0x3e, r29	; 62
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	cd bf       	out	0x3d, r28	; 61
     ce2:	89 8f       	std	Y+25, r24	; 0x19
  LCD_RS = 0;
     ce4:	e2 e0       	ldi	r30, 0x02	; 2
     ce6:	f1 e0       	ldi	r31, 0x01	; 1
     ce8:	80 81       	ld	r24, Z
     cea:	8f 7d       	andi	r24, 0xDF	; 223
     cec:	80 83       	st	Z, r24
  lcd_byte( d );
     cee:	89 8d       	ldd	r24, Y+25	; 0x19
     cf0:	0e 94 8d 05 	call	0xb1a	; 0xb1a <lcd_byte>
  switch( d ){
     cf4:	89 8d       	ldd	r24, Y+25	; 0x19
     cf6:	28 2f       	mov	r18, r24
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	3b 8f       	std	Y+27, r19	; 0x1b
     cfc:	2a 8f       	std	Y+26, r18	; 0x1a
     cfe:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d00:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d02:	99 23       	and	r25, r25
     d04:	0c f4       	brge	.+2      	; 0xd08 <lcd_command+0x3a>
     d06:	d1 c0       	rjmp	.+418    	; 0xeaa <lcd_command+0x1dc>
     d08:	2a 8d       	ldd	r18, Y+26	; 0x1a
     d0a:	3b 8d       	ldd	r19, Y+27	; 0x1b
     d0c:	24 30       	cpi	r18, 0x04	; 4
     d0e:	31 05       	cpc	r19, r1
     d10:	4c f0       	brlt	.+18     	; 0xd24 <lcd_command+0x56>
     d12:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d14:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d16:	80 58       	subi	r24, 0x80	; 128
     d18:	90 40       	sbci	r25, 0x00	; 0
     d1a:	80 38       	cpi	r24, 0x80	; 128
     d1c:	91 05       	cpc	r25, r1
     d1e:	08 f0       	brcs	.+2      	; 0xd22 <lcd_command+0x54>
     d20:	c4 c0       	rjmp	.+392    	; 0xeaa <lcd_command+0x1dc>
     d22:	c0 c0       	rjmp	.+384    	; 0xea4 <lcd_command+0x1d6>
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	aa ef       	ldi	r26, 0xFA	; 250
     d2a:	b4 e4       	ldi	r27, 0x44	; 68
     d2c:	8d 8b       	std	Y+21, r24	; 0x15
     d2e:	9e 8b       	std	Y+22, r25	; 0x16
     d30:	af 8b       	std	Y+23, r26	; 0x17
     d32:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     d34:	6d 89       	ldd	r22, Y+21	; 0x15
     d36:	7e 89       	ldd	r23, Y+22	; 0x16
     d38:	8f 89       	ldd	r24, Y+23	; 0x17
     d3a:	98 8d       	ldd	r25, Y+24	; 0x18
     d3c:	2b ea       	ldi	r18, 0xAB	; 171
     d3e:	3a ea       	ldi	r19, 0xAA	; 170
     d40:	4a ea       	ldi	r20, 0xAA	; 170
     d42:	50 e4       	ldi	r21, 0x40	; 64
     d44:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	89 8b       	std	Y+17, r24	; 0x11
     d4e:	9a 8b       	std	Y+18, r25	; 0x12
     d50:	ab 8b       	std	Y+19, r26	; 0x13
     d52:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     d54:	69 89       	ldd	r22, Y+17	; 0x11
     d56:	7a 89       	ldd	r23, Y+18	; 0x12
     d58:	8b 89       	ldd	r24, Y+19	; 0x13
     d5a:	9c 89       	ldd	r25, Y+20	; 0x14
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	40 e8       	ldi	r20, 0x80	; 128
     d62:	5f e3       	ldi	r21, 0x3F	; 63
     d64:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__ltsf2>
     d68:	88 23       	and	r24, r24
     d6a:	1c f4       	brge	.+6      	; 0xd72 <lcd_command+0xa4>
		__ticks = 1;
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	88 8b       	std	Y+16, r24	; 0x10
     d70:	91 c0       	rjmp	.+290    	; 0xe94 <lcd_command+0x1c6>
	else if (__tmp > 255)
     d72:	69 89       	ldd	r22, Y+17	; 0x11
     d74:	7a 89       	ldd	r23, Y+18	; 0x12
     d76:	8b 89       	ldd	r24, Y+19	; 0x13
     d78:	9c 89       	ldd	r25, Y+20	; 0x14
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	4f e7       	ldi	r20, 0x7F	; 127
     d80:	53 e4       	ldi	r21, 0x43	; 67
     d82:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__gtsf2>
     d86:	18 16       	cp	r1, r24
     d88:	0c f0       	brlt	.+2      	; 0xd8c <lcd_command+0xbe>
     d8a:	7b c0       	rjmp	.+246    	; 0xe82 <lcd_command+0x1b4>
	{
		_delay_ms(__us / 1000.0);
     d8c:	6d 89       	ldd	r22, Y+21	; 0x15
     d8e:	7e 89       	ldd	r23, Y+22	; 0x16
     d90:	8f 89       	ldd	r24, Y+23	; 0x17
     d92:	98 8d       	ldd	r25, Y+24	; 0x18
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	4a e7       	ldi	r20, 0x7A	; 122
     d9a:	54 e4       	ldi	r21, 0x44	; 68
     d9c:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__divsf3>
     da0:	dc 01       	movw	r26, r24
     da2:	cb 01       	movw	r24, r22
     da4:	8c 87       	std	Y+12, r24	; 0x0c
     da6:	9d 87       	std	Y+13, r25	; 0x0d
     da8:	ae 87       	std	Y+14, r26	; 0x0e
     daa:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dac:	6c 85       	ldd	r22, Y+12	; 0x0c
     dae:	7d 85       	ldd	r23, Y+13	; 0x0d
     db0:	8e 85       	ldd	r24, Y+14	; 0x0e
     db2:	9f 85       	ldd	r25, Y+15	; 0x0f
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	4a e7       	ldi	r20, 0x7A	; 122
     dba:	55 e4       	ldi	r21, 0x45	; 69
     dbc:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3>
     dc0:	dc 01       	movw	r26, r24
     dc2:	cb 01       	movw	r24, r22
     dc4:	88 87       	std	Y+8, r24	; 0x08
     dc6:	99 87       	std	Y+9, r25	; 0x09
     dc8:	aa 87       	std	Y+10, r26	; 0x0a
     dca:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     dcc:	68 85       	ldd	r22, Y+8	; 0x08
     dce:	79 85       	ldd	r23, Y+9	; 0x09
     dd0:	8a 85       	ldd	r24, Y+10	; 0x0a
     dd2:	9b 85       	ldd	r25, Y+11	; 0x0b
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 e8       	ldi	r20, 0x80	; 128
     dda:	5f e3       	ldi	r21, 0x3F	; 63
     ddc:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__ltsf2>
     de0:	88 23       	and	r24, r24
     de2:	2c f4       	brge	.+10     	; 0xdee <lcd_command+0x120>
		__ticks = 1;
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	9f 83       	std	Y+7, r25	; 0x07
     dea:	8e 83       	std	Y+6, r24	; 0x06
     dec:	3f c0       	rjmp	.+126    	; 0xe6c <lcd_command+0x19e>
	else if (__tmp > 65535)
     dee:	68 85       	ldd	r22, Y+8	; 0x08
     df0:	79 85       	ldd	r23, Y+9	; 0x09
     df2:	8a 85       	ldd	r24, Y+10	; 0x0a
     df4:	9b 85       	ldd	r25, Y+11	; 0x0b
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	3f ef       	ldi	r19, 0xFF	; 255
     dfa:	4f e7       	ldi	r20, 0x7F	; 127
     dfc:	57 e4       	ldi	r21, 0x47	; 71
     dfe:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__gtsf2>
     e02:	18 16       	cp	r1, r24
     e04:	4c f5       	brge	.+82     	; 0xe58 <lcd_command+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e06:	6c 85       	ldd	r22, Y+12	; 0x0c
     e08:	7d 85       	ldd	r23, Y+13	; 0x0d
     e0a:	8e 85       	ldd	r24, Y+14	; 0x0e
     e0c:	9f 85       	ldd	r25, Y+15	; 0x0f
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	40 e2       	ldi	r20, 0x20	; 32
     e14:	51 e4       	ldi	r21, 0x41	; 65
     e16:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3>
     e1a:	dc 01       	movw	r26, r24
     e1c:	cb 01       	movw	r24, r22
     e1e:	bc 01       	movw	r22, r24
     e20:	cd 01       	movw	r24, r26
     e22:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fixunssfsi>
     e26:	dc 01       	movw	r26, r24
     e28:	cb 01       	movw	r24, r22
     e2a:	9f 83       	std	Y+7, r25	; 0x07
     e2c:	8e 83       	std	Y+6, r24	; 0x06
     e2e:	0f c0       	rjmp	.+30     	; 0xe4e <lcd_command+0x180>
     e30:	80 e9       	ldi	r24, 0x90	; 144
     e32:	91 e0       	ldi	r25, 0x01	; 1
     e34:	9d 83       	std	Y+5, r25	; 0x05
     e36:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e38:	8c 81       	ldd	r24, Y+4	; 0x04
     e3a:	9d 81       	ldd	r25, Y+5	; 0x05
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <lcd_command+0x16e>
     e40:	9d 83       	std	Y+5, r25	; 0x05
     e42:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e44:	8e 81       	ldd	r24, Y+6	; 0x06
     e46:	9f 81       	ldd	r25, Y+7	; 0x07
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	9f 83       	std	Y+7, r25	; 0x07
     e4c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e4e:	8e 81       	ldd	r24, Y+6	; 0x06
     e50:	9f 81       	ldd	r25, Y+7	; 0x07
     e52:	00 97       	sbiw	r24, 0x00	; 0
     e54:	69 f7       	brne	.-38     	; 0xe30 <lcd_command+0x162>
     e56:	24 c0       	rjmp	.+72     	; 0xea0 <lcd_command+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e58:	68 85       	ldd	r22, Y+8	; 0x08
     e5a:	79 85       	ldd	r23, Y+9	; 0x09
     e5c:	8a 85       	ldd	r24, Y+10	; 0x0a
     e5e:	9b 85       	ldd	r25, Y+11	; 0x0b
     e60:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fixunssfsi>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	9f 83       	std	Y+7, r25	; 0x07
     e6a:	8e 83       	std	Y+6, r24	; 0x06
     e6c:	8e 81       	ldd	r24, Y+6	; 0x06
     e6e:	9f 81       	ldd	r25, Y+7	; 0x07
     e70:	9b 83       	std	Y+3, r25	; 0x03
     e72:	8a 83       	std	Y+2, r24	; 0x02
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	9b 81       	ldd	r25, Y+3	; 0x03
     e78:	01 97       	sbiw	r24, 0x01	; 1
     e7a:	f1 f7       	brne	.-4      	; 0xe78 <lcd_command+0x1aa>
     e7c:	9b 83       	std	Y+3, r25	; 0x03
     e7e:	8a 83       	std	Y+2, r24	; 0x02
     e80:	0f c0       	rjmp	.+30     	; 0xea0 <lcd_command+0x1d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     e82:	69 89       	ldd	r22, Y+17	; 0x11
     e84:	7a 89       	ldd	r23, Y+18	; 0x12
     e86:	8b 89       	ldd	r24, Y+19	; 0x13
     e88:	9c 89       	ldd	r25, Y+20	; 0x14
     e8a:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fixunssfsi>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	88 8b       	std	Y+16, r24	; 0x10
     e94:	88 89       	ldd	r24, Y+16	; 0x10
     e96:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	8a 95       	dec	r24
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <lcd_command+0x1cc>
     e9e:	89 83       	std	Y+1, r24	; 0x01
    case 0 ... 3:                       // on longer commands
      _delay_us( LCD_TIME_CLR );
      d = LCD_LINE1;
     ea0:	80 e8       	ldi	r24, 0x80	; 128
     ea2:	89 8f       	std	Y+25, r24	; 0x19
    case 0x80 ... 0xFF:                 // set position
      lcd_pos = d;
     ea4:	89 8d       	ldd	r24, Y+25	; 0x19
     ea6:	80 93 59 02 	sts	0x0259, r24
  }
}
     eaa:	6b 96       	adiw	r28, 0x1b	; 27
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	f8 94       	cli
     eb0:	de bf       	out	0x3e, r29	; 62
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	cd bf       	out	0x3d, r28	; 61
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <lcd_putchar>:


void lcd_putchar( uint8_t d )
{
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <lcd_putchar+0x6>
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	89 83       	std	Y+1, r24	; 0x01
  LCD_RS = 1;
     ec8:	e2 e0       	ldi	r30, 0x02	; 2
     eca:	f1 e0       	ldi	r31, 0x01	; 1
     ecc:	80 81       	ld	r24, Z
     ece:	80 62       	ori	r24, 0x20	; 32
     ed0:	80 83       	st	Z, r24
  lcd_byte( d );
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	0e 94 8d 05 	call	0xb1a	; 0xb1a <lcd_byte>
  switch( ++lcd_pos ){
     ed8:	80 91 59 02 	lds	r24, 0x0259
     edc:	8f 5f       	subi	r24, 0xFF	; 255
     ede:	80 93 59 02 	sts	0x0259, r24
     ee2:	80 91 59 02 	lds	r24, 0x0259
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	3b 83       	std	Y+3, r19	; 0x03
     eec:	2a 83       	std	Y+2, r18	; 0x02
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	9b 81       	ldd	r25, Y+3	; 0x03
     ef2:	80 39       	cpi	r24, 0x90	; 144
     ef4:	91 05       	cpc	r25, r1
     ef6:	31 f0       	breq	.+12     	; 0xf04 <lcd_putchar+0x48>
     ef8:	2a 81       	ldd	r18, Y+2	; 0x02
     efa:	3b 81       	ldd	r19, Y+3	; 0x03
     efc:	20 3d       	cpi	r18, 0xD0	; 208
     efe:	31 05       	cpc	r19, r1
     f00:	21 f0       	breq	.+8      	; 0xf0a <lcd_putchar+0x4e>
     f02:	08 c0       	rjmp	.+16     	; 0xf14 <lcd_putchar+0x58>
    case LCD_LINE1 + LCD_COLUMN:
#ifdef LCD_LINE2
      d = LCD_LINE2;
     f04:	80 ec       	ldi	r24, 0xC0	; 192
     f06:	89 83       	std	Y+1, r24	; 0x01
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <lcd_putchar+0x52>
      break;
    case LCD_LINE4 + LCD_COLUMN:
#endif
#endif
#endif
      d = LCD_LINE1;
     f0a:	80 e8       	ldi	r24, 0x80	; 128
     f0c:	89 83       	std	Y+1, r24	; 0x01
      break;
    default: 
      return;
  }
  lcd_command( d );
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	0e 94 67 06 	call	0xcce	; 0xcce <lcd_command>
}
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	08 95       	ret

00000f20 <lcd_puts>:


void lcd_puts( void *s )                        // display string from SRAM
{
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	00 d0       	rcall	.+0      	; 0xf26 <lcd_puts+0x6>
     f26:	0f 92       	push	r0
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	9c 83       	std	Y+4, r25	; 0x04
     f2e:	8b 83       	std	Y+3, r24	; 0x03
  for( uint8_t *s1 = s; *s1; s1++ )             // until zero byte
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	9c 81       	ldd	r25, Y+4	; 0x04
     f34:	9a 83       	std	Y+2, r25	; 0x02
     f36:	89 83       	std	Y+1, r24	; 0x01
     f38:	0a c0       	rjmp	.+20     	; 0xf4e <lcd_puts+0x2e>
    lcd_putchar( *s1 );
     f3a:	e9 81       	ldd	r30, Y+1	; 0x01
     f3c:	fa 81       	ldd	r31, Y+2	; 0x02
     f3e:	80 81       	ld	r24, Z
     f40:	0e 94 5e 07 	call	0xebc	; 0xebc <lcd_putchar>
}


void lcd_puts( void *s )                        // display string from SRAM
{
  for( uint8_t *s1 = s; *s1; s1++ )             // until zero byte
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	9a 81       	ldd	r25, Y+2	; 0x02
     f48:	01 96       	adiw	r24, 0x01	; 1
     f4a:	9a 83       	std	Y+2, r25	; 0x02
     f4c:	89 83       	std	Y+1, r24	; 0x01
     f4e:	e9 81       	ldd	r30, Y+1	; 0x01
     f50:	fa 81       	ldd	r31, Y+2	; 0x02
     f52:	80 81       	ld	r24, Z
     f54:	88 23       	and	r24, r24
     f56:	89 f7       	brne	.-30     	; 0xf3a <lcd_puts+0x1a>
    lcd_putchar( *s1 );
}
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	08 95       	ret

00000f66 <lcd_blank>:


void lcd_blank( uint8_t len )                   // blank n digits
{
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	0f 92       	push	r0
     f6c:	0f 92       	push	r0
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	89 83       	std	Y+1, r24	; 0x01
     f74:	03 c0       	rjmp	.+6      	; 0xf7c <lcd_blank+0x16>
  while( len-- )
    lcd_putchar( ' ' );
     f76:	80 e2       	ldi	r24, 0x20	; 32
     f78:	0e 94 5e 07 	call	0xebc	; 0xebc <lcd_putchar>
}


void lcd_blank( uint8_t len )                   // blank n digits
{
  while( len-- )
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	8a 83       	std	Y+2, r24	; 0x02
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	88 23       	and	r24, r24
     f84:	11 f0       	breq	.+4      	; 0xf8a <lcd_blank+0x24>
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	8a 83       	std	Y+2, r24	; 0x02
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	99 81       	ldd	r25, Y+1	; 0x01
     f8e:	91 50       	subi	r25, 0x01	; 1
     f90:	99 83       	std	Y+1, r25	; 0x01
     f92:	88 23       	and	r24, r24
     f94:	81 f7       	brne	.-32     	; 0xf76 <lcd_blank+0x10>
    lcd_putchar( ' ' );
}
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	08 95       	ret

00000fa0 <lcd_init>:


void lcd_init( void )
{
     fa0:	0f 93       	push	r16
     fa2:	1f 93       	push	r17
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	c4 56       	subi	r28, 0x64	; 100
     fae:	d0 40       	sbci	r29, 0x00	; 0
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
  LCD_DDR_D4 = 1;                               // enable output pins
     fba:	e3 e3       	ldi	r30, 0x33	; 51
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	80 62       	ori	r24, 0x20	; 32
     fc2:	80 83       	st	Z, r24
  LCD_DDR_D5 = 1;
     fc4:	ed e2       	ldi	r30, 0x2D	; 45
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	88 60       	ori	r24, 0x08	; 8
     fcc:	80 83       	st	Z, r24
  LCD_DDR_D6 = 1;
     fce:	e1 e0       	ldi	r30, 0x01	; 1
     fd0:	f1 e0       	ldi	r31, 0x01	; 1
     fd2:	80 81       	ld	r24, Z
     fd4:	88 60       	ori	r24, 0x08	; 8
     fd6:	80 83       	st	Z, r24
  LCD_DDR_D7 = 1;
     fd8:	e1 e0       	ldi	r30, 0x01	; 1
     fda:	f1 e0       	ldi	r31, 0x01	; 1
     fdc:	80 81       	ld	r24, Z
     fde:	80 61       	ori	r24, 0x10	; 16
     fe0:	80 83       	st	Z, r24
  LCD_DDR_RS = 1;
     fe2:	e1 e0       	ldi	r30, 0x01	; 1
     fe4:	f1 e0       	ldi	r31, 0x01	; 1
     fe6:	80 81       	ld	r24, Z
     fe8:	80 62       	ori	r24, 0x20	; 32
     fea:	80 83       	st	Z, r24
  LCD_DDR_E0 = 1;
     fec:	e1 e0       	ldi	r30, 0x01	; 1
     fee:	f1 e0       	ldi	r31, 0x01	; 1
     ff0:	80 81       	ld	r24, Z
     ff2:	80 64       	ori	r24, 0x40	; 64
     ff4:	80 83       	st	Z, r24
  LCD_E0 = 0;
     ff6:	e2 e0       	ldi	r30, 0x02	; 2
     ff8:	f1 e0       	ldi	r31, 0x01	; 1
     ffa:	80 81       	ld	r24, Z
     ffc:	8f 7b       	andi	r24, 0xBF	; 191
     ffe:	80 83       	st	Z, r24
  LCD_RS = 0;                                   // send commands
    1000:	e2 e0       	ldi	r30, 0x02	; 2
    1002:	f1 e0       	ldi	r31, 0x01	; 1
    1004:	80 81       	ld	r24, Z
    1006:	8f 7d       	andi	r24, 0xDF	; 223
    1008:	80 83       	st	Z, r24
    100a:	fe 01       	movw	r30, r28
    100c:	ef 59       	subi	r30, 0x9F	; 159
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	a0 e7       	ldi	r26, 0x70	; 112
    1016:	b1 e4       	ldi	r27, 0x41	; 65
    1018:	80 83       	st	Z, r24
    101a:	91 83       	std	Z+1, r25	; 0x01
    101c:	a2 83       	std	Z+2, r26	; 0x02
    101e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1020:	8e 01       	movw	r16, r28
    1022:	03 5a       	subi	r16, 0xA3	; 163
    1024:	1f 4f       	sbci	r17, 0xFF	; 255
    1026:	fe 01       	movw	r30, r28
    1028:	ef 59       	subi	r30, 0x9F	; 159
    102a:	ff 4f       	sbci	r31, 0xFF	; 255
    102c:	60 81       	ld	r22, Z
    102e:	71 81       	ldd	r23, Z+1	; 0x01
    1030:	82 81       	ldd	r24, Z+2	; 0x02
    1032:	93 81       	ldd	r25, Z+3	; 0x03
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	4a e7       	ldi	r20, 0x7A	; 122
    103a:	55 e4       	ldi	r21, 0x45	; 69
    103c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	f8 01       	movw	r30, r16
    1046:	80 83       	st	Z, r24
    1048:	91 83       	std	Z+1, r25	; 0x01
    104a:	a2 83       	std	Z+2, r26	; 0x02
    104c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    104e:	fe 01       	movw	r30, r28
    1050:	e3 5a       	subi	r30, 0xA3	; 163
    1052:	ff 4f       	sbci	r31, 0xFF	; 255
    1054:	60 81       	ld	r22, Z
    1056:	71 81       	ldd	r23, Z+1	; 0x01
    1058:	82 81       	ldd	r24, Z+2	; 0x02
    105a:	93 81       	ldd	r25, Z+3	; 0x03
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	40 e8       	ldi	r20, 0x80	; 128
    1062:	5f e3       	ldi	r21, 0x3F	; 63
    1064:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__ltsf2>
    1068:	88 23       	and	r24, r24
    106a:	44 f4       	brge	.+16     	; 0x107c <lcd_init+0xdc>
		__ticks = 1;
    106c:	fe 01       	movw	r30, r28
    106e:	e5 5a       	subi	r30, 0xA5	; 165
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	91 83       	std	Z+1, r25	; 0x01
    1078:	80 83       	st	Z, r24
    107a:	64 c0       	rjmp	.+200    	; 0x1144 <lcd_init+0x1a4>
	else if (__tmp > 65535)
    107c:	fe 01       	movw	r30, r28
    107e:	e3 5a       	subi	r30, 0xA3	; 163
    1080:	ff 4f       	sbci	r31, 0xFF	; 255
    1082:	60 81       	ld	r22, Z
    1084:	71 81       	ldd	r23, Z+1	; 0x01
    1086:	82 81       	ldd	r24, Z+2	; 0x02
    1088:	93 81       	ldd	r25, Z+3	; 0x03
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	3f ef       	ldi	r19, 0xFF	; 255
    108e:	4f e7       	ldi	r20, 0x7F	; 127
    1090:	57 e4       	ldi	r21, 0x47	; 71
    1092:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__gtsf2>
    1096:	18 16       	cp	r1, r24
    1098:	0c f0       	brlt	.+2      	; 0x109c <lcd_init+0xfc>
    109a:	43 c0       	rjmp	.+134    	; 0x1122 <lcd_init+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    109c:	fe 01       	movw	r30, r28
    109e:	ef 59       	subi	r30, 0x9F	; 159
    10a0:	ff 4f       	sbci	r31, 0xFF	; 255
    10a2:	60 81       	ld	r22, Z
    10a4:	71 81       	ldd	r23, Z+1	; 0x01
    10a6:	82 81       	ldd	r24, Z+2	; 0x02
    10a8:	93 81       	ldd	r25, Z+3	; 0x03
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	40 e2       	ldi	r20, 0x20	; 32
    10b0:	51 e4       	ldi	r21, 0x41	; 65
    10b2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	8e 01       	movw	r16, r28
    10bc:	05 5a       	subi	r16, 0xA5	; 165
    10be:	1f 4f       	sbci	r17, 0xFF	; 255
    10c0:	bc 01       	movw	r22, r24
    10c2:	cd 01       	movw	r24, r26
    10c4:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fixunssfsi>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	f8 01       	movw	r30, r16
    10ce:	91 83       	std	Z+1, r25	; 0x01
    10d0:	80 83       	st	Z, r24
    10d2:	1f c0       	rjmp	.+62     	; 0x1112 <lcd_init+0x172>
    10d4:	fe 01       	movw	r30, r28
    10d6:	e7 5a       	subi	r30, 0xA7	; 167
    10d8:	ff 4f       	sbci	r31, 0xFF	; 255
    10da:	80 e9       	ldi	r24, 0x90	; 144
    10dc:	91 e0       	ldi	r25, 0x01	; 1
    10de:	91 83       	std	Z+1, r25	; 0x01
    10e0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10e2:	fe 01       	movw	r30, r28
    10e4:	e7 5a       	subi	r30, 0xA7	; 167
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	80 81       	ld	r24, Z
    10ea:	91 81       	ldd	r25, Z+1	; 0x01
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	f1 f7       	brne	.-4      	; 0x10ec <lcd_init+0x14c>
    10f0:	fe 01       	movw	r30, r28
    10f2:	e7 5a       	subi	r30, 0xA7	; 167
    10f4:	ff 4f       	sbci	r31, 0xFF	; 255
    10f6:	91 83       	std	Z+1, r25	; 0x01
    10f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10fa:	de 01       	movw	r26, r28
    10fc:	a5 5a       	subi	r26, 0xA5	; 165
    10fe:	bf 4f       	sbci	r27, 0xFF	; 255
    1100:	fe 01       	movw	r30, r28
    1102:	e5 5a       	subi	r30, 0xA5	; 165
    1104:	ff 4f       	sbci	r31, 0xFF	; 255
    1106:	80 81       	ld	r24, Z
    1108:	91 81       	ldd	r25, Z+1	; 0x01
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	11 96       	adiw	r26, 0x01	; 1
    110e:	9c 93       	st	X, r25
    1110:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1112:	fe 01       	movw	r30, r28
    1114:	e5 5a       	subi	r30, 0xA5	; 165
    1116:	ff 4f       	sbci	r31, 0xFF	; 255
    1118:	80 81       	ld	r24, Z
    111a:	91 81       	ldd	r25, Z+1	; 0x01
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	d1 f6       	brne	.-76     	; 0x10d4 <lcd_init+0x134>
    1120:	27 c0       	rjmp	.+78     	; 0x1170 <lcd_init+0x1d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1122:	8e 01       	movw	r16, r28
    1124:	05 5a       	subi	r16, 0xA5	; 165
    1126:	1f 4f       	sbci	r17, 0xFF	; 255
    1128:	fe 01       	movw	r30, r28
    112a:	e3 5a       	subi	r30, 0xA3	; 163
    112c:	ff 4f       	sbci	r31, 0xFF	; 255
    112e:	60 81       	ld	r22, Z
    1130:	71 81       	ldd	r23, Z+1	; 0x01
    1132:	82 81       	ldd	r24, Z+2	; 0x02
    1134:	93 81       	ldd	r25, Z+3	; 0x03
    1136:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fixunssfsi>
    113a:	dc 01       	movw	r26, r24
    113c:	cb 01       	movw	r24, r22
    113e:	f8 01       	movw	r30, r16
    1140:	91 83       	std	Z+1, r25	; 0x01
    1142:	80 83       	st	Z, r24
    1144:	de 01       	movw	r26, r28
    1146:	a9 5a       	subi	r26, 0xA9	; 169
    1148:	bf 4f       	sbci	r27, 0xFF	; 255
    114a:	fe 01       	movw	r30, r28
    114c:	e5 5a       	subi	r30, 0xA5	; 165
    114e:	ff 4f       	sbci	r31, 0xFF	; 255
    1150:	80 81       	ld	r24, Z
    1152:	91 81       	ldd	r25, Z+1	; 0x01
    1154:	8d 93       	st	X+, r24
    1156:	9c 93       	st	X, r25
    1158:	fe 01       	movw	r30, r28
    115a:	e9 5a       	subi	r30, 0xA9	; 169
    115c:	ff 4f       	sbci	r31, 0xFF	; 255
    115e:	80 81       	ld	r24, Z
    1160:	91 81       	ldd	r25, Z+1	; 0x01
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	f1 f7       	brne	.-4      	; 0x1162 <lcd_init+0x1c2>
    1166:	fe 01       	movw	r30, r28
    1168:	e9 5a       	subi	r30, 0xA9	; 169
    116a:	ff 4f       	sbci	r31, 0xFF	; 255
    116c:	91 83       	std	Z+1, r25	; 0x01
    116e:	80 83       	st	Z, r24

  _delay_ms( 15 );
  lcd_nibble( 0x30 );
    1170:	80 e3       	ldi	r24, 0x30	; 48
    1172:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_nibble>
    1176:	fe 01       	movw	r30, r28
    1178:	ed 5a       	subi	r30, 0xAD	; 173
    117a:	ff 4f       	sbci	r31, 0xFF	; 255
    117c:	83 e3       	ldi	r24, 0x33	; 51
    117e:	93 e3       	ldi	r25, 0x33	; 51
    1180:	a3 e8       	ldi	r26, 0x83	; 131
    1182:	b0 e4       	ldi	r27, 0x40	; 64
    1184:	80 83       	st	Z, r24
    1186:	91 83       	std	Z+1, r25	; 0x01
    1188:	a2 83       	std	Z+2, r26	; 0x02
    118a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    118c:	8e 01       	movw	r16, r28
    118e:	01 5b       	subi	r16, 0xB1	; 177
    1190:	1f 4f       	sbci	r17, 0xFF	; 255
    1192:	fe 01       	movw	r30, r28
    1194:	ed 5a       	subi	r30, 0xAD	; 173
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	60 81       	ld	r22, Z
    119a:	71 81       	ldd	r23, Z+1	; 0x01
    119c:	82 81       	ldd	r24, Z+2	; 0x02
    119e:	93 81       	ldd	r25, Z+3	; 0x03
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	4a e7       	ldi	r20, 0x7A	; 122
    11a6:	55 e4       	ldi	r21, 0x45	; 69
    11a8:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3>
    11ac:	dc 01       	movw	r26, r24
    11ae:	cb 01       	movw	r24, r22
    11b0:	f8 01       	movw	r30, r16
    11b2:	80 83       	st	Z, r24
    11b4:	91 83       	std	Z+1, r25	; 0x01
    11b6:	a2 83       	std	Z+2, r26	; 0x02
    11b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11ba:	fe 01       	movw	r30, r28
    11bc:	e1 5b       	subi	r30, 0xB1	; 177
    11be:	ff 4f       	sbci	r31, 0xFF	; 255
    11c0:	60 81       	ld	r22, Z
    11c2:	71 81       	ldd	r23, Z+1	; 0x01
    11c4:	82 81       	ldd	r24, Z+2	; 0x02
    11c6:	93 81       	ldd	r25, Z+3	; 0x03
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	40 e8       	ldi	r20, 0x80	; 128
    11ce:	5f e3       	ldi	r21, 0x3F	; 63
    11d0:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__ltsf2>
    11d4:	88 23       	and	r24, r24
    11d6:	44 f4       	brge	.+16     	; 0x11e8 <lcd_init+0x248>
		__ticks = 1;
    11d8:	fe 01       	movw	r30, r28
    11da:	e3 5b       	subi	r30, 0xB3	; 179
    11dc:	ff 4f       	sbci	r31, 0xFF	; 255
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	91 83       	std	Z+1, r25	; 0x01
    11e4:	80 83       	st	Z, r24
    11e6:	64 c0       	rjmp	.+200    	; 0x12b0 <lcd_init+0x310>
	else if (__tmp > 65535)
    11e8:	fe 01       	movw	r30, r28
    11ea:	e1 5b       	subi	r30, 0xB1	; 177
    11ec:	ff 4f       	sbci	r31, 0xFF	; 255
    11ee:	60 81       	ld	r22, Z
    11f0:	71 81       	ldd	r23, Z+1	; 0x01
    11f2:	82 81       	ldd	r24, Z+2	; 0x02
    11f4:	93 81       	ldd	r25, Z+3	; 0x03
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	3f ef       	ldi	r19, 0xFF	; 255
    11fa:	4f e7       	ldi	r20, 0x7F	; 127
    11fc:	57 e4       	ldi	r21, 0x47	; 71
    11fe:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__gtsf2>
    1202:	18 16       	cp	r1, r24
    1204:	0c f0       	brlt	.+2      	; 0x1208 <lcd_init+0x268>
    1206:	43 c0       	rjmp	.+134    	; 0x128e <lcd_init+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1208:	fe 01       	movw	r30, r28
    120a:	ed 5a       	subi	r30, 0xAD	; 173
    120c:	ff 4f       	sbci	r31, 0xFF	; 255
    120e:	60 81       	ld	r22, Z
    1210:	71 81       	ldd	r23, Z+1	; 0x01
    1212:	82 81       	ldd	r24, Z+2	; 0x02
    1214:	93 81       	ldd	r25, Z+3	; 0x03
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	40 e2       	ldi	r20, 0x20	; 32
    121c:	51 e4       	ldi	r21, 0x41	; 65
    121e:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	8e 01       	movw	r16, r28
    1228:	03 5b       	subi	r16, 0xB3	; 179
    122a:	1f 4f       	sbci	r17, 0xFF	; 255
    122c:	bc 01       	movw	r22, r24
    122e:	cd 01       	movw	r24, r26
    1230:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fixunssfsi>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	f8 01       	movw	r30, r16
    123a:	91 83       	std	Z+1, r25	; 0x01
    123c:	80 83       	st	Z, r24
    123e:	1f c0       	rjmp	.+62     	; 0x127e <lcd_init+0x2de>
    1240:	fe 01       	movw	r30, r28
    1242:	e5 5b       	subi	r30, 0xB5	; 181
    1244:	ff 4f       	sbci	r31, 0xFF	; 255
    1246:	80 e9       	ldi	r24, 0x90	; 144
    1248:	91 e0       	ldi	r25, 0x01	; 1
    124a:	91 83       	std	Z+1, r25	; 0x01
    124c:	80 83       	st	Z, r24
    124e:	fe 01       	movw	r30, r28
    1250:	e5 5b       	subi	r30, 0xB5	; 181
    1252:	ff 4f       	sbci	r31, 0xFF	; 255
    1254:	80 81       	ld	r24, Z
    1256:	91 81       	ldd	r25, Z+1	; 0x01
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <lcd_init+0x2b8>
    125c:	fe 01       	movw	r30, r28
    125e:	e5 5b       	subi	r30, 0xB5	; 181
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	91 83       	std	Z+1, r25	; 0x01
    1264:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1266:	de 01       	movw	r26, r28
    1268:	a3 5b       	subi	r26, 0xB3	; 179
    126a:	bf 4f       	sbci	r27, 0xFF	; 255
    126c:	fe 01       	movw	r30, r28
    126e:	e3 5b       	subi	r30, 0xB3	; 179
    1270:	ff 4f       	sbci	r31, 0xFF	; 255
    1272:	80 81       	ld	r24, Z
    1274:	91 81       	ldd	r25, Z+1	; 0x01
    1276:	01 97       	sbiw	r24, 0x01	; 1
    1278:	11 96       	adiw	r26, 0x01	; 1
    127a:	9c 93       	st	X, r25
    127c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    127e:	fe 01       	movw	r30, r28
    1280:	e3 5b       	subi	r30, 0xB3	; 179
    1282:	ff 4f       	sbci	r31, 0xFF	; 255
    1284:	80 81       	ld	r24, Z
    1286:	91 81       	ldd	r25, Z+1	; 0x01
    1288:	00 97       	sbiw	r24, 0x00	; 0
    128a:	d1 f6       	brne	.-76     	; 0x1240 <lcd_init+0x2a0>
    128c:	27 c0       	rjmp	.+78     	; 0x12dc <lcd_init+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    128e:	8e 01       	movw	r16, r28
    1290:	03 5b       	subi	r16, 0xB3	; 179
    1292:	1f 4f       	sbci	r17, 0xFF	; 255
    1294:	fe 01       	movw	r30, r28
    1296:	e1 5b       	subi	r30, 0xB1	; 177
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	60 81       	ld	r22, Z
    129c:	71 81       	ldd	r23, Z+1	; 0x01
    129e:	82 81       	ldd	r24, Z+2	; 0x02
    12a0:	93 81       	ldd	r25, Z+3	; 0x03
    12a2:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fixunssfsi>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	f8 01       	movw	r30, r16
    12ac:	91 83       	std	Z+1, r25	; 0x01
    12ae:	80 83       	st	Z, r24
    12b0:	de 01       	movw	r26, r28
    12b2:	a7 5b       	subi	r26, 0xB7	; 183
    12b4:	bf 4f       	sbci	r27, 0xFF	; 255
    12b6:	fe 01       	movw	r30, r28
    12b8:	e3 5b       	subi	r30, 0xB3	; 179
    12ba:	ff 4f       	sbci	r31, 0xFF	; 255
    12bc:	80 81       	ld	r24, Z
    12be:	91 81       	ldd	r25, Z+1	; 0x01
    12c0:	8d 93       	st	X+, r24
    12c2:	9c 93       	st	X, r25
    12c4:	fe 01       	movw	r30, r28
    12c6:	e7 5b       	subi	r30, 0xB7	; 183
    12c8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ca:	80 81       	ld	r24, Z
    12cc:	91 81       	ldd	r25, Z+1	; 0x01
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	f1 f7       	brne	.-4      	; 0x12ce <lcd_init+0x32e>
    12d2:	fe 01       	movw	r30, r28
    12d4:	e7 5b       	subi	r30, 0xB7	; 183
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	91 83       	std	Z+1, r25	; 0x01
    12da:	80 83       	st	Z, r24
  _delay_ms( 4.1 );
  lcd_nibble( 0x30 );
    12dc:	80 e3       	ldi	r24, 0x30	; 48
    12de:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_nibble>
    12e2:	fe 01       	movw	r30, r28
    12e4:	eb 5b       	subi	r30, 0xBB	; 187
    12e6:	ff 4f       	sbci	r31, 0xFF	; 255
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	a8 ec       	ldi	r26, 0xC8	; 200
    12ee:	b2 e4       	ldi	r27, 0x42	; 66
    12f0:	80 83       	st	Z, r24
    12f2:	91 83       	std	Z+1, r25	; 0x01
    12f4:	a2 83       	std	Z+2, r26	; 0x02
    12f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    12f8:	8e 01       	movw	r16, r28
    12fa:	0f 5b       	subi	r16, 0xBF	; 191
    12fc:	1f 4f       	sbci	r17, 0xFF	; 255
    12fe:	fe 01       	movw	r30, r28
    1300:	eb 5b       	subi	r30, 0xBB	; 187
    1302:	ff 4f       	sbci	r31, 0xFF	; 255
    1304:	60 81       	ld	r22, Z
    1306:	71 81       	ldd	r23, Z+1	; 0x01
    1308:	82 81       	ldd	r24, Z+2	; 0x02
    130a:	93 81       	ldd	r25, Z+3	; 0x03
    130c:	2b ea       	ldi	r18, 0xAB	; 171
    130e:	3a ea       	ldi	r19, 0xAA	; 170
    1310:	4a ea       	ldi	r20, 0xAA	; 170
    1312:	50 e4       	ldi	r21, 0x40	; 64
    1314:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	f8 01       	movw	r30, r16
    131e:	80 83       	st	Z, r24
    1320:	91 83       	std	Z+1, r25	; 0x01
    1322:	a2 83       	std	Z+2, r26	; 0x02
    1324:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1326:	fe 01       	movw	r30, r28
    1328:	ef 5b       	subi	r30, 0xBF	; 191
    132a:	ff 4f       	sbci	r31, 0xFF	; 255
    132c:	60 81       	ld	r22, Z
    132e:	71 81       	ldd	r23, Z+1	; 0x01
    1330:	82 81       	ldd	r24, Z+2	; 0x02
    1332:	93 81       	ldd	r25, Z+3	; 0x03
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	40 e8       	ldi	r20, 0x80	; 128
    133a:	5f e3       	ldi	r21, 0x3F	; 63
    133c:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__ltsf2>
    1340:	88 23       	and	r24, r24
    1342:	34 f4       	brge	.+12     	; 0x1350 <lcd_init+0x3b0>
		__ticks = 1;
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	fe 01       	movw	r30, r28
    1348:	e0 5c       	subi	r30, 0xC0	; 192
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	80 83       	st	Z, r24
    134e:	9d c0       	rjmp	.+314    	; 0x148a <lcd_init+0x4ea>
	else if (__tmp > 255)
    1350:	fe 01       	movw	r30, r28
    1352:	ef 5b       	subi	r30, 0xBF	; 191
    1354:	ff 4f       	sbci	r31, 0xFF	; 255
    1356:	60 81       	ld	r22, Z
    1358:	71 81       	ldd	r23, Z+1	; 0x01
    135a:	82 81       	ldd	r24, Z+2	; 0x02
    135c:	93 81       	ldd	r25, Z+3	; 0x03
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	4f e7       	ldi	r20, 0x7F	; 127
    1364:	53 e4       	ldi	r21, 0x43	; 67
    1366:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__gtsf2>
    136a:	18 16       	cp	r1, r24
    136c:	0c f0       	brlt	.+2      	; 0x1370 <lcd_init+0x3d0>
    136e:	7e c0       	rjmp	.+252    	; 0x146c <lcd_init+0x4cc>
	{
		_delay_ms(__us / 1000.0);
    1370:	fe 01       	movw	r30, r28
    1372:	eb 5b       	subi	r30, 0xBB	; 187
    1374:	ff 4f       	sbci	r31, 0xFF	; 255
    1376:	60 81       	ld	r22, Z
    1378:	71 81       	ldd	r23, Z+1	; 0x01
    137a:	82 81       	ldd	r24, Z+2	; 0x02
    137c:	93 81       	ldd	r25, Z+3	; 0x03
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	4a e7       	ldi	r20, 0x7A	; 122
    1384:	54 e4       	ldi	r21, 0x44	; 68
    1386:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__divsf3>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	8c af       	std	Y+60, r24	; 0x3c
    1390:	9d af       	std	Y+61, r25	; 0x3d
    1392:	ae af       	std	Y+62, r26	; 0x3e
    1394:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1396:	6c ad       	ldd	r22, Y+60	; 0x3c
    1398:	7d ad       	ldd	r23, Y+61	; 0x3d
    139a:	8e ad       	ldd	r24, Y+62	; 0x3e
    139c:	9f ad       	ldd	r25, Y+63	; 0x3f
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	4a e7       	ldi	r20, 0x7A	; 122
    13a4:	55 e4       	ldi	r21, 0x45	; 69
    13a6:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	88 af       	std	Y+56, r24	; 0x38
    13b0:	99 af       	std	Y+57, r25	; 0x39
    13b2:	aa af       	std	Y+58, r26	; 0x3a
    13b4:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    13b6:	68 ad       	ldd	r22, Y+56	; 0x38
    13b8:	79 ad       	ldd	r23, Y+57	; 0x39
    13ba:	8a ad       	ldd	r24, Y+58	; 0x3a
    13bc:	9b ad       	ldd	r25, Y+59	; 0x3b
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	40 e8       	ldi	r20, 0x80	; 128
    13c4:	5f e3       	ldi	r21, 0x3F	; 63
    13c6:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__ltsf2>
    13ca:	88 23       	and	r24, r24
    13cc:	2c f4       	brge	.+10     	; 0x13d8 <lcd_init+0x438>
		__ticks = 1;
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	9f ab       	std	Y+55, r25	; 0x37
    13d4:	8e ab       	std	Y+54, r24	; 0x36
    13d6:	3f c0       	rjmp	.+126    	; 0x1456 <lcd_init+0x4b6>
	else if (__tmp > 65535)
    13d8:	68 ad       	ldd	r22, Y+56	; 0x38
    13da:	79 ad       	ldd	r23, Y+57	; 0x39
    13dc:	8a ad       	ldd	r24, Y+58	; 0x3a
    13de:	9b ad       	ldd	r25, Y+59	; 0x3b
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	3f ef       	ldi	r19, 0xFF	; 255
    13e4:	4f e7       	ldi	r20, 0x7F	; 127
    13e6:	57 e4       	ldi	r21, 0x47	; 71
    13e8:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__gtsf2>
    13ec:	18 16       	cp	r1, r24
    13ee:	4c f5       	brge	.+82     	; 0x1442 <lcd_init+0x4a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13f0:	6c ad       	ldd	r22, Y+60	; 0x3c
    13f2:	7d ad       	ldd	r23, Y+61	; 0x3d
    13f4:	8e ad       	ldd	r24, Y+62	; 0x3e
    13f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	40 e2       	ldi	r20, 0x20	; 32
    13fe:	51 e4       	ldi	r21, 0x41	; 65
    1400:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	bc 01       	movw	r22, r24
    140a:	cd 01       	movw	r24, r26
    140c:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fixunssfsi>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	9f ab       	std	Y+55, r25	; 0x37
    1416:	8e ab       	std	Y+54, r24	; 0x36
    1418:	0f c0       	rjmp	.+30     	; 0x1438 <lcd_init+0x498>
    141a:	80 e9       	ldi	r24, 0x90	; 144
    141c:	91 e0       	ldi	r25, 0x01	; 1
    141e:	9d ab       	std	Y+53, r25	; 0x35
    1420:	8c ab       	std	Y+52, r24	; 0x34
    1422:	8c a9       	ldd	r24, Y+52	; 0x34
    1424:	9d a9       	ldd	r25, Y+53	; 0x35
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	f1 f7       	brne	.-4      	; 0x1426 <lcd_init+0x486>
    142a:	9d ab       	std	Y+53, r25	; 0x35
    142c:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    142e:	8e a9       	ldd	r24, Y+54	; 0x36
    1430:	9f a9       	ldd	r25, Y+55	; 0x37
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	9f ab       	std	Y+55, r25	; 0x37
    1436:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1438:	8e a9       	ldd	r24, Y+54	; 0x36
    143a:	9f a9       	ldd	r25, Y+55	; 0x37
    143c:	00 97       	sbiw	r24, 0x00	; 0
    143e:	69 f7       	brne	.-38     	; 0x141a <lcd_init+0x47a>
    1440:	2d c0       	rjmp	.+90     	; 0x149c <lcd_init+0x4fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1442:	68 ad       	ldd	r22, Y+56	; 0x38
    1444:	79 ad       	ldd	r23, Y+57	; 0x39
    1446:	8a ad       	ldd	r24, Y+58	; 0x3a
    1448:	9b ad       	ldd	r25, Y+59	; 0x3b
    144a:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fixunssfsi>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	9f ab       	std	Y+55, r25	; 0x37
    1454:	8e ab       	std	Y+54, r24	; 0x36
    1456:	8e a9       	ldd	r24, Y+54	; 0x36
    1458:	9f a9       	ldd	r25, Y+55	; 0x37
    145a:	9b ab       	std	Y+51, r25	; 0x33
    145c:	8a ab       	std	Y+50, r24	; 0x32
    145e:	8a a9       	ldd	r24, Y+50	; 0x32
    1460:	9b a9       	ldd	r25, Y+51	; 0x33
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	f1 f7       	brne	.-4      	; 0x1462 <lcd_init+0x4c2>
    1466:	9b ab       	std	Y+51, r25	; 0x33
    1468:	8a ab       	std	Y+50, r24	; 0x32
    146a:	18 c0       	rjmp	.+48     	; 0x149c <lcd_init+0x4fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    146c:	fe 01       	movw	r30, r28
    146e:	ef 5b       	subi	r30, 0xBF	; 191
    1470:	ff 4f       	sbci	r31, 0xFF	; 255
    1472:	60 81       	ld	r22, Z
    1474:	71 81       	ldd	r23, Z+1	; 0x01
    1476:	82 81       	ldd	r24, Z+2	; 0x02
    1478:	93 81       	ldd	r25, Z+3	; 0x03
    147a:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fixunssfsi>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	fe 01       	movw	r30, r28
    1484:	e0 5c       	subi	r30, 0xC0	; 192
    1486:	ff 4f       	sbci	r31, 0xFF	; 255
    1488:	80 83       	st	Z, r24
    148a:	fe 01       	movw	r30, r28
    148c:	e0 5c       	subi	r30, 0xC0	; 192
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	80 81       	ld	r24, Z
    1492:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1494:	89 a9       	ldd	r24, Y+49	; 0x31
    1496:	8a 95       	dec	r24
    1498:	f1 f7       	brne	.-4      	; 0x1496 <lcd_init+0x4f6>
    149a:	89 ab       	std	Y+49, r24	; 0x31
  _delay_us( 100 );
  lcd_nibble( 0x30 );
    149c:	80 e3       	ldi	r24, 0x30	; 48
    149e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_nibble>
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	a8 e4       	ldi	r26, 0x48	; 72
    14a8:	b2 e4       	ldi	r27, 0x42	; 66
    14aa:	8d a7       	std	Y+45, r24	; 0x2d
    14ac:	9e a7       	std	Y+46, r25	; 0x2e
    14ae:	af a7       	std	Y+47, r26	; 0x2f
    14b0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    14b2:	6d a5       	ldd	r22, Y+45	; 0x2d
    14b4:	7e a5       	ldd	r23, Y+46	; 0x2e
    14b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    14b8:	98 a9       	ldd	r25, Y+48	; 0x30
    14ba:	2b ea       	ldi	r18, 0xAB	; 171
    14bc:	3a ea       	ldi	r19, 0xAA	; 170
    14be:	4a ea       	ldi	r20, 0xAA	; 170
    14c0:	50 e4       	ldi	r21, 0x40	; 64
    14c2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	89 a7       	std	Y+41, r24	; 0x29
    14cc:	9a a7       	std	Y+42, r25	; 0x2a
    14ce:	ab a7       	std	Y+43, r26	; 0x2b
    14d0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    14d2:	69 a5       	ldd	r22, Y+41	; 0x29
    14d4:	7a a5       	ldd	r23, Y+42	; 0x2a
    14d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    14d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	40 e8       	ldi	r20, 0x80	; 128
    14e0:	5f e3       	ldi	r21, 0x3F	; 63
    14e2:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__ltsf2>
    14e6:	88 23       	and	r24, r24
    14e8:	1c f4       	brge	.+6      	; 0x14f0 <lcd_init+0x550>
		__ticks = 1;
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	88 a7       	std	Y+40, r24	; 0x28
    14ee:	91 c0       	rjmp	.+290    	; 0x1612 <lcd_init+0x672>
	else if (__tmp > 255)
    14f0:	69 a5       	ldd	r22, Y+41	; 0x29
    14f2:	7a a5       	ldd	r23, Y+42	; 0x2a
    14f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    14f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	4f e7       	ldi	r20, 0x7F	; 127
    14fe:	53 e4       	ldi	r21, 0x43	; 67
    1500:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__gtsf2>
    1504:	18 16       	cp	r1, r24
    1506:	0c f0       	brlt	.+2      	; 0x150a <lcd_init+0x56a>
    1508:	7b c0       	rjmp	.+246    	; 0x1600 <lcd_init+0x660>
	{
		_delay_ms(__us / 1000.0);
    150a:	6d a5       	ldd	r22, Y+45	; 0x2d
    150c:	7e a5       	ldd	r23, Y+46	; 0x2e
    150e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1510:	98 a9       	ldd	r25, Y+48	; 0x30
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	4a e7       	ldi	r20, 0x7A	; 122
    1518:	54 e4       	ldi	r21, 0x44	; 68
    151a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__divsf3>
    151e:	dc 01       	movw	r26, r24
    1520:	cb 01       	movw	r24, r22
    1522:	8c a3       	std	Y+36, r24	; 0x24
    1524:	9d a3       	std	Y+37, r25	; 0x25
    1526:	ae a3       	std	Y+38, r26	; 0x26
    1528:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    152a:	6c a1       	ldd	r22, Y+36	; 0x24
    152c:	7d a1       	ldd	r23, Y+37	; 0x25
    152e:	8e a1       	ldd	r24, Y+38	; 0x26
    1530:	9f a1       	ldd	r25, Y+39	; 0x27
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	4a e7       	ldi	r20, 0x7A	; 122
    1538:	55 e4       	ldi	r21, 0x45	; 69
    153a:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	88 a3       	std	Y+32, r24	; 0x20
    1544:	99 a3       	std	Y+33, r25	; 0x21
    1546:	aa a3       	std	Y+34, r26	; 0x22
    1548:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    154a:	68 a1       	ldd	r22, Y+32	; 0x20
    154c:	79 a1       	ldd	r23, Y+33	; 0x21
    154e:	8a a1       	ldd	r24, Y+34	; 0x22
    1550:	9b a1       	ldd	r25, Y+35	; 0x23
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	40 e8       	ldi	r20, 0x80	; 128
    1558:	5f e3       	ldi	r21, 0x3F	; 63
    155a:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__ltsf2>
    155e:	88 23       	and	r24, r24
    1560:	2c f4       	brge	.+10     	; 0x156c <lcd_init+0x5cc>
		__ticks = 1;
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	9f 8f       	std	Y+31, r25	; 0x1f
    1568:	8e 8f       	std	Y+30, r24	; 0x1e
    156a:	3f c0       	rjmp	.+126    	; 0x15ea <lcd_init+0x64a>
	else if (__tmp > 65535)
    156c:	68 a1       	ldd	r22, Y+32	; 0x20
    156e:	79 a1       	ldd	r23, Y+33	; 0x21
    1570:	8a a1       	ldd	r24, Y+34	; 0x22
    1572:	9b a1       	ldd	r25, Y+35	; 0x23
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	3f ef       	ldi	r19, 0xFF	; 255
    1578:	4f e7       	ldi	r20, 0x7F	; 127
    157a:	57 e4       	ldi	r21, 0x47	; 71
    157c:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__gtsf2>
    1580:	18 16       	cp	r1, r24
    1582:	4c f5       	brge	.+82     	; 0x15d6 <lcd_init+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1584:	6c a1       	ldd	r22, Y+36	; 0x24
    1586:	7d a1       	ldd	r23, Y+37	; 0x25
    1588:	8e a1       	ldd	r24, Y+38	; 0x26
    158a:	9f a1       	ldd	r25, Y+39	; 0x27
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	40 e2       	ldi	r20, 0x20	; 32
    1592:	51 e4       	ldi	r21, 0x41	; 65
    1594:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	bc 01       	movw	r22, r24
    159e:	cd 01       	movw	r24, r26
    15a0:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fixunssfsi>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	9f 8f       	std	Y+31, r25	; 0x1f
    15aa:	8e 8f       	std	Y+30, r24	; 0x1e
    15ac:	0f c0       	rjmp	.+30     	; 0x15cc <lcd_init+0x62c>
    15ae:	80 e9       	ldi	r24, 0x90	; 144
    15b0:	91 e0       	ldi	r25, 0x01	; 1
    15b2:	9d 8f       	std	Y+29, r25	; 0x1d
    15b4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15b8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	f1 f7       	brne	.-4      	; 0x15ba <lcd_init+0x61a>
    15be:	9d 8f       	std	Y+29, r25	; 0x1d
    15c0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15c4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    15c6:	01 97       	sbiw	r24, 0x01	; 1
    15c8:	9f 8f       	std	Y+31, r25	; 0x1f
    15ca:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15ce:	9f 8d       	ldd	r25, Y+31	; 0x1f
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	69 f7       	brne	.-38     	; 0x15ae <lcd_init+0x60e>
    15d4:	24 c0       	rjmp	.+72     	; 0x161e <lcd_init+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d6:	68 a1       	ldd	r22, Y+32	; 0x20
    15d8:	79 a1       	ldd	r23, Y+33	; 0x21
    15da:	8a a1       	ldd	r24, Y+34	; 0x22
    15dc:	9b a1       	ldd	r25, Y+35	; 0x23
    15de:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fixunssfsi>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	9f 8f       	std	Y+31, r25	; 0x1f
    15e8:	8e 8f       	std	Y+30, r24	; 0x1e
    15ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15ec:	9f 8d       	ldd	r25, Y+31	; 0x1f
    15ee:	9b 8f       	std	Y+27, r25	; 0x1b
    15f0:	8a 8f       	std	Y+26, r24	; 0x1a
    15f2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15f4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	f1 f7       	brne	.-4      	; 0x15f6 <lcd_init+0x656>
    15fa:	9b 8f       	std	Y+27, r25	; 0x1b
    15fc:	8a 8f       	std	Y+26, r24	; 0x1a
    15fe:	0f c0       	rjmp	.+30     	; 0x161e <lcd_init+0x67e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1600:	69 a5       	ldd	r22, Y+41	; 0x29
    1602:	7a a5       	ldd	r23, Y+42	; 0x2a
    1604:	8b a5       	ldd	r24, Y+43	; 0x2b
    1606:	9c a5       	ldd	r25, Y+44	; 0x2c
    1608:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fixunssfsi>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	88 a7       	std	Y+40, r24	; 0x28
    1612:	88 a5       	ldd	r24, Y+40	; 0x28
    1614:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1616:	89 8d       	ldd	r24, Y+25	; 0x19
    1618:	8a 95       	dec	r24
    161a:	f1 f7       	brne	.-4      	; 0x1618 <lcd_init+0x678>
    161c:	89 8f       	std	Y+25, r24	; 0x19
  _delay_us( LCD_TIME_DAT );
  lcd_nibble( 0x20 );                           // 4 bit mode
    161e:	80 e2       	ldi	r24, 0x20	; 32
    1620:	0e 94 71 04 	call	0x8e2	; 0x8e2 <lcd_nibble>
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	a8 e4       	ldi	r26, 0x48	; 72
    162a:	b2 e4       	ldi	r27, 0x42	; 66
    162c:	8d 8b       	std	Y+21, r24	; 0x15
    162e:	9e 8b       	std	Y+22, r25	; 0x16
    1630:	af 8b       	std	Y+23, r26	; 0x17
    1632:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1634:	6d 89       	ldd	r22, Y+21	; 0x15
    1636:	7e 89       	ldd	r23, Y+22	; 0x16
    1638:	8f 89       	ldd	r24, Y+23	; 0x17
    163a:	98 8d       	ldd	r25, Y+24	; 0x18
    163c:	2b ea       	ldi	r18, 0xAB	; 171
    163e:	3a ea       	ldi	r19, 0xAA	; 170
    1640:	4a ea       	ldi	r20, 0xAA	; 170
    1642:	50 e4       	ldi	r21, 0x40	; 64
    1644:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	89 8b       	std	Y+17, r24	; 0x11
    164e:	9a 8b       	std	Y+18, r25	; 0x12
    1650:	ab 8b       	std	Y+19, r26	; 0x13
    1652:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1654:	69 89       	ldd	r22, Y+17	; 0x11
    1656:	7a 89       	ldd	r23, Y+18	; 0x12
    1658:	8b 89       	ldd	r24, Y+19	; 0x13
    165a:	9c 89       	ldd	r25, Y+20	; 0x14
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 e8       	ldi	r20, 0x80	; 128
    1662:	5f e3       	ldi	r21, 0x3F	; 63
    1664:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__ltsf2>
    1668:	88 23       	and	r24, r24
    166a:	1c f4       	brge	.+6      	; 0x1672 <lcd_init+0x6d2>
		__ticks = 1;
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	88 8b       	std	Y+16, r24	; 0x10
    1670:	91 c0       	rjmp	.+290    	; 0x1794 <lcd_init+0x7f4>
	else if (__tmp > 255)
    1672:	69 89       	ldd	r22, Y+17	; 0x11
    1674:	7a 89       	ldd	r23, Y+18	; 0x12
    1676:	8b 89       	ldd	r24, Y+19	; 0x13
    1678:	9c 89       	ldd	r25, Y+20	; 0x14
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	4f e7       	ldi	r20, 0x7F	; 127
    1680:	53 e4       	ldi	r21, 0x43	; 67
    1682:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__gtsf2>
    1686:	18 16       	cp	r1, r24
    1688:	0c f0       	brlt	.+2      	; 0x168c <lcd_init+0x6ec>
    168a:	7b c0       	rjmp	.+246    	; 0x1782 <lcd_init+0x7e2>
	{
		_delay_ms(__us / 1000.0);
    168c:	6d 89       	ldd	r22, Y+21	; 0x15
    168e:	7e 89       	ldd	r23, Y+22	; 0x16
    1690:	8f 89       	ldd	r24, Y+23	; 0x17
    1692:	98 8d       	ldd	r25, Y+24	; 0x18
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	4a e7       	ldi	r20, 0x7A	; 122
    169a:	54 e4       	ldi	r21, 0x44	; 68
    169c:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__divsf3>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	8c 87       	std	Y+12, r24	; 0x0c
    16a6:	9d 87       	std	Y+13, r25	; 0x0d
    16a8:	ae 87       	std	Y+14, r26	; 0x0e
    16aa:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ac:	6c 85       	ldd	r22, Y+12	; 0x0c
    16ae:	7d 85       	ldd	r23, Y+13	; 0x0d
    16b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    16b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	4a e7       	ldi	r20, 0x7A	; 122
    16ba:	55 e4       	ldi	r21, 0x45	; 69
    16bc:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	88 87       	std	Y+8, r24	; 0x08
    16c6:	99 87       	std	Y+9, r25	; 0x09
    16c8:	aa 87       	std	Y+10, r26	; 0x0a
    16ca:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    16cc:	68 85       	ldd	r22, Y+8	; 0x08
    16ce:	79 85       	ldd	r23, Y+9	; 0x09
    16d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    16d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	40 e8       	ldi	r20, 0x80	; 128
    16da:	5f e3       	ldi	r21, 0x3F	; 63
    16dc:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__ltsf2>
    16e0:	88 23       	and	r24, r24
    16e2:	2c f4       	brge	.+10     	; 0x16ee <lcd_init+0x74e>
		__ticks = 1;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	9f 83       	std	Y+7, r25	; 0x07
    16ea:	8e 83       	std	Y+6, r24	; 0x06
    16ec:	3f c0       	rjmp	.+126    	; 0x176c <lcd_init+0x7cc>
	else if (__tmp > 65535)
    16ee:	68 85       	ldd	r22, Y+8	; 0x08
    16f0:	79 85       	ldd	r23, Y+9	; 0x09
    16f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    16f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	3f ef       	ldi	r19, 0xFF	; 255
    16fa:	4f e7       	ldi	r20, 0x7F	; 127
    16fc:	57 e4       	ldi	r21, 0x47	; 71
    16fe:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__gtsf2>
    1702:	18 16       	cp	r1, r24
    1704:	4c f5       	brge	.+82     	; 0x1758 <lcd_init+0x7b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1706:	6c 85       	ldd	r22, Y+12	; 0x0c
    1708:	7d 85       	ldd	r23, Y+13	; 0x0d
    170a:	8e 85       	ldd	r24, Y+14	; 0x0e
    170c:	9f 85       	ldd	r25, Y+15	; 0x0f
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e2       	ldi	r20, 0x20	; 32
    1714:	51 e4       	ldi	r21, 0x41	; 65
    1716:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__mulsf3>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	bc 01       	movw	r22, r24
    1720:	cd 01       	movw	r24, r26
    1722:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fixunssfsi>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	9f 83       	std	Y+7, r25	; 0x07
    172c:	8e 83       	std	Y+6, r24	; 0x06
    172e:	0f c0       	rjmp	.+30     	; 0x174e <lcd_init+0x7ae>
    1730:	80 e9       	ldi	r24, 0x90	; 144
    1732:	91 e0       	ldi	r25, 0x01	; 1
    1734:	9d 83       	std	Y+5, r25	; 0x05
    1736:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	9d 81       	ldd	r25, Y+5	; 0x05
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	f1 f7       	brne	.-4      	; 0x173c <lcd_init+0x79c>
    1740:	9d 83       	std	Y+5, r25	; 0x05
    1742:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1744:	8e 81       	ldd	r24, Y+6	; 0x06
    1746:	9f 81       	ldd	r25, Y+7	; 0x07
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	9f 83       	std	Y+7, r25	; 0x07
    174c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    174e:	8e 81       	ldd	r24, Y+6	; 0x06
    1750:	9f 81       	ldd	r25, Y+7	; 0x07
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	69 f7       	brne	.-38     	; 0x1730 <lcd_init+0x790>
    1756:	24 c0       	rjmp	.+72     	; 0x17a0 <lcd_init+0x800>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1758:	68 85       	ldd	r22, Y+8	; 0x08
    175a:	79 85       	ldd	r23, Y+9	; 0x09
    175c:	8a 85       	ldd	r24, Y+10	; 0x0a
    175e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1760:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fixunssfsi>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	9f 83       	std	Y+7, r25	; 0x07
    176a:	8e 83       	std	Y+6, r24	; 0x06
    176c:	8e 81       	ldd	r24, Y+6	; 0x06
    176e:	9f 81       	ldd	r25, Y+7	; 0x07
    1770:	9b 83       	std	Y+3, r25	; 0x03
    1772:	8a 83       	std	Y+2, r24	; 0x02
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	9b 81       	ldd	r25, Y+3	; 0x03
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	f1 f7       	brne	.-4      	; 0x1778 <lcd_init+0x7d8>
    177c:	9b 83       	std	Y+3, r25	; 0x03
    177e:	8a 83       	std	Y+2, r24	; 0x02
    1780:	0f c0       	rjmp	.+30     	; 0x17a0 <lcd_init+0x800>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1782:	69 89       	ldd	r22, Y+17	; 0x11
    1784:	7a 89       	ldd	r23, Y+18	; 0x12
    1786:	8b 89       	ldd	r24, Y+19	; 0x13
    1788:	9c 89       	ldd	r25, Y+20	; 0x14
    178a:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fixunssfsi>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	88 8b       	std	Y+16, r24	; 0x10
    1794:	88 89       	ldd	r24, Y+16	; 0x10
    1796:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	8a 95       	dec	r24
    179c:	f1 f7       	brne	.-4      	; 0x179a <lcd_init+0x7fa>
    179e:	89 83       	std	Y+1, r24	; 0x01
  _delay_us( LCD_TIME_DAT );
#if LCD_LINE == 1
  lcd_command( 0x20 );                          // 1 line
#else
  lcd_command( 0x28 );                          // 2 lines 5*7
    17a0:	88 e2       	ldi	r24, 0x28	; 40
    17a2:	0e 94 67 06 	call	0xcce	; 0xcce <lcd_command>
#endif
  lcd_command( 0x08 );                          // display off
    17a6:	88 e0       	ldi	r24, 0x08	; 8
    17a8:	0e 94 67 06 	call	0xcce	; 0xcce <lcd_command>
  lcd_command( 0x01 );                          // display clear
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	0e 94 67 06 	call	0xcce	; 0xcce <lcd_command>
  lcd_command( 0x06 );                          // cursor increment
    17b2:	86 e0       	ldi	r24, 0x06	; 6
    17b4:	0e 94 67 06 	call	0xcce	; 0xcce <lcd_command>
  lcd_command( 0x0C );                          // on, no cursor, no blink
    17b8:	8c e0       	ldi	r24, 0x0C	; 12
    17ba:	0e 94 67 06 	call	0xcce	; 0xcce <lcd_command>
}
    17be:	cc 59       	subi	r28, 0x9C	; 156
    17c0:	df 4f       	sbci	r29, 0xFF	; 255
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	f8 94       	cli
    17c6:	de bf       	out	0x3e, r29	; 62
    17c8:	0f be       	out	0x3f, r0	; 63
    17ca:	cd bf       	out	0x3d, r28	; 61
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	1f 91       	pop	r17
    17d2:	0f 91       	pop	r16
    17d4:	08 95       	ret

000017d6 <__fixunssfsi>:
    17d6:	ef 92       	push	r14
    17d8:	ff 92       	push	r15
    17da:	0f 93       	push	r16
    17dc:	1f 93       	push	r17
    17de:	7b 01       	movw	r14, r22
    17e0:	8c 01       	movw	r16, r24
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e0       	ldi	r20, 0x00	; 0
    17e8:	5f e4       	ldi	r21, 0x4F	; 79
    17ea:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <__gesf2>
    17ee:	88 23       	and	r24, r24
    17f0:	8c f0       	brlt	.+34     	; 0x1814 <__fixunssfsi+0x3e>
    17f2:	c8 01       	movw	r24, r16
    17f4:	b7 01       	movw	r22, r14
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	40 e0       	ldi	r20, 0x00	; 0
    17fc:	5f e4       	ldi	r21, 0x4F	; 79
    17fe:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__subsf3>
    1802:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__fixsfsi>
    1806:	9b 01       	movw	r18, r22
    1808:	ac 01       	movw	r20, r24
    180a:	20 50       	subi	r18, 0x00	; 0
    180c:	30 40       	sbci	r19, 0x00	; 0
    180e:	40 40       	sbci	r20, 0x00	; 0
    1810:	50 48       	sbci	r21, 0x80	; 128
    1812:	06 c0       	rjmp	.+12     	; 0x1820 <__fixunssfsi+0x4a>
    1814:	c8 01       	movw	r24, r16
    1816:	b7 01       	movw	r22, r14
    1818:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__fixsfsi>
    181c:	9b 01       	movw	r18, r22
    181e:	ac 01       	movw	r20, r24
    1820:	b9 01       	movw	r22, r18
    1822:	ca 01       	movw	r24, r20
    1824:	1f 91       	pop	r17
    1826:	0f 91       	pop	r16
    1828:	ff 90       	pop	r15
    182a:	ef 90       	pop	r14
    182c:	08 95       	ret

0000182e <_fpadd_parts>:
    182e:	a0 e0       	ldi	r26, 0x00	; 0
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	ed e1       	ldi	r30, 0x1D	; 29
    1834:	fc e0       	ldi	r31, 0x0C	; 12
    1836:	0c 94 f1 11 	jmp	0x23e2	; 0x23e2 <__prologue_saves__>
    183a:	dc 01       	movw	r26, r24
    183c:	2b 01       	movw	r4, r22
    183e:	fa 01       	movw	r30, r20
    1840:	9c 91       	ld	r25, X
    1842:	92 30       	cpi	r25, 0x02	; 2
    1844:	08 f4       	brcc	.+2      	; 0x1848 <_fpadd_parts+0x1a>
    1846:	39 c1       	rjmp	.+626    	; 0x1aba <_fpadd_parts+0x28c>
    1848:	eb 01       	movw	r28, r22
    184a:	88 81       	ld	r24, Y
    184c:	82 30       	cpi	r24, 0x02	; 2
    184e:	08 f4       	brcc	.+2      	; 0x1852 <_fpadd_parts+0x24>
    1850:	33 c1       	rjmp	.+614    	; 0x1ab8 <_fpadd_parts+0x28a>
    1852:	94 30       	cpi	r25, 0x04	; 4
    1854:	69 f4       	brne	.+26     	; 0x1870 <_fpadd_parts+0x42>
    1856:	84 30       	cpi	r24, 0x04	; 4
    1858:	09 f0       	breq	.+2      	; 0x185c <_fpadd_parts+0x2e>
    185a:	2f c1       	rjmp	.+606    	; 0x1aba <_fpadd_parts+0x28c>
    185c:	11 96       	adiw	r26, 0x01	; 1
    185e:	9c 91       	ld	r25, X
    1860:	11 97       	sbiw	r26, 0x01	; 1
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	98 17       	cp	r25, r24
    1866:	09 f4       	brne	.+2      	; 0x186a <_fpadd_parts+0x3c>
    1868:	28 c1       	rjmp	.+592    	; 0x1aba <_fpadd_parts+0x28c>
    186a:	aa e5       	ldi	r26, 0x5A	; 90
    186c:	b2 e0       	ldi	r27, 0x02	; 2
    186e:	25 c1       	rjmp	.+586    	; 0x1aba <_fpadd_parts+0x28c>
    1870:	84 30       	cpi	r24, 0x04	; 4
    1872:	09 f4       	brne	.+2      	; 0x1876 <_fpadd_parts+0x48>
    1874:	21 c1       	rjmp	.+578    	; 0x1ab8 <_fpadd_parts+0x28a>
    1876:	82 30       	cpi	r24, 0x02	; 2
    1878:	a9 f4       	brne	.+42     	; 0x18a4 <_fpadd_parts+0x76>
    187a:	92 30       	cpi	r25, 0x02	; 2
    187c:	09 f0       	breq	.+2      	; 0x1880 <_fpadd_parts+0x52>
    187e:	1d c1       	rjmp	.+570    	; 0x1aba <_fpadd_parts+0x28c>
    1880:	9a 01       	movw	r18, r20
    1882:	ad 01       	movw	r20, r26
    1884:	88 e0       	ldi	r24, 0x08	; 8
    1886:	ea 01       	movw	r28, r20
    1888:	09 90       	ld	r0, Y+
    188a:	ae 01       	movw	r20, r28
    188c:	e9 01       	movw	r28, r18
    188e:	09 92       	st	Y+, r0
    1890:	9e 01       	movw	r18, r28
    1892:	81 50       	subi	r24, 0x01	; 1
    1894:	c1 f7       	brne	.-16     	; 0x1886 <_fpadd_parts+0x58>
    1896:	e2 01       	movw	r28, r4
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	11 96       	adiw	r26, 0x01	; 1
    189c:	9c 91       	ld	r25, X
    189e:	89 23       	and	r24, r25
    18a0:	81 83       	std	Z+1, r24	; 0x01
    18a2:	08 c1       	rjmp	.+528    	; 0x1ab4 <_fpadd_parts+0x286>
    18a4:	92 30       	cpi	r25, 0x02	; 2
    18a6:	09 f4       	brne	.+2      	; 0x18aa <_fpadd_parts+0x7c>
    18a8:	07 c1       	rjmp	.+526    	; 0x1ab8 <_fpadd_parts+0x28a>
    18aa:	12 96       	adiw	r26, 0x02	; 2
    18ac:	2d 90       	ld	r2, X+
    18ae:	3c 90       	ld	r3, X
    18b0:	13 97       	sbiw	r26, 0x03	; 3
    18b2:	eb 01       	movw	r28, r22
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	9b 81       	ldd	r25, Y+3	; 0x03
    18b8:	14 96       	adiw	r26, 0x04	; 4
    18ba:	ad 90       	ld	r10, X+
    18bc:	bd 90       	ld	r11, X+
    18be:	cd 90       	ld	r12, X+
    18c0:	dc 90       	ld	r13, X
    18c2:	17 97       	sbiw	r26, 0x07	; 7
    18c4:	ec 80       	ldd	r14, Y+4	; 0x04
    18c6:	fd 80       	ldd	r15, Y+5	; 0x05
    18c8:	0e 81       	ldd	r16, Y+6	; 0x06
    18ca:	1f 81       	ldd	r17, Y+7	; 0x07
    18cc:	91 01       	movw	r18, r2
    18ce:	28 1b       	sub	r18, r24
    18d0:	39 0b       	sbc	r19, r25
    18d2:	b9 01       	movw	r22, r18
    18d4:	37 ff       	sbrs	r19, 7
    18d6:	04 c0       	rjmp	.+8      	; 0x18e0 <_fpadd_parts+0xb2>
    18d8:	66 27       	eor	r22, r22
    18da:	77 27       	eor	r23, r23
    18dc:	62 1b       	sub	r22, r18
    18de:	73 0b       	sbc	r23, r19
    18e0:	60 32       	cpi	r22, 0x20	; 32
    18e2:	71 05       	cpc	r23, r1
    18e4:	0c f0       	brlt	.+2      	; 0x18e8 <_fpadd_parts+0xba>
    18e6:	61 c0       	rjmp	.+194    	; 0x19aa <_fpadd_parts+0x17c>
    18e8:	12 16       	cp	r1, r18
    18ea:	13 06       	cpc	r1, r19
    18ec:	6c f5       	brge	.+90     	; 0x1948 <_fpadd_parts+0x11a>
    18ee:	37 01       	movw	r6, r14
    18f0:	48 01       	movw	r8, r16
    18f2:	06 2e       	mov	r0, r22
    18f4:	04 c0       	rjmp	.+8      	; 0x18fe <_fpadd_parts+0xd0>
    18f6:	96 94       	lsr	r9
    18f8:	87 94       	ror	r8
    18fa:	77 94       	ror	r7
    18fc:	67 94       	ror	r6
    18fe:	0a 94       	dec	r0
    1900:	d2 f7       	brpl	.-12     	; 0x18f6 <_fpadd_parts+0xc8>
    1902:	21 e0       	ldi	r18, 0x01	; 1
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	40 e0       	ldi	r20, 0x00	; 0
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	04 c0       	rjmp	.+8      	; 0x1914 <_fpadd_parts+0xe6>
    190c:	22 0f       	add	r18, r18
    190e:	33 1f       	adc	r19, r19
    1910:	44 1f       	adc	r20, r20
    1912:	55 1f       	adc	r21, r21
    1914:	6a 95       	dec	r22
    1916:	d2 f7       	brpl	.-12     	; 0x190c <_fpadd_parts+0xde>
    1918:	21 50       	subi	r18, 0x01	; 1
    191a:	30 40       	sbci	r19, 0x00	; 0
    191c:	40 40       	sbci	r20, 0x00	; 0
    191e:	50 40       	sbci	r21, 0x00	; 0
    1920:	2e 21       	and	r18, r14
    1922:	3f 21       	and	r19, r15
    1924:	40 23       	and	r20, r16
    1926:	51 23       	and	r21, r17
    1928:	21 15       	cp	r18, r1
    192a:	31 05       	cpc	r19, r1
    192c:	41 05       	cpc	r20, r1
    192e:	51 05       	cpc	r21, r1
    1930:	21 f0       	breq	.+8      	; 0x193a <_fpadd_parts+0x10c>
    1932:	21 e0       	ldi	r18, 0x01	; 1
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	40 e0       	ldi	r20, 0x00	; 0
    1938:	50 e0       	ldi	r21, 0x00	; 0
    193a:	79 01       	movw	r14, r18
    193c:	8a 01       	movw	r16, r20
    193e:	e6 28       	or	r14, r6
    1940:	f7 28       	or	r15, r7
    1942:	08 29       	or	r16, r8
    1944:	19 29       	or	r17, r9
    1946:	3c c0       	rjmp	.+120    	; 0x19c0 <_fpadd_parts+0x192>
    1948:	23 2b       	or	r18, r19
    194a:	d1 f1       	breq	.+116    	; 0x19c0 <_fpadd_parts+0x192>
    194c:	26 0e       	add	r2, r22
    194e:	37 1e       	adc	r3, r23
    1950:	35 01       	movw	r6, r10
    1952:	46 01       	movw	r8, r12
    1954:	06 2e       	mov	r0, r22
    1956:	04 c0       	rjmp	.+8      	; 0x1960 <_fpadd_parts+0x132>
    1958:	96 94       	lsr	r9
    195a:	87 94       	ror	r8
    195c:	77 94       	ror	r7
    195e:	67 94       	ror	r6
    1960:	0a 94       	dec	r0
    1962:	d2 f7       	brpl	.-12     	; 0x1958 <_fpadd_parts+0x12a>
    1964:	21 e0       	ldi	r18, 0x01	; 1
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	40 e0       	ldi	r20, 0x00	; 0
    196a:	50 e0       	ldi	r21, 0x00	; 0
    196c:	04 c0       	rjmp	.+8      	; 0x1976 <_fpadd_parts+0x148>
    196e:	22 0f       	add	r18, r18
    1970:	33 1f       	adc	r19, r19
    1972:	44 1f       	adc	r20, r20
    1974:	55 1f       	adc	r21, r21
    1976:	6a 95       	dec	r22
    1978:	d2 f7       	brpl	.-12     	; 0x196e <_fpadd_parts+0x140>
    197a:	21 50       	subi	r18, 0x01	; 1
    197c:	30 40       	sbci	r19, 0x00	; 0
    197e:	40 40       	sbci	r20, 0x00	; 0
    1980:	50 40       	sbci	r21, 0x00	; 0
    1982:	2a 21       	and	r18, r10
    1984:	3b 21       	and	r19, r11
    1986:	4c 21       	and	r20, r12
    1988:	5d 21       	and	r21, r13
    198a:	21 15       	cp	r18, r1
    198c:	31 05       	cpc	r19, r1
    198e:	41 05       	cpc	r20, r1
    1990:	51 05       	cpc	r21, r1
    1992:	21 f0       	breq	.+8      	; 0x199c <_fpadd_parts+0x16e>
    1994:	21 e0       	ldi	r18, 0x01	; 1
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e0       	ldi	r20, 0x00	; 0
    199a:	50 e0       	ldi	r21, 0x00	; 0
    199c:	59 01       	movw	r10, r18
    199e:	6a 01       	movw	r12, r20
    19a0:	a6 28       	or	r10, r6
    19a2:	b7 28       	or	r11, r7
    19a4:	c8 28       	or	r12, r8
    19a6:	d9 28       	or	r13, r9
    19a8:	0b c0       	rjmp	.+22     	; 0x19c0 <_fpadd_parts+0x192>
    19aa:	82 15       	cp	r24, r2
    19ac:	93 05       	cpc	r25, r3
    19ae:	2c f0       	brlt	.+10     	; 0x19ba <_fpadd_parts+0x18c>
    19b0:	1c 01       	movw	r2, r24
    19b2:	aa 24       	eor	r10, r10
    19b4:	bb 24       	eor	r11, r11
    19b6:	65 01       	movw	r12, r10
    19b8:	03 c0       	rjmp	.+6      	; 0x19c0 <_fpadd_parts+0x192>
    19ba:	ee 24       	eor	r14, r14
    19bc:	ff 24       	eor	r15, r15
    19be:	87 01       	movw	r16, r14
    19c0:	11 96       	adiw	r26, 0x01	; 1
    19c2:	9c 91       	ld	r25, X
    19c4:	d2 01       	movw	r26, r4
    19c6:	11 96       	adiw	r26, 0x01	; 1
    19c8:	8c 91       	ld	r24, X
    19ca:	98 17       	cp	r25, r24
    19cc:	09 f4       	brne	.+2      	; 0x19d0 <_fpadd_parts+0x1a2>
    19ce:	45 c0       	rjmp	.+138    	; 0x1a5a <_fpadd_parts+0x22c>
    19d0:	99 23       	and	r25, r25
    19d2:	39 f0       	breq	.+14     	; 0x19e2 <_fpadd_parts+0x1b4>
    19d4:	a8 01       	movw	r20, r16
    19d6:	97 01       	movw	r18, r14
    19d8:	2a 19       	sub	r18, r10
    19da:	3b 09       	sbc	r19, r11
    19dc:	4c 09       	sbc	r20, r12
    19de:	5d 09       	sbc	r21, r13
    19e0:	06 c0       	rjmp	.+12     	; 0x19ee <_fpadd_parts+0x1c0>
    19e2:	a6 01       	movw	r20, r12
    19e4:	95 01       	movw	r18, r10
    19e6:	2e 19       	sub	r18, r14
    19e8:	3f 09       	sbc	r19, r15
    19ea:	40 0b       	sbc	r20, r16
    19ec:	51 0b       	sbc	r21, r17
    19ee:	57 fd       	sbrc	r21, 7
    19f0:	08 c0       	rjmp	.+16     	; 0x1a02 <_fpadd_parts+0x1d4>
    19f2:	11 82       	std	Z+1, r1	; 0x01
    19f4:	33 82       	std	Z+3, r3	; 0x03
    19f6:	22 82       	std	Z+2, r2	; 0x02
    19f8:	24 83       	std	Z+4, r18	; 0x04
    19fa:	35 83       	std	Z+5, r19	; 0x05
    19fc:	46 83       	std	Z+6, r20	; 0x06
    19fe:	57 83       	std	Z+7, r21	; 0x07
    1a00:	1d c0       	rjmp	.+58     	; 0x1a3c <_fpadd_parts+0x20e>
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	81 83       	std	Z+1, r24	; 0x01
    1a06:	33 82       	std	Z+3, r3	; 0x03
    1a08:	22 82       	std	Z+2, r2	; 0x02
    1a0a:	88 27       	eor	r24, r24
    1a0c:	99 27       	eor	r25, r25
    1a0e:	dc 01       	movw	r26, r24
    1a10:	82 1b       	sub	r24, r18
    1a12:	93 0b       	sbc	r25, r19
    1a14:	a4 0b       	sbc	r26, r20
    1a16:	b5 0b       	sbc	r27, r21
    1a18:	84 83       	std	Z+4, r24	; 0x04
    1a1a:	95 83       	std	Z+5, r25	; 0x05
    1a1c:	a6 83       	std	Z+6, r26	; 0x06
    1a1e:	b7 83       	std	Z+7, r27	; 0x07
    1a20:	0d c0       	rjmp	.+26     	; 0x1a3c <_fpadd_parts+0x20e>
    1a22:	22 0f       	add	r18, r18
    1a24:	33 1f       	adc	r19, r19
    1a26:	44 1f       	adc	r20, r20
    1a28:	55 1f       	adc	r21, r21
    1a2a:	24 83       	std	Z+4, r18	; 0x04
    1a2c:	35 83       	std	Z+5, r19	; 0x05
    1a2e:	46 83       	std	Z+6, r20	; 0x06
    1a30:	57 83       	std	Z+7, r21	; 0x07
    1a32:	82 81       	ldd	r24, Z+2	; 0x02
    1a34:	93 81       	ldd	r25, Z+3	; 0x03
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	93 83       	std	Z+3, r25	; 0x03
    1a3a:	82 83       	std	Z+2, r24	; 0x02
    1a3c:	24 81       	ldd	r18, Z+4	; 0x04
    1a3e:	35 81       	ldd	r19, Z+5	; 0x05
    1a40:	46 81       	ldd	r20, Z+6	; 0x06
    1a42:	57 81       	ldd	r21, Z+7	; 0x07
    1a44:	da 01       	movw	r26, r20
    1a46:	c9 01       	movw	r24, r18
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	a1 09       	sbc	r26, r1
    1a4c:	b1 09       	sbc	r27, r1
    1a4e:	8f 5f       	subi	r24, 0xFF	; 255
    1a50:	9f 4f       	sbci	r25, 0xFF	; 255
    1a52:	af 4f       	sbci	r26, 0xFF	; 255
    1a54:	bf 43       	sbci	r27, 0x3F	; 63
    1a56:	28 f3       	brcs	.-54     	; 0x1a22 <_fpadd_parts+0x1f4>
    1a58:	0b c0       	rjmp	.+22     	; 0x1a70 <_fpadd_parts+0x242>
    1a5a:	91 83       	std	Z+1, r25	; 0x01
    1a5c:	33 82       	std	Z+3, r3	; 0x03
    1a5e:	22 82       	std	Z+2, r2	; 0x02
    1a60:	ea 0c       	add	r14, r10
    1a62:	fb 1c       	adc	r15, r11
    1a64:	0c 1d       	adc	r16, r12
    1a66:	1d 1d       	adc	r17, r13
    1a68:	e4 82       	std	Z+4, r14	; 0x04
    1a6a:	f5 82       	std	Z+5, r15	; 0x05
    1a6c:	06 83       	std	Z+6, r16	; 0x06
    1a6e:	17 83       	std	Z+7, r17	; 0x07
    1a70:	83 e0       	ldi	r24, 0x03	; 3
    1a72:	80 83       	st	Z, r24
    1a74:	24 81       	ldd	r18, Z+4	; 0x04
    1a76:	35 81       	ldd	r19, Z+5	; 0x05
    1a78:	46 81       	ldd	r20, Z+6	; 0x06
    1a7a:	57 81       	ldd	r21, Z+7	; 0x07
    1a7c:	57 ff       	sbrs	r21, 7
    1a7e:	1a c0       	rjmp	.+52     	; 0x1ab4 <_fpadd_parts+0x286>
    1a80:	c9 01       	movw	r24, r18
    1a82:	aa 27       	eor	r26, r26
    1a84:	97 fd       	sbrc	r25, 7
    1a86:	a0 95       	com	r26
    1a88:	ba 2f       	mov	r27, r26
    1a8a:	81 70       	andi	r24, 0x01	; 1
    1a8c:	90 70       	andi	r25, 0x00	; 0
    1a8e:	a0 70       	andi	r26, 0x00	; 0
    1a90:	b0 70       	andi	r27, 0x00	; 0
    1a92:	56 95       	lsr	r21
    1a94:	47 95       	ror	r20
    1a96:	37 95       	ror	r19
    1a98:	27 95       	ror	r18
    1a9a:	82 2b       	or	r24, r18
    1a9c:	93 2b       	or	r25, r19
    1a9e:	a4 2b       	or	r26, r20
    1aa0:	b5 2b       	or	r27, r21
    1aa2:	84 83       	std	Z+4, r24	; 0x04
    1aa4:	95 83       	std	Z+5, r25	; 0x05
    1aa6:	a6 83       	std	Z+6, r26	; 0x06
    1aa8:	b7 83       	std	Z+7, r27	; 0x07
    1aaa:	82 81       	ldd	r24, Z+2	; 0x02
    1aac:	93 81       	ldd	r25, Z+3	; 0x03
    1aae:	01 96       	adiw	r24, 0x01	; 1
    1ab0:	93 83       	std	Z+3, r25	; 0x03
    1ab2:	82 83       	std	Z+2, r24	; 0x02
    1ab4:	df 01       	movw	r26, r30
    1ab6:	01 c0       	rjmp	.+2      	; 0x1aba <_fpadd_parts+0x28c>
    1ab8:	d2 01       	movw	r26, r4
    1aba:	cd 01       	movw	r24, r26
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	e2 e1       	ldi	r30, 0x12	; 18
    1ac2:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__epilogue_restores__>

00001ac6 <__subsf3>:
    1ac6:	a0 e2       	ldi	r26, 0x20	; 32
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e9 e6       	ldi	r30, 0x69	; 105
    1acc:	fd e0       	ldi	r31, 0x0D	; 13
    1ace:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__prologue_saves__+0x18>
    1ad2:	69 83       	std	Y+1, r22	; 0x01
    1ad4:	7a 83       	std	Y+2, r23	; 0x02
    1ad6:	8b 83       	std	Y+3, r24	; 0x03
    1ad8:	9c 83       	std	Y+4, r25	; 0x04
    1ada:	2d 83       	std	Y+5, r18	; 0x05
    1adc:	3e 83       	std	Y+6, r19	; 0x06
    1ade:	4f 83       	std	Y+7, r20	; 0x07
    1ae0:	58 87       	std	Y+8, r21	; 0x08
    1ae2:	e9 e0       	ldi	r30, 0x09	; 9
    1ae4:	ee 2e       	mov	r14, r30
    1ae6:	f1 2c       	mov	r15, r1
    1ae8:	ec 0e       	add	r14, r28
    1aea:	fd 1e       	adc	r15, r29
    1aec:	ce 01       	movw	r24, r28
    1aee:	01 96       	adiw	r24, 0x01	; 1
    1af0:	b7 01       	movw	r22, r14
    1af2:	0e 94 20 11 	call	0x2240	; 0x2240 <__unpack_f>
    1af6:	8e 01       	movw	r16, r28
    1af8:	0f 5e       	subi	r16, 0xEF	; 239
    1afa:	1f 4f       	sbci	r17, 0xFF	; 255
    1afc:	ce 01       	movw	r24, r28
    1afe:	05 96       	adiw	r24, 0x05	; 5
    1b00:	b8 01       	movw	r22, r16
    1b02:	0e 94 20 11 	call	0x2240	; 0x2240 <__unpack_f>
    1b06:	8a 89       	ldd	r24, Y+18	; 0x12
    1b08:	91 e0       	ldi	r25, 0x01	; 1
    1b0a:	89 27       	eor	r24, r25
    1b0c:	8a 8b       	std	Y+18, r24	; 0x12
    1b0e:	c7 01       	movw	r24, r14
    1b10:	b8 01       	movw	r22, r16
    1b12:	ae 01       	movw	r20, r28
    1b14:	47 5e       	subi	r20, 0xE7	; 231
    1b16:	5f 4f       	sbci	r21, 0xFF	; 255
    1b18:	0e 94 17 0c 	call	0x182e	; 0x182e <_fpadd_parts>
    1b1c:	0e 94 4b 10 	call	0x2096	; 0x2096 <__pack_f>
    1b20:	a0 96       	adiw	r28, 0x20	; 32
    1b22:	e6 e0       	ldi	r30, 0x06	; 6
    1b24:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__epilogue_restores__+0x18>

00001b28 <__addsf3>:
    1b28:	a0 e2       	ldi	r26, 0x20	; 32
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	ea e9       	ldi	r30, 0x9A	; 154
    1b2e:	fd e0       	ldi	r31, 0x0D	; 13
    1b30:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__prologue_saves__+0x18>
    1b34:	69 83       	std	Y+1, r22	; 0x01
    1b36:	7a 83       	std	Y+2, r23	; 0x02
    1b38:	8b 83       	std	Y+3, r24	; 0x03
    1b3a:	9c 83       	std	Y+4, r25	; 0x04
    1b3c:	2d 83       	std	Y+5, r18	; 0x05
    1b3e:	3e 83       	std	Y+6, r19	; 0x06
    1b40:	4f 83       	std	Y+7, r20	; 0x07
    1b42:	58 87       	std	Y+8, r21	; 0x08
    1b44:	f9 e0       	ldi	r31, 0x09	; 9
    1b46:	ef 2e       	mov	r14, r31
    1b48:	f1 2c       	mov	r15, r1
    1b4a:	ec 0e       	add	r14, r28
    1b4c:	fd 1e       	adc	r15, r29
    1b4e:	ce 01       	movw	r24, r28
    1b50:	01 96       	adiw	r24, 0x01	; 1
    1b52:	b7 01       	movw	r22, r14
    1b54:	0e 94 20 11 	call	0x2240	; 0x2240 <__unpack_f>
    1b58:	8e 01       	movw	r16, r28
    1b5a:	0f 5e       	subi	r16, 0xEF	; 239
    1b5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5e:	ce 01       	movw	r24, r28
    1b60:	05 96       	adiw	r24, 0x05	; 5
    1b62:	b8 01       	movw	r22, r16
    1b64:	0e 94 20 11 	call	0x2240	; 0x2240 <__unpack_f>
    1b68:	c7 01       	movw	r24, r14
    1b6a:	b8 01       	movw	r22, r16
    1b6c:	ae 01       	movw	r20, r28
    1b6e:	47 5e       	subi	r20, 0xE7	; 231
    1b70:	5f 4f       	sbci	r21, 0xFF	; 255
    1b72:	0e 94 17 0c 	call	0x182e	; 0x182e <_fpadd_parts>
    1b76:	0e 94 4b 10 	call	0x2096	; 0x2096 <__pack_f>
    1b7a:	a0 96       	adiw	r28, 0x20	; 32
    1b7c:	e6 e0       	ldi	r30, 0x06	; 6
    1b7e:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__epilogue_restores__+0x18>

00001b82 <__mulsf3>:
    1b82:	a0 e2       	ldi	r26, 0x20	; 32
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	e7 ec       	ldi	r30, 0xC7	; 199
    1b88:	fd e0       	ldi	r31, 0x0D	; 13
    1b8a:	0c 94 f1 11 	jmp	0x23e2	; 0x23e2 <__prologue_saves__>
    1b8e:	69 83       	std	Y+1, r22	; 0x01
    1b90:	7a 83       	std	Y+2, r23	; 0x02
    1b92:	8b 83       	std	Y+3, r24	; 0x03
    1b94:	9c 83       	std	Y+4, r25	; 0x04
    1b96:	2d 83       	std	Y+5, r18	; 0x05
    1b98:	3e 83       	std	Y+6, r19	; 0x06
    1b9a:	4f 83       	std	Y+7, r20	; 0x07
    1b9c:	58 87       	std	Y+8, r21	; 0x08
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	01 96       	adiw	r24, 0x01	; 1
    1ba2:	be 01       	movw	r22, r28
    1ba4:	67 5f       	subi	r22, 0xF7	; 247
    1ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba8:	0e 94 20 11 	call	0x2240	; 0x2240 <__unpack_f>
    1bac:	ce 01       	movw	r24, r28
    1bae:	05 96       	adiw	r24, 0x05	; 5
    1bb0:	be 01       	movw	r22, r28
    1bb2:	6f 5e       	subi	r22, 0xEF	; 239
    1bb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb6:	0e 94 20 11 	call	0x2240	; 0x2240 <__unpack_f>
    1bba:	99 85       	ldd	r25, Y+9	; 0x09
    1bbc:	92 30       	cpi	r25, 0x02	; 2
    1bbe:	88 f0       	brcs	.+34     	; 0x1be2 <__mulsf3+0x60>
    1bc0:	89 89       	ldd	r24, Y+17	; 0x11
    1bc2:	82 30       	cpi	r24, 0x02	; 2
    1bc4:	c8 f0       	brcs	.+50     	; 0x1bf8 <__mulsf3+0x76>
    1bc6:	94 30       	cpi	r25, 0x04	; 4
    1bc8:	19 f4       	brne	.+6      	; 0x1bd0 <__mulsf3+0x4e>
    1bca:	82 30       	cpi	r24, 0x02	; 2
    1bcc:	51 f4       	brne	.+20     	; 0x1be2 <__mulsf3+0x60>
    1bce:	04 c0       	rjmp	.+8      	; 0x1bd8 <__mulsf3+0x56>
    1bd0:	84 30       	cpi	r24, 0x04	; 4
    1bd2:	29 f4       	brne	.+10     	; 0x1bde <__mulsf3+0x5c>
    1bd4:	92 30       	cpi	r25, 0x02	; 2
    1bd6:	81 f4       	brne	.+32     	; 0x1bf8 <__mulsf3+0x76>
    1bd8:	8a e5       	ldi	r24, 0x5A	; 90
    1bda:	92 e0       	ldi	r25, 0x02	; 2
    1bdc:	c6 c0       	rjmp	.+396    	; 0x1d6a <__mulsf3+0x1e8>
    1bde:	92 30       	cpi	r25, 0x02	; 2
    1be0:	49 f4       	brne	.+18     	; 0x1bf4 <__mulsf3+0x72>
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be6:	8a 89       	ldd	r24, Y+18	; 0x12
    1be8:	98 13       	cpse	r25, r24
    1bea:	21 e0       	ldi	r18, 0x01	; 1
    1bec:	2a 87       	std	Y+10, r18	; 0x0a
    1bee:	ce 01       	movw	r24, r28
    1bf0:	09 96       	adiw	r24, 0x09	; 9
    1bf2:	bb c0       	rjmp	.+374    	; 0x1d6a <__mulsf3+0x1e8>
    1bf4:	82 30       	cpi	r24, 0x02	; 2
    1bf6:	49 f4       	brne	.+18     	; 0x1c0a <__mulsf3+0x88>
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfc:	8a 89       	ldd	r24, Y+18	; 0x12
    1bfe:	98 13       	cpse	r25, r24
    1c00:	21 e0       	ldi	r18, 0x01	; 1
    1c02:	2a 8b       	std	Y+18, r18	; 0x12
    1c04:	ce 01       	movw	r24, r28
    1c06:	41 96       	adiw	r24, 0x11	; 17
    1c08:	b0 c0       	rjmp	.+352    	; 0x1d6a <__mulsf3+0x1e8>
    1c0a:	2d 84       	ldd	r2, Y+13	; 0x0d
    1c0c:	3e 84       	ldd	r3, Y+14	; 0x0e
    1c0e:	4f 84       	ldd	r4, Y+15	; 0x0f
    1c10:	58 88       	ldd	r5, Y+16	; 0x10
    1c12:	6d 88       	ldd	r6, Y+21	; 0x15
    1c14:	7e 88       	ldd	r7, Y+22	; 0x16
    1c16:	8f 88       	ldd	r8, Y+23	; 0x17
    1c18:	98 8c       	ldd	r9, Y+24	; 0x18
    1c1a:	ee 24       	eor	r14, r14
    1c1c:	ff 24       	eor	r15, r15
    1c1e:	87 01       	movw	r16, r14
    1c20:	aa 24       	eor	r10, r10
    1c22:	bb 24       	eor	r11, r11
    1c24:	65 01       	movw	r12, r10
    1c26:	40 e0       	ldi	r20, 0x00	; 0
    1c28:	50 e0       	ldi	r21, 0x00	; 0
    1c2a:	60 e0       	ldi	r22, 0x00	; 0
    1c2c:	70 e0       	ldi	r23, 0x00	; 0
    1c2e:	e0 e0       	ldi	r30, 0x00	; 0
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	c1 01       	movw	r24, r2
    1c34:	81 70       	andi	r24, 0x01	; 1
    1c36:	90 70       	andi	r25, 0x00	; 0
    1c38:	89 2b       	or	r24, r25
    1c3a:	e9 f0       	breq	.+58     	; 0x1c76 <__mulsf3+0xf4>
    1c3c:	e6 0c       	add	r14, r6
    1c3e:	f7 1c       	adc	r15, r7
    1c40:	08 1d       	adc	r16, r8
    1c42:	19 1d       	adc	r17, r9
    1c44:	9a 01       	movw	r18, r20
    1c46:	ab 01       	movw	r20, r22
    1c48:	2a 0d       	add	r18, r10
    1c4a:	3b 1d       	adc	r19, r11
    1c4c:	4c 1d       	adc	r20, r12
    1c4e:	5d 1d       	adc	r21, r13
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	a0 e0       	ldi	r26, 0x00	; 0
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e6 14       	cp	r14, r6
    1c5a:	f7 04       	cpc	r15, r7
    1c5c:	08 05       	cpc	r16, r8
    1c5e:	19 05       	cpc	r17, r9
    1c60:	20 f4       	brcc	.+8      	; 0x1c6a <__mulsf3+0xe8>
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	a0 e0       	ldi	r26, 0x00	; 0
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	ba 01       	movw	r22, r20
    1c6c:	a9 01       	movw	r20, r18
    1c6e:	48 0f       	add	r20, r24
    1c70:	59 1f       	adc	r21, r25
    1c72:	6a 1f       	adc	r22, r26
    1c74:	7b 1f       	adc	r23, r27
    1c76:	aa 0c       	add	r10, r10
    1c78:	bb 1c       	adc	r11, r11
    1c7a:	cc 1c       	adc	r12, r12
    1c7c:	dd 1c       	adc	r13, r13
    1c7e:	97 fe       	sbrs	r9, 7
    1c80:	08 c0       	rjmp	.+16     	; 0x1c92 <__mulsf3+0x110>
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	a0 e0       	ldi	r26, 0x00	; 0
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	a8 2a       	or	r10, r24
    1c8c:	b9 2a       	or	r11, r25
    1c8e:	ca 2a       	or	r12, r26
    1c90:	db 2a       	or	r13, r27
    1c92:	31 96       	adiw	r30, 0x01	; 1
    1c94:	e0 32       	cpi	r30, 0x20	; 32
    1c96:	f1 05       	cpc	r31, r1
    1c98:	49 f0       	breq	.+18     	; 0x1cac <__mulsf3+0x12a>
    1c9a:	66 0c       	add	r6, r6
    1c9c:	77 1c       	adc	r7, r7
    1c9e:	88 1c       	adc	r8, r8
    1ca0:	99 1c       	adc	r9, r9
    1ca2:	56 94       	lsr	r5
    1ca4:	47 94       	ror	r4
    1ca6:	37 94       	ror	r3
    1ca8:	27 94       	ror	r2
    1caa:	c3 cf       	rjmp	.-122    	; 0x1c32 <__mulsf3+0xb0>
    1cac:	fa 85       	ldd	r31, Y+10	; 0x0a
    1cae:	ea 89       	ldd	r30, Y+18	; 0x12
    1cb0:	2b 89       	ldd	r18, Y+19	; 0x13
    1cb2:	3c 89       	ldd	r19, Y+20	; 0x14
    1cb4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cb6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cb8:	28 0f       	add	r18, r24
    1cba:	39 1f       	adc	r19, r25
    1cbc:	2e 5f       	subi	r18, 0xFE	; 254
    1cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc0:	17 c0       	rjmp	.+46     	; 0x1cf0 <__mulsf3+0x16e>
    1cc2:	ca 01       	movw	r24, r20
    1cc4:	81 70       	andi	r24, 0x01	; 1
    1cc6:	90 70       	andi	r25, 0x00	; 0
    1cc8:	89 2b       	or	r24, r25
    1cca:	61 f0       	breq	.+24     	; 0x1ce4 <__mulsf3+0x162>
    1ccc:	16 95       	lsr	r17
    1cce:	07 95       	ror	r16
    1cd0:	f7 94       	ror	r15
    1cd2:	e7 94       	ror	r14
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	a0 e0       	ldi	r26, 0x00	; 0
    1cda:	b0 e8       	ldi	r27, 0x80	; 128
    1cdc:	e8 2a       	or	r14, r24
    1cde:	f9 2a       	or	r15, r25
    1ce0:	0a 2b       	or	r16, r26
    1ce2:	1b 2b       	or	r17, r27
    1ce4:	76 95       	lsr	r23
    1ce6:	67 95       	ror	r22
    1ce8:	57 95       	ror	r21
    1cea:	47 95       	ror	r20
    1cec:	2f 5f       	subi	r18, 0xFF	; 255
    1cee:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf0:	77 fd       	sbrc	r23, 7
    1cf2:	e7 cf       	rjmp	.-50     	; 0x1cc2 <__mulsf3+0x140>
    1cf4:	0c c0       	rjmp	.+24     	; 0x1d0e <__mulsf3+0x18c>
    1cf6:	44 0f       	add	r20, r20
    1cf8:	55 1f       	adc	r21, r21
    1cfa:	66 1f       	adc	r22, r22
    1cfc:	77 1f       	adc	r23, r23
    1cfe:	17 fd       	sbrc	r17, 7
    1d00:	41 60       	ori	r20, 0x01	; 1
    1d02:	ee 0c       	add	r14, r14
    1d04:	ff 1c       	adc	r15, r15
    1d06:	00 1f       	adc	r16, r16
    1d08:	11 1f       	adc	r17, r17
    1d0a:	21 50       	subi	r18, 0x01	; 1
    1d0c:	30 40       	sbci	r19, 0x00	; 0
    1d0e:	40 30       	cpi	r20, 0x00	; 0
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	59 07       	cpc	r21, r25
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	69 07       	cpc	r22, r25
    1d18:	90 e4       	ldi	r25, 0x40	; 64
    1d1a:	79 07       	cpc	r23, r25
    1d1c:	60 f3       	brcs	.-40     	; 0x1cf6 <__mulsf3+0x174>
    1d1e:	2b 8f       	std	Y+27, r18	; 0x1b
    1d20:	3c 8f       	std	Y+28, r19	; 0x1c
    1d22:	db 01       	movw	r26, r22
    1d24:	ca 01       	movw	r24, r20
    1d26:	8f 77       	andi	r24, 0x7F	; 127
    1d28:	90 70       	andi	r25, 0x00	; 0
    1d2a:	a0 70       	andi	r26, 0x00	; 0
    1d2c:	b0 70       	andi	r27, 0x00	; 0
    1d2e:	80 34       	cpi	r24, 0x40	; 64
    1d30:	91 05       	cpc	r25, r1
    1d32:	a1 05       	cpc	r26, r1
    1d34:	b1 05       	cpc	r27, r1
    1d36:	61 f4       	brne	.+24     	; 0x1d50 <__mulsf3+0x1ce>
    1d38:	47 fd       	sbrc	r20, 7
    1d3a:	0a c0       	rjmp	.+20     	; 0x1d50 <__mulsf3+0x1ce>
    1d3c:	e1 14       	cp	r14, r1
    1d3e:	f1 04       	cpc	r15, r1
    1d40:	01 05       	cpc	r16, r1
    1d42:	11 05       	cpc	r17, r1
    1d44:	29 f0       	breq	.+10     	; 0x1d50 <__mulsf3+0x1ce>
    1d46:	40 5c       	subi	r20, 0xC0	; 192
    1d48:	5f 4f       	sbci	r21, 0xFF	; 255
    1d4a:	6f 4f       	sbci	r22, 0xFF	; 255
    1d4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4e:	40 78       	andi	r20, 0x80	; 128
    1d50:	1a 8e       	std	Y+26, r1	; 0x1a
    1d52:	fe 17       	cp	r31, r30
    1d54:	11 f0       	breq	.+4      	; 0x1d5a <__mulsf3+0x1d8>
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	8a 8f       	std	Y+26, r24	; 0x1a
    1d5a:	4d 8f       	std	Y+29, r20	; 0x1d
    1d5c:	5e 8f       	std	Y+30, r21	; 0x1e
    1d5e:	6f 8f       	std	Y+31, r22	; 0x1f
    1d60:	78 a3       	std	Y+32, r23	; 0x20
    1d62:	83 e0       	ldi	r24, 0x03	; 3
    1d64:	89 8f       	std	Y+25, r24	; 0x19
    1d66:	ce 01       	movw	r24, r28
    1d68:	49 96       	adiw	r24, 0x19	; 25
    1d6a:	0e 94 4b 10 	call	0x2096	; 0x2096 <__pack_f>
    1d6e:	a0 96       	adiw	r28, 0x20	; 32
    1d70:	e2 e1       	ldi	r30, 0x12	; 18
    1d72:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__epilogue_restores__>

00001d76 <__divsf3>:
    1d76:	a8 e1       	ldi	r26, 0x18	; 24
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e1 ec       	ldi	r30, 0xC1	; 193
    1d7c:	fe e0       	ldi	r31, 0x0E	; 14
    1d7e:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__prologue_saves__+0x10>
    1d82:	69 83       	std	Y+1, r22	; 0x01
    1d84:	7a 83       	std	Y+2, r23	; 0x02
    1d86:	8b 83       	std	Y+3, r24	; 0x03
    1d88:	9c 83       	std	Y+4, r25	; 0x04
    1d8a:	2d 83       	std	Y+5, r18	; 0x05
    1d8c:	3e 83       	std	Y+6, r19	; 0x06
    1d8e:	4f 83       	std	Y+7, r20	; 0x07
    1d90:	58 87       	std	Y+8, r21	; 0x08
    1d92:	b9 e0       	ldi	r27, 0x09	; 9
    1d94:	eb 2e       	mov	r14, r27
    1d96:	f1 2c       	mov	r15, r1
    1d98:	ec 0e       	add	r14, r28
    1d9a:	fd 1e       	adc	r15, r29
    1d9c:	ce 01       	movw	r24, r28
    1d9e:	01 96       	adiw	r24, 0x01	; 1
    1da0:	b7 01       	movw	r22, r14
    1da2:	0e 94 20 11 	call	0x2240	; 0x2240 <__unpack_f>
    1da6:	8e 01       	movw	r16, r28
    1da8:	0f 5e       	subi	r16, 0xEF	; 239
    1daa:	1f 4f       	sbci	r17, 0xFF	; 255
    1dac:	ce 01       	movw	r24, r28
    1dae:	05 96       	adiw	r24, 0x05	; 5
    1db0:	b8 01       	movw	r22, r16
    1db2:	0e 94 20 11 	call	0x2240	; 0x2240 <__unpack_f>
    1db6:	29 85       	ldd	r18, Y+9	; 0x09
    1db8:	22 30       	cpi	r18, 0x02	; 2
    1dba:	08 f4       	brcc	.+2      	; 0x1dbe <__divsf3+0x48>
    1dbc:	7e c0       	rjmp	.+252    	; 0x1eba <__divsf3+0x144>
    1dbe:	39 89       	ldd	r19, Y+17	; 0x11
    1dc0:	32 30       	cpi	r19, 0x02	; 2
    1dc2:	10 f4       	brcc	.+4      	; 0x1dc8 <__divsf3+0x52>
    1dc4:	b8 01       	movw	r22, r16
    1dc6:	7c c0       	rjmp	.+248    	; 0x1ec0 <__divsf3+0x14a>
    1dc8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dca:	9a 89       	ldd	r25, Y+18	; 0x12
    1dcc:	89 27       	eor	r24, r25
    1dce:	8a 87       	std	Y+10, r24	; 0x0a
    1dd0:	24 30       	cpi	r18, 0x04	; 4
    1dd2:	11 f0       	breq	.+4      	; 0x1dd8 <__divsf3+0x62>
    1dd4:	22 30       	cpi	r18, 0x02	; 2
    1dd6:	31 f4       	brne	.+12     	; 0x1de4 <__divsf3+0x6e>
    1dd8:	23 17       	cp	r18, r19
    1dda:	09 f0       	breq	.+2      	; 0x1dde <__divsf3+0x68>
    1ddc:	6e c0       	rjmp	.+220    	; 0x1eba <__divsf3+0x144>
    1dde:	6a e5       	ldi	r22, 0x5A	; 90
    1de0:	72 e0       	ldi	r23, 0x02	; 2
    1de2:	6e c0       	rjmp	.+220    	; 0x1ec0 <__divsf3+0x14a>
    1de4:	34 30       	cpi	r19, 0x04	; 4
    1de6:	39 f4       	brne	.+14     	; 0x1df6 <__divsf3+0x80>
    1de8:	1d 86       	std	Y+13, r1	; 0x0d
    1dea:	1e 86       	std	Y+14, r1	; 0x0e
    1dec:	1f 86       	std	Y+15, r1	; 0x0f
    1dee:	18 8a       	std	Y+16, r1	; 0x10
    1df0:	1c 86       	std	Y+12, r1	; 0x0c
    1df2:	1b 86       	std	Y+11, r1	; 0x0b
    1df4:	04 c0       	rjmp	.+8      	; 0x1dfe <__divsf3+0x88>
    1df6:	32 30       	cpi	r19, 0x02	; 2
    1df8:	21 f4       	brne	.+8      	; 0x1e02 <__divsf3+0x8c>
    1dfa:	84 e0       	ldi	r24, 0x04	; 4
    1dfc:	89 87       	std	Y+9, r24	; 0x09
    1dfe:	b7 01       	movw	r22, r14
    1e00:	5f c0       	rjmp	.+190    	; 0x1ec0 <__divsf3+0x14a>
    1e02:	2b 85       	ldd	r18, Y+11	; 0x0b
    1e04:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e06:	8b 89       	ldd	r24, Y+19	; 0x13
    1e08:	9c 89       	ldd	r25, Y+20	; 0x14
    1e0a:	28 1b       	sub	r18, r24
    1e0c:	39 0b       	sbc	r19, r25
    1e0e:	3c 87       	std	Y+12, r19	; 0x0c
    1e10:	2b 87       	std	Y+11, r18	; 0x0b
    1e12:	ed 84       	ldd	r14, Y+13	; 0x0d
    1e14:	fe 84       	ldd	r15, Y+14	; 0x0e
    1e16:	0f 85       	ldd	r16, Y+15	; 0x0f
    1e18:	18 89       	ldd	r17, Y+16	; 0x10
    1e1a:	ad 88       	ldd	r10, Y+21	; 0x15
    1e1c:	be 88       	ldd	r11, Y+22	; 0x16
    1e1e:	cf 88       	ldd	r12, Y+23	; 0x17
    1e20:	d8 8c       	ldd	r13, Y+24	; 0x18
    1e22:	ea 14       	cp	r14, r10
    1e24:	fb 04       	cpc	r15, r11
    1e26:	0c 05       	cpc	r16, r12
    1e28:	1d 05       	cpc	r17, r13
    1e2a:	40 f4       	brcc	.+16     	; 0x1e3c <__divsf3+0xc6>
    1e2c:	ee 0c       	add	r14, r14
    1e2e:	ff 1c       	adc	r15, r15
    1e30:	00 1f       	adc	r16, r16
    1e32:	11 1f       	adc	r17, r17
    1e34:	21 50       	subi	r18, 0x01	; 1
    1e36:	30 40       	sbci	r19, 0x00	; 0
    1e38:	3c 87       	std	Y+12, r19	; 0x0c
    1e3a:	2b 87       	std	Y+11, r18	; 0x0b
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	40 e0       	ldi	r20, 0x00	; 0
    1e42:	50 e0       	ldi	r21, 0x00	; 0
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	a0 e0       	ldi	r26, 0x00	; 0
    1e4a:	b0 e4       	ldi	r27, 0x40	; 64
    1e4c:	60 e0       	ldi	r22, 0x00	; 0
    1e4e:	70 e0       	ldi	r23, 0x00	; 0
    1e50:	ea 14       	cp	r14, r10
    1e52:	fb 04       	cpc	r15, r11
    1e54:	0c 05       	cpc	r16, r12
    1e56:	1d 05       	cpc	r17, r13
    1e58:	40 f0       	brcs	.+16     	; 0x1e6a <__divsf3+0xf4>
    1e5a:	28 2b       	or	r18, r24
    1e5c:	39 2b       	or	r19, r25
    1e5e:	4a 2b       	or	r20, r26
    1e60:	5b 2b       	or	r21, r27
    1e62:	ea 18       	sub	r14, r10
    1e64:	fb 08       	sbc	r15, r11
    1e66:	0c 09       	sbc	r16, r12
    1e68:	1d 09       	sbc	r17, r13
    1e6a:	b6 95       	lsr	r27
    1e6c:	a7 95       	ror	r26
    1e6e:	97 95       	ror	r25
    1e70:	87 95       	ror	r24
    1e72:	ee 0c       	add	r14, r14
    1e74:	ff 1c       	adc	r15, r15
    1e76:	00 1f       	adc	r16, r16
    1e78:	11 1f       	adc	r17, r17
    1e7a:	6f 5f       	subi	r22, 0xFF	; 255
    1e7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7e:	6f 31       	cpi	r22, 0x1F	; 31
    1e80:	71 05       	cpc	r23, r1
    1e82:	31 f7       	brne	.-52     	; 0x1e50 <__divsf3+0xda>
    1e84:	da 01       	movw	r26, r20
    1e86:	c9 01       	movw	r24, r18
    1e88:	8f 77       	andi	r24, 0x7F	; 127
    1e8a:	90 70       	andi	r25, 0x00	; 0
    1e8c:	a0 70       	andi	r26, 0x00	; 0
    1e8e:	b0 70       	andi	r27, 0x00	; 0
    1e90:	80 34       	cpi	r24, 0x40	; 64
    1e92:	91 05       	cpc	r25, r1
    1e94:	a1 05       	cpc	r26, r1
    1e96:	b1 05       	cpc	r27, r1
    1e98:	61 f4       	brne	.+24     	; 0x1eb2 <__divsf3+0x13c>
    1e9a:	27 fd       	sbrc	r18, 7
    1e9c:	0a c0       	rjmp	.+20     	; 0x1eb2 <__divsf3+0x13c>
    1e9e:	e1 14       	cp	r14, r1
    1ea0:	f1 04       	cpc	r15, r1
    1ea2:	01 05       	cpc	r16, r1
    1ea4:	11 05       	cpc	r17, r1
    1ea6:	29 f0       	breq	.+10     	; 0x1eb2 <__divsf3+0x13c>
    1ea8:	20 5c       	subi	r18, 0xC0	; 192
    1eaa:	3f 4f       	sbci	r19, 0xFF	; 255
    1eac:	4f 4f       	sbci	r20, 0xFF	; 255
    1eae:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb0:	20 78       	andi	r18, 0x80	; 128
    1eb2:	2d 87       	std	Y+13, r18	; 0x0d
    1eb4:	3e 87       	std	Y+14, r19	; 0x0e
    1eb6:	4f 87       	std	Y+15, r20	; 0x0f
    1eb8:	58 8b       	std	Y+16, r21	; 0x10
    1eba:	be 01       	movw	r22, r28
    1ebc:	67 5f       	subi	r22, 0xF7	; 247
    1ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	0e 94 4b 10 	call	0x2096	; 0x2096 <__pack_f>
    1ec6:	68 96       	adiw	r28, 0x18	; 24
    1ec8:	ea e0       	ldi	r30, 0x0A	; 10
    1eca:	0c 94 15 12 	jmp	0x242a	; 0x242a <__epilogue_restores__+0x10>

00001ece <__gtsf2>:
    1ece:	a8 e1       	ldi	r26, 0x18	; 24
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	ed e6       	ldi	r30, 0x6D	; 109
    1ed4:	ff e0       	ldi	r31, 0x0F	; 15
    1ed6:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__prologue_saves__+0x18>
    1eda:	69 83       	std	Y+1, r22	; 0x01
    1edc:	7a 83       	std	Y+2, r23	; 0x02
    1ede:	8b 83       	std	Y+3, r24	; 0x03
    1ee0:	9c 83       	std	Y+4, r25	; 0x04
    1ee2:	2d 83       	std	Y+5, r18	; 0x05
    1ee4:	3e 83       	std	Y+6, r19	; 0x06
    1ee6:	4f 83       	std	Y+7, r20	; 0x07
    1ee8:	58 87       	std	Y+8, r21	; 0x08
    1eea:	89 e0       	ldi	r24, 0x09	; 9
    1eec:	e8 2e       	mov	r14, r24
    1eee:	f1 2c       	mov	r15, r1
    1ef0:	ec 0e       	add	r14, r28
    1ef2:	fd 1e       	adc	r15, r29
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	01 96       	adiw	r24, 0x01	; 1
    1ef8:	b7 01       	movw	r22, r14
    1efa:	0e 94 20 11 	call	0x2240	; 0x2240 <__unpack_f>
    1efe:	8e 01       	movw	r16, r28
    1f00:	0f 5e       	subi	r16, 0xEF	; 239
    1f02:	1f 4f       	sbci	r17, 0xFF	; 255
    1f04:	ce 01       	movw	r24, r28
    1f06:	05 96       	adiw	r24, 0x05	; 5
    1f08:	b8 01       	movw	r22, r16
    1f0a:	0e 94 20 11 	call	0x2240	; 0x2240 <__unpack_f>
    1f0e:	89 85       	ldd	r24, Y+9	; 0x09
    1f10:	82 30       	cpi	r24, 0x02	; 2
    1f12:	40 f0       	brcs	.+16     	; 0x1f24 <__gtsf2+0x56>
    1f14:	89 89       	ldd	r24, Y+17	; 0x11
    1f16:	82 30       	cpi	r24, 0x02	; 2
    1f18:	28 f0       	brcs	.+10     	; 0x1f24 <__gtsf2+0x56>
    1f1a:	c7 01       	movw	r24, r14
    1f1c:	b8 01       	movw	r22, r16
    1f1e:	0e 94 98 11 	call	0x2330	; 0x2330 <__fpcmp_parts_f>
    1f22:	01 c0       	rjmp	.+2      	; 0x1f26 <__gtsf2+0x58>
    1f24:	8f ef       	ldi	r24, 0xFF	; 255
    1f26:	68 96       	adiw	r28, 0x18	; 24
    1f28:	e6 e0       	ldi	r30, 0x06	; 6
    1f2a:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__epilogue_restores__+0x18>

00001f2e <__gesf2>:
    1f2e:	a8 e1       	ldi	r26, 0x18	; 24
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	ed e9       	ldi	r30, 0x9D	; 157
    1f34:	ff e0       	ldi	r31, 0x0F	; 15
    1f36:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__prologue_saves__+0x18>
    1f3a:	69 83       	std	Y+1, r22	; 0x01
    1f3c:	7a 83       	std	Y+2, r23	; 0x02
    1f3e:	8b 83       	std	Y+3, r24	; 0x03
    1f40:	9c 83       	std	Y+4, r25	; 0x04
    1f42:	2d 83       	std	Y+5, r18	; 0x05
    1f44:	3e 83       	std	Y+6, r19	; 0x06
    1f46:	4f 83       	std	Y+7, r20	; 0x07
    1f48:	58 87       	std	Y+8, r21	; 0x08
    1f4a:	89 e0       	ldi	r24, 0x09	; 9
    1f4c:	e8 2e       	mov	r14, r24
    1f4e:	f1 2c       	mov	r15, r1
    1f50:	ec 0e       	add	r14, r28
    1f52:	fd 1e       	adc	r15, r29
    1f54:	ce 01       	movw	r24, r28
    1f56:	01 96       	adiw	r24, 0x01	; 1
    1f58:	b7 01       	movw	r22, r14
    1f5a:	0e 94 20 11 	call	0x2240	; 0x2240 <__unpack_f>
    1f5e:	8e 01       	movw	r16, r28
    1f60:	0f 5e       	subi	r16, 0xEF	; 239
    1f62:	1f 4f       	sbci	r17, 0xFF	; 255
    1f64:	ce 01       	movw	r24, r28
    1f66:	05 96       	adiw	r24, 0x05	; 5
    1f68:	b8 01       	movw	r22, r16
    1f6a:	0e 94 20 11 	call	0x2240	; 0x2240 <__unpack_f>
    1f6e:	89 85       	ldd	r24, Y+9	; 0x09
    1f70:	82 30       	cpi	r24, 0x02	; 2
    1f72:	40 f0       	brcs	.+16     	; 0x1f84 <__gesf2+0x56>
    1f74:	89 89       	ldd	r24, Y+17	; 0x11
    1f76:	82 30       	cpi	r24, 0x02	; 2
    1f78:	28 f0       	brcs	.+10     	; 0x1f84 <__gesf2+0x56>
    1f7a:	c7 01       	movw	r24, r14
    1f7c:	b8 01       	movw	r22, r16
    1f7e:	0e 94 98 11 	call	0x2330	; 0x2330 <__fpcmp_parts_f>
    1f82:	01 c0       	rjmp	.+2      	; 0x1f86 <__gesf2+0x58>
    1f84:	8f ef       	ldi	r24, 0xFF	; 255
    1f86:	68 96       	adiw	r28, 0x18	; 24
    1f88:	e6 e0       	ldi	r30, 0x06	; 6
    1f8a:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__epilogue_restores__+0x18>

00001f8e <__ltsf2>:
    1f8e:	a8 e1       	ldi	r26, 0x18	; 24
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	ed ec       	ldi	r30, 0xCD	; 205
    1f94:	ff e0       	ldi	r31, 0x0F	; 15
    1f96:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__prologue_saves__+0x18>
    1f9a:	69 83       	std	Y+1, r22	; 0x01
    1f9c:	7a 83       	std	Y+2, r23	; 0x02
    1f9e:	8b 83       	std	Y+3, r24	; 0x03
    1fa0:	9c 83       	std	Y+4, r25	; 0x04
    1fa2:	2d 83       	std	Y+5, r18	; 0x05
    1fa4:	3e 83       	std	Y+6, r19	; 0x06
    1fa6:	4f 83       	std	Y+7, r20	; 0x07
    1fa8:	58 87       	std	Y+8, r21	; 0x08
    1faa:	89 e0       	ldi	r24, 0x09	; 9
    1fac:	e8 2e       	mov	r14, r24
    1fae:	f1 2c       	mov	r15, r1
    1fb0:	ec 0e       	add	r14, r28
    1fb2:	fd 1e       	adc	r15, r29
    1fb4:	ce 01       	movw	r24, r28
    1fb6:	01 96       	adiw	r24, 0x01	; 1
    1fb8:	b7 01       	movw	r22, r14
    1fba:	0e 94 20 11 	call	0x2240	; 0x2240 <__unpack_f>
    1fbe:	8e 01       	movw	r16, r28
    1fc0:	0f 5e       	subi	r16, 0xEF	; 239
    1fc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc4:	ce 01       	movw	r24, r28
    1fc6:	05 96       	adiw	r24, 0x05	; 5
    1fc8:	b8 01       	movw	r22, r16
    1fca:	0e 94 20 11 	call	0x2240	; 0x2240 <__unpack_f>
    1fce:	89 85       	ldd	r24, Y+9	; 0x09
    1fd0:	82 30       	cpi	r24, 0x02	; 2
    1fd2:	40 f0       	brcs	.+16     	; 0x1fe4 <__ltsf2+0x56>
    1fd4:	89 89       	ldd	r24, Y+17	; 0x11
    1fd6:	82 30       	cpi	r24, 0x02	; 2
    1fd8:	28 f0       	brcs	.+10     	; 0x1fe4 <__ltsf2+0x56>
    1fda:	c7 01       	movw	r24, r14
    1fdc:	b8 01       	movw	r22, r16
    1fde:	0e 94 98 11 	call	0x2330	; 0x2330 <__fpcmp_parts_f>
    1fe2:	01 c0       	rjmp	.+2      	; 0x1fe6 <__ltsf2+0x58>
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	68 96       	adiw	r28, 0x18	; 24
    1fe8:	e6 e0       	ldi	r30, 0x06	; 6
    1fea:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__epilogue_restores__+0x18>

00001fee <__fixsfsi>:
    1fee:	ac e0       	ldi	r26, 0x0C	; 12
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	ed ef       	ldi	r30, 0xFD	; 253
    1ff4:	ff e0       	ldi	r31, 0x0F	; 15
    1ff6:	0c 94 01 12 	jmp	0x2402	; 0x2402 <__prologue_saves__+0x20>
    1ffa:	69 83       	std	Y+1, r22	; 0x01
    1ffc:	7a 83       	std	Y+2, r23	; 0x02
    1ffe:	8b 83       	std	Y+3, r24	; 0x03
    2000:	9c 83       	std	Y+4, r25	; 0x04
    2002:	ce 01       	movw	r24, r28
    2004:	01 96       	adiw	r24, 0x01	; 1
    2006:	be 01       	movw	r22, r28
    2008:	6b 5f       	subi	r22, 0xFB	; 251
    200a:	7f 4f       	sbci	r23, 0xFF	; 255
    200c:	0e 94 20 11 	call	0x2240	; 0x2240 <__unpack_f>
    2010:	8d 81       	ldd	r24, Y+5	; 0x05
    2012:	82 30       	cpi	r24, 0x02	; 2
    2014:	61 f1       	breq	.+88     	; 0x206e <__fixsfsi+0x80>
    2016:	82 30       	cpi	r24, 0x02	; 2
    2018:	50 f1       	brcs	.+84     	; 0x206e <__fixsfsi+0x80>
    201a:	84 30       	cpi	r24, 0x04	; 4
    201c:	21 f4       	brne	.+8      	; 0x2026 <__fixsfsi+0x38>
    201e:	8e 81       	ldd	r24, Y+6	; 0x06
    2020:	88 23       	and	r24, r24
    2022:	51 f1       	breq	.+84     	; 0x2078 <__fixsfsi+0x8a>
    2024:	2e c0       	rjmp	.+92     	; 0x2082 <__fixsfsi+0x94>
    2026:	2f 81       	ldd	r18, Y+7	; 0x07
    2028:	38 85       	ldd	r19, Y+8	; 0x08
    202a:	37 fd       	sbrc	r19, 7
    202c:	20 c0       	rjmp	.+64     	; 0x206e <__fixsfsi+0x80>
    202e:	6e 81       	ldd	r22, Y+6	; 0x06
    2030:	2f 31       	cpi	r18, 0x1F	; 31
    2032:	31 05       	cpc	r19, r1
    2034:	1c f0       	brlt	.+6      	; 0x203c <__fixsfsi+0x4e>
    2036:	66 23       	and	r22, r22
    2038:	f9 f0       	breq	.+62     	; 0x2078 <__fixsfsi+0x8a>
    203a:	23 c0       	rjmp	.+70     	; 0x2082 <__fixsfsi+0x94>
    203c:	8e e1       	ldi	r24, 0x1E	; 30
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	82 1b       	sub	r24, r18
    2042:	93 0b       	sbc	r25, r19
    2044:	29 85       	ldd	r18, Y+9	; 0x09
    2046:	3a 85       	ldd	r19, Y+10	; 0x0a
    2048:	4b 85       	ldd	r20, Y+11	; 0x0b
    204a:	5c 85       	ldd	r21, Y+12	; 0x0c
    204c:	04 c0       	rjmp	.+8      	; 0x2056 <__fixsfsi+0x68>
    204e:	56 95       	lsr	r21
    2050:	47 95       	ror	r20
    2052:	37 95       	ror	r19
    2054:	27 95       	ror	r18
    2056:	8a 95       	dec	r24
    2058:	d2 f7       	brpl	.-12     	; 0x204e <__fixsfsi+0x60>
    205a:	66 23       	and	r22, r22
    205c:	b1 f0       	breq	.+44     	; 0x208a <__fixsfsi+0x9c>
    205e:	50 95       	com	r21
    2060:	40 95       	com	r20
    2062:	30 95       	com	r19
    2064:	21 95       	neg	r18
    2066:	3f 4f       	sbci	r19, 0xFF	; 255
    2068:	4f 4f       	sbci	r20, 0xFF	; 255
    206a:	5f 4f       	sbci	r21, 0xFF	; 255
    206c:	0e c0       	rjmp	.+28     	; 0x208a <__fixsfsi+0x9c>
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e0       	ldi	r20, 0x00	; 0
    2074:	50 e0       	ldi	r21, 0x00	; 0
    2076:	09 c0       	rjmp	.+18     	; 0x208a <__fixsfsi+0x9c>
    2078:	2f ef       	ldi	r18, 0xFF	; 255
    207a:	3f ef       	ldi	r19, 0xFF	; 255
    207c:	4f ef       	ldi	r20, 0xFF	; 255
    207e:	5f e7       	ldi	r21, 0x7F	; 127
    2080:	04 c0       	rjmp	.+8      	; 0x208a <__fixsfsi+0x9c>
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e0       	ldi	r20, 0x00	; 0
    2088:	50 e8       	ldi	r21, 0x80	; 128
    208a:	b9 01       	movw	r22, r18
    208c:	ca 01       	movw	r24, r20
    208e:	2c 96       	adiw	r28, 0x0c	; 12
    2090:	e2 e0       	ldi	r30, 0x02	; 2
    2092:	0c 94 1d 12 	jmp	0x243a	; 0x243a <__epilogue_restores__+0x20>

00002096 <__pack_f>:
    2096:	df 92       	push	r13
    2098:	ef 92       	push	r14
    209a:	ff 92       	push	r15
    209c:	0f 93       	push	r16
    209e:	1f 93       	push	r17
    20a0:	fc 01       	movw	r30, r24
    20a2:	e4 80       	ldd	r14, Z+4	; 0x04
    20a4:	f5 80       	ldd	r15, Z+5	; 0x05
    20a6:	06 81       	ldd	r16, Z+6	; 0x06
    20a8:	17 81       	ldd	r17, Z+7	; 0x07
    20aa:	d1 80       	ldd	r13, Z+1	; 0x01
    20ac:	80 81       	ld	r24, Z
    20ae:	82 30       	cpi	r24, 0x02	; 2
    20b0:	48 f4       	brcc	.+18     	; 0x20c4 <__pack_f+0x2e>
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	a0 e1       	ldi	r26, 0x10	; 16
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	e8 2a       	or	r14, r24
    20bc:	f9 2a       	or	r15, r25
    20be:	0a 2b       	or	r16, r26
    20c0:	1b 2b       	or	r17, r27
    20c2:	a5 c0       	rjmp	.+330    	; 0x220e <__stack+0xf>
    20c4:	84 30       	cpi	r24, 0x04	; 4
    20c6:	09 f4       	brne	.+2      	; 0x20ca <__pack_f+0x34>
    20c8:	9f c0       	rjmp	.+318    	; 0x2208 <__stack+0x9>
    20ca:	82 30       	cpi	r24, 0x02	; 2
    20cc:	21 f4       	brne	.+8      	; 0x20d6 <__pack_f+0x40>
    20ce:	ee 24       	eor	r14, r14
    20d0:	ff 24       	eor	r15, r15
    20d2:	87 01       	movw	r16, r14
    20d4:	05 c0       	rjmp	.+10     	; 0x20e0 <__pack_f+0x4a>
    20d6:	e1 14       	cp	r14, r1
    20d8:	f1 04       	cpc	r15, r1
    20da:	01 05       	cpc	r16, r1
    20dc:	11 05       	cpc	r17, r1
    20de:	19 f4       	brne	.+6      	; 0x20e6 <__pack_f+0x50>
    20e0:	e0 e0       	ldi	r30, 0x00	; 0
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	96 c0       	rjmp	.+300    	; 0x2212 <__stack+0x13>
    20e6:	62 81       	ldd	r22, Z+2	; 0x02
    20e8:	73 81       	ldd	r23, Z+3	; 0x03
    20ea:	9f ef       	ldi	r25, 0xFF	; 255
    20ec:	62 38       	cpi	r22, 0x82	; 130
    20ee:	79 07       	cpc	r23, r25
    20f0:	0c f0       	brlt	.+2      	; 0x20f4 <__pack_f+0x5e>
    20f2:	5b c0       	rjmp	.+182    	; 0x21aa <__pack_f+0x114>
    20f4:	22 e8       	ldi	r18, 0x82	; 130
    20f6:	3f ef       	ldi	r19, 0xFF	; 255
    20f8:	26 1b       	sub	r18, r22
    20fa:	37 0b       	sbc	r19, r23
    20fc:	2a 31       	cpi	r18, 0x1A	; 26
    20fe:	31 05       	cpc	r19, r1
    2100:	2c f0       	brlt	.+10     	; 0x210c <__pack_f+0x76>
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e0       	ldi	r20, 0x00	; 0
    2108:	50 e0       	ldi	r21, 0x00	; 0
    210a:	2a c0       	rjmp	.+84     	; 0x2160 <__pack_f+0xca>
    210c:	b8 01       	movw	r22, r16
    210e:	a7 01       	movw	r20, r14
    2110:	02 2e       	mov	r0, r18
    2112:	04 c0       	rjmp	.+8      	; 0x211c <__pack_f+0x86>
    2114:	76 95       	lsr	r23
    2116:	67 95       	ror	r22
    2118:	57 95       	ror	r21
    211a:	47 95       	ror	r20
    211c:	0a 94       	dec	r0
    211e:	d2 f7       	brpl	.-12     	; 0x2114 <__pack_f+0x7e>
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	a0 e0       	ldi	r26, 0x00	; 0
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	04 c0       	rjmp	.+8      	; 0x2132 <__pack_f+0x9c>
    212a:	88 0f       	add	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	aa 1f       	adc	r26, r26
    2130:	bb 1f       	adc	r27, r27
    2132:	2a 95       	dec	r18
    2134:	d2 f7       	brpl	.-12     	; 0x212a <__pack_f+0x94>
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	a1 09       	sbc	r26, r1
    213a:	b1 09       	sbc	r27, r1
    213c:	8e 21       	and	r24, r14
    213e:	9f 21       	and	r25, r15
    2140:	a0 23       	and	r26, r16
    2142:	b1 23       	and	r27, r17
    2144:	00 97       	sbiw	r24, 0x00	; 0
    2146:	a1 05       	cpc	r26, r1
    2148:	b1 05       	cpc	r27, r1
    214a:	21 f0       	breq	.+8      	; 0x2154 <__pack_f+0xbe>
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	a0 e0       	ldi	r26, 0x00	; 0
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	9a 01       	movw	r18, r20
    2156:	ab 01       	movw	r20, r22
    2158:	28 2b       	or	r18, r24
    215a:	39 2b       	or	r19, r25
    215c:	4a 2b       	or	r20, r26
    215e:	5b 2b       	or	r21, r27
    2160:	da 01       	movw	r26, r20
    2162:	c9 01       	movw	r24, r18
    2164:	8f 77       	andi	r24, 0x7F	; 127
    2166:	90 70       	andi	r25, 0x00	; 0
    2168:	a0 70       	andi	r26, 0x00	; 0
    216a:	b0 70       	andi	r27, 0x00	; 0
    216c:	80 34       	cpi	r24, 0x40	; 64
    216e:	91 05       	cpc	r25, r1
    2170:	a1 05       	cpc	r26, r1
    2172:	b1 05       	cpc	r27, r1
    2174:	39 f4       	brne	.+14     	; 0x2184 <__pack_f+0xee>
    2176:	27 ff       	sbrs	r18, 7
    2178:	09 c0       	rjmp	.+18     	; 0x218c <__pack_f+0xf6>
    217a:	20 5c       	subi	r18, 0xC0	; 192
    217c:	3f 4f       	sbci	r19, 0xFF	; 255
    217e:	4f 4f       	sbci	r20, 0xFF	; 255
    2180:	5f 4f       	sbci	r21, 0xFF	; 255
    2182:	04 c0       	rjmp	.+8      	; 0x218c <__pack_f+0xf6>
    2184:	21 5c       	subi	r18, 0xC1	; 193
    2186:	3f 4f       	sbci	r19, 0xFF	; 255
    2188:	4f 4f       	sbci	r20, 0xFF	; 255
    218a:	5f 4f       	sbci	r21, 0xFF	; 255
    218c:	e0 e0       	ldi	r30, 0x00	; 0
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	20 30       	cpi	r18, 0x00	; 0
    2192:	a0 e0       	ldi	r26, 0x00	; 0
    2194:	3a 07       	cpc	r19, r26
    2196:	a0 e0       	ldi	r26, 0x00	; 0
    2198:	4a 07       	cpc	r20, r26
    219a:	a0 e4       	ldi	r26, 0x40	; 64
    219c:	5a 07       	cpc	r21, r26
    219e:	10 f0       	brcs	.+4      	; 0x21a4 <__pack_f+0x10e>
    21a0:	e1 e0       	ldi	r30, 0x01	; 1
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	79 01       	movw	r14, r18
    21a6:	8a 01       	movw	r16, r20
    21a8:	27 c0       	rjmp	.+78     	; 0x21f8 <__pack_f+0x162>
    21aa:	60 38       	cpi	r22, 0x80	; 128
    21ac:	71 05       	cpc	r23, r1
    21ae:	64 f5       	brge	.+88     	; 0x2208 <__stack+0x9>
    21b0:	fb 01       	movw	r30, r22
    21b2:	e1 58       	subi	r30, 0x81	; 129
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	d8 01       	movw	r26, r16
    21b8:	c7 01       	movw	r24, r14
    21ba:	8f 77       	andi	r24, 0x7F	; 127
    21bc:	90 70       	andi	r25, 0x00	; 0
    21be:	a0 70       	andi	r26, 0x00	; 0
    21c0:	b0 70       	andi	r27, 0x00	; 0
    21c2:	80 34       	cpi	r24, 0x40	; 64
    21c4:	91 05       	cpc	r25, r1
    21c6:	a1 05       	cpc	r26, r1
    21c8:	b1 05       	cpc	r27, r1
    21ca:	39 f4       	brne	.+14     	; 0x21da <__pack_f+0x144>
    21cc:	e7 fe       	sbrs	r14, 7
    21ce:	0d c0       	rjmp	.+26     	; 0x21ea <__pack_f+0x154>
    21d0:	80 e4       	ldi	r24, 0x40	; 64
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	a0 e0       	ldi	r26, 0x00	; 0
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	04 c0       	rjmp	.+8      	; 0x21e2 <__pack_f+0x14c>
    21da:	8f e3       	ldi	r24, 0x3F	; 63
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	a0 e0       	ldi	r26, 0x00	; 0
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	e8 0e       	add	r14, r24
    21e4:	f9 1e       	adc	r15, r25
    21e6:	0a 1f       	adc	r16, r26
    21e8:	1b 1f       	adc	r17, r27
    21ea:	17 ff       	sbrs	r17, 7
    21ec:	05 c0       	rjmp	.+10     	; 0x21f8 <__pack_f+0x162>
    21ee:	16 95       	lsr	r17
    21f0:	07 95       	ror	r16
    21f2:	f7 94       	ror	r15
    21f4:	e7 94       	ror	r14
    21f6:	31 96       	adiw	r30, 0x01	; 1
    21f8:	87 e0       	ldi	r24, 0x07	; 7
    21fa:	16 95       	lsr	r17
    21fc:	07 95       	ror	r16
    21fe:	f7 94       	ror	r15
    2200:	e7 94       	ror	r14
    2202:	8a 95       	dec	r24
    2204:	d1 f7       	brne	.-12     	; 0x21fa <__pack_f+0x164>
    2206:	05 c0       	rjmp	.+10     	; 0x2212 <__stack+0x13>
    2208:	ee 24       	eor	r14, r14
    220a:	ff 24       	eor	r15, r15
    220c:	87 01       	movw	r16, r14
    220e:	ef ef       	ldi	r30, 0xFF	; 255
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	6e 2f       	mov	r22, r30
    2214:	67 95       	ror	r22
    2216:	66 27       	eor	r22, r22
    2218:	67 95       	ror	r22
    221a:	90 2f       	mov	r25, r16
    221c:	9f 77       	andi	r25, 0x7F	; 127
    221e:	d7 94       	ror	r13
    2220:	dd 24       	eor	r13, r13
    2222:	d7 94       	ror	r13
    2224:	8e 2f       	mov	r24, r30
    2226:	86 95       	lsr	r24
    2228:	49 2f       	mov	r20, r25
    222a:	46 2b       	or	r20, r22
    222c:	58 2f       	mov	r21, r24
    222e:	5d 29       	or	r21, r13
    2230:	b7 01       	movw	r22, r14
    2232:	ca 01       	movw	r24, r20
    2234:	1f 91       	pop	r17
    2236:	0f 91       	pop	r16
    2238:	ff 90       	pop	r15
    223a:	ef 90       	pop	r14
    223c:	df 90       	pop	r13
    223e:	08 95       	ret

00002240 <__unpack_f>:
    2240:	fc 01       	movw	r30, r24
    2242:	db 01       	movw	r26, r22
    2244:	40 81       	ld	r20, Z
    2246:	51 81       	ldd	r21, Z+1	; 0x01
    2248:	22 81       	ldd	r18, Z+2	; 0x02
    224a:	62 2f       	mov	r22, r18
    224c:	6f 77       	andi	r22, 0x7F	; 127
    224e:	70 e0       	ldi	r23, 0x00	; 0
    2250:	22 1f       	adc	r18, r18
    2252:	22 27       	eor	r18, r18
    2254:	22 1f       	adc	r18, r18
    2256:	93 81       	ldd	r25, Z+3	; 0x03
    2258:	89 2f       	mov	r24, r25
    225a:	88 0f       	add	r24, r24
    225c:	82 2b       	or	r24, r18
    225e:	28 2f       	mov	r18, r24
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	99 1f       	adc	r25, r25
    2264:	99 27       	eor	r25, r25
    2266:	99 1f       	adc	r25, r25
    2268:	11 96       	adiw	r26, 0x01	; 1
    226a:	9c 93       	st	X, r25
    226c:	11 97       	sbiw	r26, 0x01	; 1
    226e:	21 15       	cp	r18, r1
    2270:	31 05       	cpc	r19, r1
    2272:	a9 f5       	brne	.+106    	; 0x22de <__unpack_f+0x9e>
    2274:	41 15       	cp	r20, r1
    2276:	51 05       	cpc	r21, r1
    2278:	61 05       	cpc	r22, r1
    227a:	71 05       	cpc	r23, r1
    227c:	11 f4       	brne	.+4      	; 0x2282 <__unpack_f+0x42>
    227e:	82 e0       	ldi	r24, 0x02	; 2
    2280:	37 c0       	rjmp	.+110    	; 0x22f0 <__unpack_f+0xb0>
    2282:	82 e8       	ldi	r24, 0x82	; 130
    2284:	9f ef       	ldi	r25, 0xFF	; 255
    2286:	13 96       	adiw	r26, 0x03	; 3
    2288:	9c 93       	st	X, r25
    228a:	8e 93       	st	-X, r24
    228c:	12 97       	sbiw	r26, 0x02	; 2
    228e:	9a 01       	movw	r18, r20
    2290:	ab 01       	movw	r20, r22
    2292:	67 e0       	ldi	r22, 0x07	; 7
    2294:	22 0f       	add	r18, r18
    2296:	33 1f       	adc	r19, r19
    2298:	44 1f       	adc	r20, r20
    229a:	55 1f       	adc	r21, r21
    229c:	6a 95       	dec	r22
    229e:	d1 f7       	brne	.-12     	; 0x2294 <__unpack_f+0x54>
    22a0:	83 e0       	ldi	r24, 0x03	; 3
    22a2:	8c 93       	st	X, r24
    22a4:	0d c0       	rjmp	.+26     	; 0x22c0 <__unpack_f+0x80>
    22a6:	22 0f       	add	r18, r18
    22a8:	33 1f       	adc	r19, r19
    22aa:	44 1f       	adc	r20, r20
    22ac:	55 1f       	adc	r21, r21
    22ae:	12 96       	adiw	r26, 0x02	; 2
    22b0:	8d 91       	ld	r24, X+
    22b2:	9c 91       	ld	r25, X
    22b4:	13 97       	sbiw	r26, 0x03	; 3
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	13 96       	adiw	r26, 0x03	; 3
    22ba:	9c 93       	st	X, r25
    22bc:	8e 93       	st	-X, r24
    22be:	12 97       	sbiw	r26, 0x02	; 2
    22c0:	20 30       	cpi	r18, 0x00	; 0
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	38 07       	cpc	r19, r24
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	48 07       	cpc	r20, r24
    22ca:	80 e4       	ldi	r24, 0x40	; 64
    22cc:	58 07       	cpc	r21, r24
    22ce:	58 f3       	brcs	.-42     	; 0x22a6 <__unpack_f+0x66>
    22d0:	14 96       	adiw	r26, 0x04	; 4
    22d2:	2d 93       	st	X+, r18
    22d4:	3d 93       	st	X+, r19
    22d6:	4d 93       	st	X+, r20
    22d8:	5c 93       	st	X, r21
    22da:	17 97       	sbiw	r26, 0x07	; 7
    22dc:	08 95       	ret
    22de:	2f 3f       	cpi	r18, 0xFF	; 255
    22e0:	31 05       	cpc	r19, r1
    22e2:	79 f4       	brne	.+30     	; 0x2302 <__unpack_f+0xc2>
    22e4:	41 15       	cp	r20, r1
    22e6:	51 05       	cpc	r21, r1
    22e8:	61 05       	cpc	r22, r1
    22ea:	71 05       	cpc	r23, r1
    22ec:	19 f4       	brne	.+6      	; 0x22f4 <__unpack_f+0xb4>
    22ee:	84 e0       	ldi	r24, 0x04	; 4
    22f0:	8c 93       	st	X, r24
    22f2:	08 95       	ret
    22f4:	64 ff       	sbrs	r22, 4
    22f6:	03 c0       	rjmp	.+6      	; 0x22fe <__unpack_f+0xbe>
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	8c 93       	st	X, r24
    22fc:	12 c0       	rjmp	.+36     	; 0x2322 <__unpack_f+0xe2>
    22fe:	1c 92       	st	X, r1
    2300:	10 c0       	rjmp	.+32     	; 0x2322 <__unpack_f+0xe2>
    2302:	2f 57       	subi	r18, 0x7F	; 127
    2304:	30 40       	sbci	r19, 0x00	; 0
    2306:	13 96       	adiw	r26, 0x03	; 3
    2308:	3c 93       	st	X, r19
    230a:	2e 93       	st	-X, r18
    230c:	12 97       	sbiw	r26, 0x02	; 2
    230e:	83 e0       	ldi	r24, 0x03	; 3
    2310:	8c 93       	st	X, r24
    2312:	87 e0       	ldi	r24, 0x07	; 7
    2314:	44 0f       	add	r20, r20
    2316:	55 1f       	adc	r21, r21
    2318:	66 1f       	adc	r22, r22
    231a:	77 1f       	adc	r23, r23
    231c:	8a 95       	dec	r24
    231e:	d1 f7       	brne	.-12     	; 0x2314 <__unpack_f+0xd4>
    2320:	70 64       	ori	r23, 0x40	; 64
    2322:	14 96       	adiw	r26, 0x04	; 4
    2324:	4d 93       	st	X+, r20
    2326:	5d 93       	st	X+, r21
    2328:	6d 93       	st	X+, r22
    232a:	7c 93       	st	X, r23
    232c:	17 97       	sbiw	r26, 0x07	; 7
    232e:	08 95       	ret

00002330 <__fpcmp_parts_f>:
    2330:	1f 93       	push	r17
    2332:	dc 01       	movw	r26, r24
    2334:	fb 01       	movw	r30, r22
    2336:	9c 91       	ld	r25, X
    2338:	92 30       	cpi	r25, 0x02	; 2
    233a:	08 f4       	brcc	.+2      	; 0x233e <__fpcmp_parts_f+0xe>
    233c:	47 c0       	rjmp	.+142    	; 0x23cc <__fpcmp_parts_f+0x9c>
    233e:	80 81       	ld	r24, Z
    2340:	82 30       	cpi	r24, 0x02	; 2
    2342:	08 f4       	brcc	.+2      	; 0x2346 <__fpcmp_parts_f+0x16>
    2344:	43 c0       	rjmp	.+134    	; 0x23cc <__fpcmp_parts_f+0x9c>
    2346:	94 30       	cpi	r25, 0x04	; 4
    2348:	51 f4       	brne	.+20     	; 0x235e <__fpcmp_parts_f+0x2e>
    234a:	11 96       	adiw	r26, 0x01	; 1
    234c:	1c 91       	ld	r17, X
    234e:	84 30       	cpi	r24, 0x04	; 4
    2350:	99 f5       	brne	.+102    	; 0x23b8 <__fpcmp_parts_f+0x88>
    2352:	81 81       	ldd	r24, Z+1	; 0x01
    2354:	68 2f       	mov	r22, r24
    2356:	70 e0       	ldi	r23, 0x00	; 0
    2358:	61 1b       	sub	r22, r17
    235a:	71 09       	sbc	r23, r1
    235c:	3f c0       	rjmp	.+126    	; 0x23dc <__fpcmp_parts_f+0xac>
    235e:	84 30       	cpi	r24, 0x04	; 4
    2360:	21 f0       	breq	.+8      	; 0x236a <__fpcmp_parts_f+0x3a>
    2362:	92 30       	cpi	r25, 0x02	; 2
    2364:	31 f4       	brne	.+12     	; 0x2372 <__fpcmp_parts_f+0x42>
    2366:	82 30       	cpi	r24, 0x02	; 2
    2368:	b9 f1       	breq	.+110    	; 0x23d8 <__fpcmp_parts_f+0xa8>
    236a:	81 81       	ldd	r24, Z+1	; 0x01
    236c:	88 23       	and	r24, r24
    236e:	89 f1       	breq	.+98     	; 0x23d2 <__fpcmp_parts_f+0xa2>
    2370:	2d c0       	rjmp	.+90     	; 0x23cc <__fpcmp_parts_f+0x9c>
    2372:	11 96       	adiw	r26, 0x01	; 1
    2374:	1c 91       	ld	r17, X
    2376:	11 97       	sbiw	r26, 0x01	; 1
    2378:	82 30       	cpi	r24, 0x02	; 2
    237a:	f1 f0       	breq	.+60     	; 0x23b8 <__fpcmp_parts_f+0x88>
    237c:	81 81       	ldd	r24, Z+1	; 0x01
    237e:	18 17       	cp	r17, r24
    2380:	d9 f4       	brne	.+54     	; 0x23b8 <__fpcmp_parts_f+0x88>
    2382:	12 96       	adiw	r26, 0x02	; 2
    2384:	2d 91       	ld	r18, X+
    2386:	3c 91       	ld	r19, X
    2388:	13 97       	sbiw	r26, 0x03	; 3
    238a:	82 81       	ldd	r24, Z+2	; 0x02
    238c:	93 81       	ldd	r25, Z+3	; 0x03
    238e:	82 17       	cp	r24, r18
    2390:	93 07       	cpc	r25, r19
    2392:	94 f0       	brlt	.+36     	; 0x23b8 <__fpcmp_parts_f+0x88>
    2394:	28 17       	cp	r18, r24
    2396:	39 07       	cpc	r19, r25
    2398:	bc f0       	brlt	.+46     	; 0x23c8 <__fpcmp_parts_f+0x98>
    239a:	14 96       	adiw	r26, 0x04	; 4
    239c:	8d 91       	ld	r24, X+
    239e:	9d 91       	ld	r25, X+
    23a0:	0d 90       	ld	r0, X+
    23a2:	bc 91       	ld	r27, X
    23a4:	a0 2d       	mov	r26, r0
    23a6:	24 81       	ldd	r18, Z+4	; 0x04
    23a8:	35 81       	ldd	r19, Z+5	; 0x05
    23aa:	46 81       	ldd	r20, Z+6	; 0x06
    23ac:	57 81       	ldd	r21, Z+7	; 0x07
    23ae:	28 17       	cp	r18, r24
    23b0:	39 07       	cpc	r19, r25
    23b2:	4a 07       	cpc	r20, r26
    23b4:	5b 07       	cpc	r21, r27
    23b6:	18 f4       	brcc	.+6      	; 0x23be <__fpcmp_parts_f+0x8e>
    23b8:	11 23       	and	r17, r17
    23ba:	41 f0       	breq	.+16     	; 0x23cc <__fpcmp_parts_f+0x9c>
    23bc:	0a c0       	rjmp	.+20     	; 0x23d2 <__fpcmp_parts_f+0xa2>
    23be:	82 17       	cp	r24, r18
    23c0:	93 07       	cpc	r25, r19
    23c2:	a4 07       	cpc	r26, r20
    23c4:	b5 07       	cpc	r27, r21
    23c6:	40 f4       	brcc	.+16     	; 0x23d8 <__fpcmp_parts_f+0xa8>
    23c8:	11 23       	and	r17, r17
    23ca:	19 f0       	breq	.+6      	; 0x23d2 <__fpcmp_parts_f+0xa2>
    23cc:	61 e0       	ldi	r22, 0x01	; 1
    23ce:	70 e0       	ldi	r23, 0x00	; 0
    23d0:	05 c0       	rjmp	.+10     	; 0x23dc <__fpcmp_parts_f+0xac>
    23d2:	6f ef       	ldi	r22, 0xFF	; 255
    23d4:	7f ef       	ldi	r23, 0xFF	; 255
    23d6:	02 c0       	rjmp	.+4      	; 0x23dc <__fpcmp_parts_f+0xac>
    23d8:	60 e0       	ldi	r22, 0x00	; 0
    23da:	70 e0       	ldi	r23, 0x00	; 0
    23dc:	cb 01       	movw	r24, r22
    23de:	1f 91       	pop	r17
    23e0:	08 95       	ret

000023e2 <__prologue_saves__>:
    23e2:	2f 92       	push	r2
    23e4:	3f 92       	push	r3
    23e6:	4f 92       	push	r4
    23e8:	5f 92       	push	r5
    23ea:	6f 92       	push	r6
    23ec:	7f 92       	push	r7
    23ee:	8f 92       	push	r8
    23f0:	9f 92       	push	r9
    23f2:	af 92       	push	r10
    23f4:	bf 92       	push	r11
    23f6:	cf 92       	push	r12
    23f8:	df 92       	push	r13
    23fa:	ef 92       	push	r14
    23fc:	ff 92       	push	r15
    23fe:	0f 93       	push	r16
    2400:	1f 93       	push	r17
    2402:	cf 93       	push	r28
    2404:	df 93       	push	r29
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
    240a:	ca 1b       	sub	r28, r26
    240c:	db 0b       	sbc	r29, r27
    240e:	0f b6       	in	r0, 0x3f	; 63
    2410:	f8 94       	cli
    2412:	de bf       	out	0x3e, r29	; 62
    2414:	0f be       	out	0x3f, r0	; 63
    2416:	cd bf       	out	0x3d, r28	; 61
    2418:	19 94       	eijmp

0000241a <__epilogue_restores__>:
    241a:	2a 88       	ldd	r2, Y+18	; 0x12
    241c:	39 88       	ldd	r3, Y+17	; 0x11
    241e:	48 88       	ldd	r4, Y+16	; 0x10
    2420:	5f 84       	ldd	r5, Y+15	; 0x0f
    2422:	6e 84       	ldd	r6, Y+14	; 0x0e
    2424:	7d 84       	ldd	r7, Y+13	; 0x0d
    2426:	8c 84       	ldd	r8, Y+12	; 0x0c
    2428:	9b 84       	ldd	r9, Y+11	; 0x0b
    242a:	aa 84       	ldd	r10, Y+10	; 0x0a
    242c:	b9 84       	ldd	r11, Y+9	; 0x09
    242e:	c8 84       	ldd	r12, Y+8	; 0x08
    2430:	df 80       	ldd	r13, Y+7	; 0x07
    2432:	ee 80       	ldd	r14, Y+6	; 0x06
    2434:	fd 80       	ldd	r15, Y+5	; 0x05
    2436:	0c 81       	ldd	r16, Y+4	; 0x04
    2438:	1b 81       	ldd	r17, Y+3	; 0x03
    243a:	aa 81       	ldd	r26, Y+2	; 0x02
    243c:	b9 81       	ldd	r27, Y+1	; 0x01
    243e:	ce 0f       	add	r28, r30
    2440:	d1 1d       	adc	r29, r1
    2442:	0f b6       	in	r0, 0x3f	; 63
    2444:	f8 94       	cli
    2446:	de bf       	out	0x3e, r29	; 62
    2448:	0f be       	out	0x3f, r0	; 63
    244a:	cd bf       	out	0x3d, r28	; 61
    244c:	ed 01       	movw	r28, r26
    244e:	08 95       	ret

00002450 <_exit>:
    2450:	f8 94       	cli

00002452 <__stop_program>:
    2452:	ff cf       	rjmp	.-2      	; 0x2452 <__stop_program>
